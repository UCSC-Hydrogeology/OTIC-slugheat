function SlugHeat15(Mode)

%
% ==========================================================================
% ==========================================================================


% Clear out any existing CalF, CalP, PenF, and PenP files
if exist('SlugHeat15CalF.mat','file')
    delete('SlugHeat15CalF.mat');
end
if exist('SlugHeat15CalP.mat','file')
    delete('SlugHeat15CalP.mat');
end
if exist('SlugHeat15PenF.mat','file')
    delete('SlugHeat15PenF.mat');
end
if exist('SlugHeat15PenF.mat','file')
    delete('SlugHeat15PenF.mat');
end

%keyboard

% Various little preliminaries
% ----------------------------

% MH SlugHeat15 Disable Warning Off
%warning off;
POINTER(1);     % Mouse pointer set to watch !

% Define initial mode
% -------------------

if ~nargin
    Mode = [0 0];
elseif Mode == 4
    Mode = [4 0];
end

if all(Mode == [0 0]) || all(Mode == [0 1])
    
    TmpId = fopen('SlugHeat15.log','w');    % Open temporary log file
    STATUS(TmpId,['SlugHeat15.1 started ' FORMATTIME ' ...'],2);
    
    if all(Mode == [0 0])
        STATUS(TmpId,['Mode is [' int2str(Mode) ']:'],1);
        STATUS(TmpId,['Interactive processing - ' ...
                'Setup and data preparation using SlugHeat15.par'],2);
    elseif all(Mode == [0 1])
        STATUS(TmpId,['Mode is [' int2str(Mode) ']:'],1);
        STATUS(TmpId,['Interactive processing - ' ...
                'Setup and data preparation using new PAR file'],2);
    end  
    fclose(TmpId);
end

save SlugHeat15Mode Mode

% ==========================================================================
% MODE 0 - INTERACTIVE MODE - INITIALIZATION AND DATA PLOT
% ==========================================================================

if all(Mode == [0 0]) || all(Mode == [0 1])
    
    % ==========================================================================
    % INITIALIZE MATLAB AND SCREEN WORSPACE
    % ==========================================================================
    
    % Clear command window, all handles and memory
    % --------------------------------------------
    
    % MH SlugHeat15 getting warning on 'clear all'. Changed to 'clear'
    clc
    clf reset
    close all hidden
    %clear all
    clear
    clear global
    more off
    echo off all
    fclose('all');
    
    load SlugHeat15Mode
    
   
    TmpId = fopen('SlugHeat15.log','a');
    
    % Define global variables to be shared with subroutines
    % -----------------------------------------------------
    
    global Version Update
    global RawDataFig MonitorFig FrictionalFig
    global HeatPulseFig BullardFig HFRegressionFig
    global NumberOfSensors PulseData
    global Iteration FirstIteration Trial TotalIterations
    global ResFileId LogFileId NumberOfColumns
    global FigSpace CMap
    global StatusText StatusString
    global FiguresList CurrentFigs CommandControls
    global Tau00Data FAT00
    global BadT Badk SensorsToUse
    global PenFile ResName CalFile
    global kAnisotropy
    
    global AllRecords PenetrationRecord HeatPulseRecord EndRecord
    global FricTauMin FricTauMax PulseTauMin PulseTauMax
    global MinTotalkChange MaxNumberOfIterations
%   
% MH SlugHeat15 set control window as global
global ControlWindow

    % Define version information and other default parameters
    % -------------------------------------------------------
    
    Version = '14';                         % Version number
    Update = '2014';                        % Date of last update
    NumberOfColumns = 79;                   % # of columns in Log and Res files
    DefaultParFile = 'SlugHeat15.par';
    MinTotalkChange = 1e-5;                 % Minimum change of Sigma(k)
    MaxNumberOfIterations = 10;             % Max # of iterations for k computations
    MaxMCIterations = 100;                  % # of Iterations for MC analysis
    Sigmak0 = 0.1;                          % Standard deviation in k for MC
    kMin = 0.6;                             % Min k cutoff for MC analysis
    kMax = 1.5;                             % Max k cutoff for MC analysis
    MinThickness = 0.05;                    % Mininum layer thickness for MC
    UseFrictional = 0;                      % Use Frictional decay for No HP MC ?
    kAnisotropy    = 1.05;                  % Horizontal thermal conductivity Anisotropy

    % MH SlugHeat15 6m probe - 13 sensors with 11 active
    TopSensorDepth = 1.86;                  % Depth of first thermistor below weight stand
        
    % Traditional 3.5m probe - 11 sensors 
    %TopSensorDepth = 0.25;                  % Depth of first thermistor below weight stand   
    disp([' Top sensor depth = ',num2str(TopSensorDepth)]);
   
   
    % Load SlugHeat15 defaults and data
    % ---------------------------------

    load SlugHeat15

    STATUS(TmpId,['Loaded SlugHeat15.mat ...'],2);

    % ==========================================================================
    % DEFINE SCREEN WORKSPACE
    % ==========================================================================

    % Get screen resolution
    % ---------------------

    set(0,'units','pixels')
    ScreenResolution = get(0,'screensize');

    % Define Control Window
    % ---------------------

    X0Control = 0; Y0Control = 0;
    LControl = 160; HControl = ScreenResolution(4) - 40;
    FigSpace = [X0Control + LControl + 15, ...
            Y0Control, ...
            ScreenResolution(3) - LControl - 10,...
            HControl];

    % MH SlugHeat15 change the way the control window is created
    %ControlWindow = figure;
    ControlWindow(1,1) = figure( ...
        'menubar','none', ...
        'numbertitle','off', ...
        'name','A - Controls', ...
        'units','pixels', ...
        'position',[X0Control Y0Control LControl+12 HControl], ...
        'color','k');
    
        
    POINTER(1);
    set(ControlWindow, ...
        'menubar','none', ...
        'numbertitle','off', ...
        'name','A - Controls', ...
        'units','pixels', ...
        'position',[X0Control Y0Control LControl+12 HControl], ...
        'color','k')

    

    % ==========================================================================
    % DEFINE CONTENT OF THE CONTROL WINDOW
    % ==========================================================================

    % Geometry Parameters
    % -------------------

    nCY     = 33;
    Hspc    = 5;
    Vspc    = 5;
    HFrame1 = 46;
    LC0     = LControl-2*Hspc;
    LC1     = LControl-4*Hspc;
    LC2     = (LControl-5*Hspc)/2;
    LC3     = (LControl-6*Hspc)/3;
    HC0     = 32; HC1 = 24; HC2 = 16;
    XC0     = Hspc;
    XC1     = 2*Hspc;
    XC2(1)  = XC1;
    XC2(2)  = 3*Hspc+(LControl-5*Hspc)/2;
    XC3(1)  = XC1;
    XC3(2)  = 3*Hspc+(LControl-6*Hspc)/3;
    XC3(3)  = 4*Hspc+2*(LControl-6*Hspc)/3;
    LLogo   = 110;
    HLogo   = 106;
    XLogo   = (LControl-LLogo)/2;
    YLogo   = HControl-5*Vspc-HFrame1-HLogo;
    YC0     = HControl-HFrame1-Vspc;
    HC      = (HControl-(nCY+3)*Vspc-HFrame1-HLogo)/nCY;
    YC      = HControl-2*Vspc-HFrame1-HLogo-[1:nCY]*(Vspc+HC);

    figure(ControlWindow);
    
    % Define uicontrols in Control Window
    % -----------------------------------
    
    ControlTitleFrame = uicontrol( ...
        'style','frame', ...
        'units','pixels', ...
        'backgroundcolor',[0 0 1], ...
        'position', [XC0 YC0-4*Vspc-1 LC0 2.5*HC1]);

    ControlTitle1 = uicontrol( ...
        'style','text', ...
        'string','SLUGHEAT', ...
        'units','pixels', ...
        'foregroundcolor',[1 1 0], ...
        'backgroundcolor',[0 0 1], ...
        'fontsize',18, ...
        'fontweight','bold', ...
        'position',[XC1+2*Hspc YC0+2*Vspc LC1-4*Hspc HC1], ...
        'Tooltipstring',['Version ' Version ' - Update ' Update ]);
    
    % MH SlugHeat15 Edit add ROQ Logo
%    ControlLogo = axes( ...
%        'units','pixels', ...
%        'position',[XLogo YLogo+HLogo-HLogo/4 LLogo HLogo]);
    
    % ADD ROQ LOGO HERE
%    image(SlugHeat15Logo);
%    axis equal
%    set(gca,'visible','off')


     ControlTitle2 = uicontrol( ...
        'style','text', ...
        'string','', ...
        'units','pixels', ...
        'foregroundcolor',[1 1 0], ...
        'backgroundcolor',[0 0 1], ...
        'fontsize',12, ...
        'fontweight','bold', ...
        'position',[XC1+2*Hspc YC0-4*Vspc LC1-4*Hspc HC1], ...
        'Tooltipstring',['Version ' Version ' - Update ' Update ]);

    ControlLogo = axes( ...
        'units','pixels', ...
        'position',[XLogo YLogo LLogo HLogo], ...
        'Ytick',[], ...
        'Xtick',[]);

    % ADD  LOGO HERE
    image(SH02Logo);
    axis equal
    set(gca,'visible','off')


    % Status Menu Title
    % -----------------

    Status = uicontrol( ...
        'style','text', ...
        'string','Status', ...
        'units','pixels', ...
        'backgroundcolor',[0 0 0], ...
        'foregroundcolor',[1 1 0], ...
        'fontsize',14, ...
        'fontweight','bold', ...
        'position',[XC1 YC(2)+2*Vspc LC1 HC2]);

    % Status controls
    % ---------------

    ParFileTitle = uicontrol( ...
        'style','text', ...
        'string','Current PAR file', ...
        'units','pixels', ...
        'backgroundcolor',[0.2 0.2 0.2], ...
        'foregroundcolor',[0.4 0.4 1], ...
        'fontsize',12, ...
        'fontweight','bold', ...
        'position',[XC1 YC(3) LC1 HC2]);

    ParFileText = uicontrol( ...
        'Style','text', ...
        'units','pixels', ...
        'backgroundcolor',[0 0 0], ...
        'foregroundcolor',[1 1 0], ...
        'fontsize',12, ...
        'horizontalalignment','center', ...
        'position',[XC1 YC(4) LC1 HC2], ...
        'String','None');

    PenFileTitle = uicontrol( ...
        'style','text', ...
        'string','Current PEN file', ...
        'units','pixels', ...
        'backgroundcolor',[0.2 0.2 0.2], ...
        'foregroundcolor',[0.4 0.4 1], ...
        'fontsize',12, ...
        'fontweight','bold', ...
        'position',[XC1 YC(5) LC1 HC2]);

    PenFileText = uicontrol(...
        'Style','text', ...
        'units','pixels', ...
        'backgroundcolor',[0 0 0], ...
        'foregroundcolor',[1 1 0], ...
        'fontsize',12, ...
        'horizontalalignment','center', ...
        'position',[XC1 YC(6) LC1 HC2], ...
        'String','None');

    ResFileTitle = uicontrol( ...
        'style','text', ...
        'string','RES file name', ...
        'units','pixels', ...
        'backgroundcolor',[0.2 0.2 0.2], ...
        'foregroundcolor',[0.4 0.4 1], ...
        'fontsize',12, ...
        'fontweight','bold', ...
        'position',[XC1 YC(7) LC1 HC2]);

    ResFileText = uicontrol( ...
        'Style','text', ...
        'units','pixels', ...
        'backgroundcolor',[0 0 0], ...
        'foregroundcolor',[1 1 0], ...
        'fontsize',12, ...
        'horizontalalignment','center', ...
        'position',[XC1 YC(8) LC1 HC2], ...
        'String','None');

    LogFileTitle = uicontrol( ...
        'style','text', ...
        'string','LOG file name', ...
        'units','pixels', ...
        'backgroundcolor',[0.2 0.2 0.2], ...
        'foregroundcolor',[0.4 0.4 1], ...
        'fontsize',12, ...
        'fontweight','bold', ...
        'position',[XC1 YC(9) LC1 HC2]);

    LogFileText = uicontrol( ...
        'Style','text', ...
        'units','pixels', ...
        'backgroundcolor',[0 0 0], ...
        'foregroundcolor',[1 1 0], ...
        'fontsize',12, ...
        'horizontalalignment','center', ...
        'position',[XC1 YC(10) LC1 HC2], ...
        'String','None');
    
    CalFileTitle = uicontrol( ...
        'style','text', ...
        'string','CAL file name', ...
        'units','pixels', ...
        'backgroundcolor',[0.2 0.2 0.2], ...
        'foregroundcolor',[0.4 0.4 1], ...
        'fontsize',12, ...
        'fontweight','bold', ...
        'position',[XC1 YC(11) LC1 HC2]);

    CalFileText = uicontrol( ...
        'Style','text', ...
        'units','pixels', ...
        'backgroundcolor',[0 0 0], ...
        'foregroundcolor',[1 1 0], ...
        'fontsize',12, ...
        'horizontalalignment','center', ...
        'position',[XC1 YC(12) LC1 HC2], ...
        'String','None');    
    

    STATUS(TmpId,['Opened and defined Control window ...'],2);

    % ==========================================================================
    % GET PARAMETERS AND FILE NAMES
    % ==========================================================================
    
    % PAR file name and path
    % ----------------------
    
    STATUS(TmpId,['Defining PAR file:'],1);
    
    if all(Mode == [0 1])
        
        clear ParFileName
        POINTER(0);
        
        while ~exist('ParFileName') 
            [ParFileName,ParFilePath] = uigetfile( ...
                '*.par', ...
                'Select parameter file', ...
                ScreenResolution(3)/3, ...
                ScreenResolution(4)/3);
            
            if ~ParFileName;
                close all; return
            end 
        end
        
        IsPARDefault = 2;
        POINTER(1);
        
        STATUS(TmpId,['PAR file is ' [ParFilePath ParFileName] ' ...'],1);
        STATUS(TmpId,['... read and copied to SlugHeat15.par.'],2);
    else 
        if ~exist('SlugHeat15.par','file')
            
            PARFid = fopen('SlugHeat15.par','w');
            fprintf(PARFid,'%c',DefaultPAR);
            fclose(PARFid);
            IsPARDefault = 1;
           
        else  
            IsPARDefault = 0;
        end
        
        ParFileName = 'SlugHeat15.par';
        ParFilePath = [pwd '/']; 
        STATUS(TmpId,['PAR file is SlugHeat15.par ...'],2);       
    end
    
    ParFile = [ParFilePath ParFileName];
    
    set(ParFileText,'string',ParFileName, ...
        'tooltipstring',[ParFilePath '/' ParFileName]);
   
    % PEN file name and path
    % ----------------------
    
    STATUS(TmpId,['Defining PEN file:'],1);
    
    if all(Mode == [0 1])
        load SlugHeat15PenF
    else
        
        if exist('SlugHeat15PenP.mat','file')
            load SlugHeat15PenP
        else
            SlugHeat15PenPath=[ pwd '/'];
        end
        
        if exist('SlugHeat15PenF.mat','file')
            load SlugHeat15PenF
        end
        
        
        while ~exist('PenFileName') 
            
            POINTER(0);
            
            % MH SlugHeat15: Use of 'x' and 'y' as location parameters has been
            % obsoleted.
            [PenFileName,PenFilePath] = uigetfile( ...
                [SlugHeat15PenPath '*.pen; *.PEN'], ...
                'Select penetration file');
            %, ...
            %    ScreenResolution(3)/3, ...
            %    ScreenResolution(4)/3);
            
            if ~PenFileName;
                close all; return
            end
            
            POINTER(1);
            
        end
        
        SlugHeat15PenPath = PenFilePath;
        save SlugHeat15PenP SlugHeat15PenPath
        save SlugHeat15PenF PenFilePath PenFileName
        
    end
    
    PenFile = fullfile(PenFilePath,PenFileName);
    
    % MH EDIT FOR fitting 
    %disp('EDIT CLIENTNAME SlugHeat15 LINE 511')
    set(PenFileText,'string',PenFileName(11:end), ...
        'tooltipstring',[PenFilePath '/' PenFileName]);
    
    STATUS(TmpId,['PEN file is ' PenFile ' ...'],2);
    
    % CAL file name and path
    % ----------------------
    
    STATUS(TmpId,['Defining CAL file:'],1);
    
    if all(Mode == [0 1])
        load SlugHeat15CalF
    else
        
        if exist('SlugHeat15CalP.mat','file')
            load SlugHeat15CalP
            SlugHeat15CalPath = CalFilePath;
        else
            SlugHeat15CalPath=[ pwd '/'];
        end
        
        if exist('SlugHeat15.cal','file')
            CalFileName = 'SlugHeat15.cal';
        end
        
        while ~exist('CalFileName') 
            
            POINTER(0);
            
            [CalFileName,CalFilePath] = uigetfile( ...
                [SlugHeat15CalPath '*.cal; *.CAL'], ...
                'Select calibration file for offsets', ...
                ScreenResolution(3)/3, ...
                ScreenResolution(4)/3);
            
            if ~CalFileName;
                close all; return
            end
            
            POINTER(1);
        end
        
        CalFilePath = SlugHeat15CalPath;
        save SlugHeat15CalP CalFilePath
        save SlugHeat15CalF CalFilePath CalFileName
        
    end
    
    CalFile = fullfile(CalFilePath,CalFileName);
    
    set(CalFileText,'string',CalFileName, ...
        'tooltipstring',[CalFilePath '/' CalFileName]);
    
    STATUS(TmpId,['CAL file is ' CalFile ' ...'],2);
    fclose(TmpId);
    
    % RES, LOG and TAP files name and path
    % ------------------------------------
        
    Index = find(PenFile == '.');
    if isempty(Index); 
         TAPName = PenFile;
    else TAPName = PenFile(1:Index-1);
    end
    
    clear Index
    
    Index = find(PenFileName == '.');
    if isempty(Index); ResName = PenFileName;
    else ResName = PenFileName(1:Index-1) ; end
    clear Index
    
    ResFile = [ResName '.res'];
    LogFile = [ResName '.log'];
    
    %disp('EDIT CLIENTNAME SlugHeat15 LINE 587')
    set(ResFileText,'string',ResFile(11:end), ...
        'tooltipstring',[pwd '/' ResFile]);
    set(LogFileText,'string',LogFile(11:end), ...
        'tooltipstring',[pwd '/' LogFile]);
   
    
    % ==========================================================================
    % INITIALIZE RES AND LOG FILES FOR WRITING RESULTS
    % ==========================================================================
    
    PRINTOUTHEADER(ParFile,PenFile,LogFile,ResFile,IsPARDefault);
    
    % ==========================================================================
    % READ THE 'PAR' FILE
    % ==========================================================================
    
    [ ...
            NumberOfSensors, ...
            WaterThermistor, ...
            TimeScalingFactor, ...
            SensorRadius, ...
            SensorDistance, ...
            CalibrationCoeffs, ...
            HyndmanCoeffs, ...
            FrictionalDelays, ...
            FricMaxStep, ...
            TimeInc, ...
            FricTauMin, ...
            FricTauMax, ...
            PulseDelays, ...
            kInit, ...
            PulsePower, ...
            TimeShiftInit, ...
            TimeShiftInc, ...
            PulseMaxStep, ...
            kTolerance, ...
            PulseTauMin, ...
            PulseTauMax, ...
            HeatPulseLength, ...
    ] = READPARFILE(ParFile);
 
    STATUS(LogFileId,['PAR file ' ParFile ' read ...'],2);
    
    % Write out parameters to RES and LOG files
    % -----------------------------------------
    
    PRINTOUTPARAMETERS( ...
        ParFile, ...
        NumberOfSensors, ...
        WaterThermistor, ...
        TimeScalingFactor, ...
        SensorRadius, ...
        SensorDistance, ...
        CalibrationCoeffs, ...
        HyndmanCoeffs, ...
        FrictionalDelays, ...
        FricMaxStep, ...
        TimeInc, ...
        FricTauMin, ...
        FricTauMax, ...
        PulseDelays, ...
        kInit, ...
        PulsePower, ...
        TimeShiftInit, ...
        TimeShiftInc, ...
        PulseMaxStep, ...
        kTolerance, ...
        PulseTauMin, ...
        PulseTauMax, ...
        HeatPulseLength)
    
    STATUS(LogFileId,['Parameters printed out to ' LogFile ' and ' ResFile ' ...'],2);    
    
    % ==========================================================================
    % READ THE 'PEN' FILE
    % ==========================================================================
    
    [...
            StationName, ...
            Penetration, ...
            CruiseName, ...
            Latitude, ...
            Longitude, ...
            Depth, ...
            Tilt, ...
            LoggerId, ...
            ProbeId, ...
            NumberOfSensors2, ...
            PenetrationRecord, ...
            HeatPulseRecord, ...
            EndRecord, ...
            BottomWaterRawData, ...
            AllRecords, ...
            AllSensorsRawData, ...
            WaterSensorRawData, ...
            EqmStartRecord, ...
            EqmEndRecord ...
    ] = READPENFILE(PenFile);
    
    STATUS(LogFileId,['PEN file ' PenFile ' read ...'],1);  
    
    if exist([TAPName '.tap'],'file')
        dummy = load([TAPName '.tap']);
        TAPRecord = dummy(:,1);
        Tilt = dummy(:,2);
        Depth = dummy(:,3);
        STATUS(LogFileId,['TAP file ' [TAPName '.tap'] ' read ...'],2);      
    elseif exist([TAPName '.TAP'],'file')
        dummy = load([TAPName '.TAP']);
        TAPRecord = dummy(:,1);
        Tilt = dummy(:,2);
        Depth = dummy(:,3);
        STATUS(LogFileId,['TAP file ' [TAPName '.TAP'] ' read ...'],2);  
    else
        TAPRecord = [];
        STATUS(LogFileId,['TAP file not found ...'],1);
        STATUS(LogFileId,['TAP data read in PEN file: Tilt = ' num2str(Tilt,'%1.1f') ...
                ' deg - Depth = ' num2str(Depth,'%1.1f') ' m ...'],2);     
    end
    
    % Apply tilt correction
    % ---------------------
    
    if mean(Tilt) > 50
        STATUS(LogFileId,['Mean Tilt too high: No Tilt correction applied !'],2);
        STATUS(ResFileId,['Mean Tilt too high: No Tilt correction applied !'],2);
    else
        SensorDistance = SensorDistance * cos(mean(Tilt,'omitnan')*pi/180);
        STATUS(LogFileId,['Applying tilt correction ...'],1);
        STATUS(LogFileId,['Mean tilt is now :      ' num2str(mean(Tilt),'%1.1f') ' degrees.'],1); 
        STATUS(LogFileId,['Inter-Sensor distance : ' num2str(SensorDistance,'%1.3f') ' m.'],2);

        STATUS(ResFileId,['Applying tilt correction ...'],1);
        STATUS(ResFileId,['Mean tilt is now :      ' num2str(mean(Tilt),'%1.1f') ' degrees.'],1); 
        STATUS(ResFileId,['Inter-Sensor distance : ' num2str(SensorDistance,'%1.3f') ' m.'],2);
    end    
    
    % ==========================================================================
    % READ THE 'CAL' FILE
    % ==========================================================================
    WaterCorrectionType = READCALFILE(CalFile);
    
    % ==========================================================================
    % CONVERT PEN FILE RAW DATA TO CORRECTED TEMPERATURE
    % ==========================================================================
    
    [...
            BottomWaterTemp, ...
            WaterSensorTemp, ...
            AllSensorsTemp ...
    ] = CONVERTRAWTOTEMP( ...
        BottomWaterRawData, ...
        CalibrationCoeffs, ...
        AllSensorsRawData, ...
        WaterSensorRawData, ...
        WaterCorrectionType, ...
        PenetrationRecord, ...
        AllRecords, ...
        EqmStartRecord, ...
        EqmEndRecord);
    
    STATUS(LogFileId,['Converted raw readings to corrected temperature:'],1);
    if WaterCorrectionType == 1
        STATUS(LogFileId,['Temperature is referenced to first point of bottom water calibration record ...'],2);
    elseif WaterCorrectionType == 2
        STATUS(LogFileId,['Temperature is referenced to last point of the bottom water calibration record ...'],2);
    elseif WaterCorrectionType == 3
        STATUS(LogFileId,['Temperature is referenced to the mean of the bottom water calibration record ...'],2);
    end
    
    % ==========================================================================
    % SPLIT PENETRATION AND HEAT PULSE DATA
    % ==========================================================================
    
    % MH: Pro51.m flag for no heat pulse is -1 in penfile line above
    % thermal data. Call SPLITDECAYS2 if No Heat Pulse    
   
    %if HeatPulseRecord == -1
    %    HeatPulseRecord = [];
    %    PulseData = 0;
    %else
    %    PulseData = 1;
    %end
    
    if PulseData
        [ ...
                FricTime, ...
                FricTemp, ...
                PulseData, ...
                PulseTime, ...
                PulseTemp ...
        ] = SPLITDECAYS( ...
            PenetrationRecord, ...
            HeatPulseRecord, ...
            AllRecords, ...
            TimeScalingFactor, ...
            AllSensorsTemp);
    else
        [ ...
                FricTime, ...
                FricTemp, ...
                PulseData, ...
                PulseTime, ...
                PulseTemp ...
        ] = SPLITDECAYS2( ...
            PenetrationRecord, ...
            HeatPulseRecord, ...
            EndRecord, ...
            AllRecords, ...
            TimeScalingFactor, ...
            AllSensorsTemp);
    end
       

    STATUS(LogFileId,['Split penetration and heat pulse data:'],1);
    
    
    
    if PulseData
        
        STATUS(LogFileId,['There is a heat pulse record ...'],2);
    else
        STATUS(LogFileId,['There is NO heat pulse record ...'],2);
    end
    
    STATUS(LogFileId,['Penetration Record: ' int2str(PenetrationRecord)],1);
    STATUS(LogFileId,['Heat Pulse Record:  ' int2str(HeatPulseRecord)],1);
    STATUS(LogFileId,['End of Data Record: ' int2str(EndRecord)],2);

    
    % ==========================================================================
    % COMMANDS MENU
    % ==========================================================================
    
    if Mode(1) ~= 3
        
    CommandControls(1) = uicontrol('style','text', ...
        'string','Commands', ...
        'units','pixels', ...
        'backgroundcolor',[0 0 0], ...
        'foregroundcolor',[1 1 0], ...
        'fontsize',14, ...
        'fontweight','bold', ...
        'position',[XC1 YC(21)+2*Vspc LC1 HC2]);

    CommandControls(2) =  uicontrol('Style','pushbutton', ...
        'units','pixels', ...
        'backgroundcolor',[0 0 1], ...
        'foregroundcolor',[1 1 0], ...
        'fontsize',12, ...
        'horizontalalignment','center', ...
        'position',[XC1 YC(22) LC1 HC1], ...
        'String','Change PAR File', ...
        'tooltipstring','Click to read a different Parameter file', ...
        'Value',14, ...
        'Callback',['global CommandControls;',...
                    'if exist(''SlugHeat15ParF.mat'',''file'');',...
                        'eval([''!rm SlugHeat15Par.mat'']);',...
                    'end;',...
                    'SlugHeat15([0 1]);']);

    CommandControls(3) =  uicontrol('Style','pushbutton', ...
        'units','pixels', ...
        'backgroundcolor',[0 0 1], ...
        'foregroundcolor',[1 1 0], ...
        'fontsize',12, ...
        'horizontalalignment','center', ...
        'position',[XC1 YC(23) LC1 HC1], ...
        'String','Change PEN File', ...
        'tooltipstring','Restart SlugHeat15 with new data', ...
        'Value',14, ...
        'Callback',['global CommandControls;',...
                    'if exist(''SlugHeat15PenF.mat'',''file'');',...
                        'eval([''!rm SlugHeat15PenF.mat'']);',...
                    'end;',...
                    'SlugHeat15([0 0]);']);

    CommandControls(4) =  uicontrol('Style','pushbutton', ...
        'units','pixels', ...
        'backgroundcolor',[0 0 1], ...
        'foregroundcolor',[1 1 0], ...
        'fontsize',12, ...
        'horizontalalignment','center', ...
        'position',[XC1 YC(24) LC1 HC1], ...
        'String','Process Current', ...
        'tooltipstring',['Click to launch processing of current ' ...
            'Penetration file with the selected parameters'], ...
        'Value',14, ...
        'Callback',['global CommandControls; SlugHeat15([0 2]);']);

    CommandControls(5) =  uicontrol('Style','pushbutton', ...
        'units','pixels', ...
        'backgroundcolor',[0 0 1], ...
        'foregroundcolor',[1 1 0], ...
        'fontsize',12, ...
        'horizontalalignment','center', ...
        'position',[XC1 YC(25) LC1 HC1], ...
        'String','Discard Sensors', ...
        'enable','off', ...   
        'tooltipstring',['Click to discard eliminate sensors from calculations !'], ...
        'Value',14, ...
        'Callback',['global CommandControls; SlugHeat15([1 0]);']); 

    CommandControls(6) =  uicontrol('Style','pushbutton', ...
        'units','pixels', ...
        'backgroundcolor',[0 0 1], ...
        'foregroundcolor',[1 1 0], ...
        'fontsize',12, ...
        'horizontalalignment','center', ...
        'position',[XC1 YC(26) LC1 HC1], ...
        'String','Run Monte-Carlo', ...
        'tooltipstring',['Click to launch Monte-Carlo Analysis !'], ...
        'Value',14, ...
        'enable','off', ...   
        'Callback',['global CommandControls; SlugHeat15([2 0]);']);

    CommandControls(7) =  uicontrol('Style','pushbutton', ...
        'units','pixels', ...
        'backgroundcolor',[0 0 1], ...
        'foregroundcolor',[1 1 0], ...
        'fontsize',12, ...
        'horizontalalignment','center', ...
        'position',[XC1 YC(27) LC1 HC1], ...
        'String','Exit', ...
        'tooltipstring','Close all windows and exit to Matlab command line', ...
        'Value',14, ...
        'Callback',['global CommandControls; fclose(''all'');close all;clear all;return']);  
    end
    
    % ==========================================================================
    % PLOT RAW DATA
    % ==========================================================================
    
    SensorsToUse = [1:NumberOfSensors];
        
    BadT = [];
    Badk = [];
    
    if  ~(all(Mode == [3 0]) || all(Mode == [3 3]))
        
        PLOTCORRECTEDTEMP( ...
            AllSensorsTemp, ...
            NumberOfSensors, ...
            WaterThermistor, ...
            WaterSensorTemp, ...
            Tilt, ...
            Depth, ...
            TAPRecord, ...
            Mode)
        
        POINTER(1);
        
    end
    
    save SlugHeat15Temp
    
    STATUS(LogFileId,[FORMATTIME ' - End raw data reading and preparation !'],3);
    
    if Mode(1) ~= 3
        POINTER(0);
        return
    end   
end


%%%%%%%% MH THIS ENDS THE MAIN PORTION OF READING DATA AND PLOTTING %%%%%%%


% ==========================================================================
% MODE [0 2] - INTERACTIVE MODE - LAUNCH PROCESSING
% ==========================================================================

if all(Mode == [0 2]) || Mode(1) == 3
    
    if Mode(1) ~= 3
        load SlugHeat15Temp
        set(RawDataFig(5:14,5),'enable','off')
    end
    load SlugHeat15Mode
    STATUS(LogFileId,[repmat('-',1,NumberOfColumns)],1);
    STATUS(LogFileId,['Mode is [' int2str(Mode) '] - ' FORMATTIME ...
            ' - Begin processing !'],1);
    STATUS(LogFileId,[repmat('-',1,NumberOfColumns)],3);
    
    % ==========================================================================
    % CUT DATA ACCORDING TO NEW RECORDS LIMITS
    % ==========================================================================
    
    [ ...
            FricTime, ...
            FricTemp, ...
            PulseData, ...
            PulseTime, ...
            PulseTemp ...
    ] = SPLITDECAYS2( ...
        PenetrationRecord, ...
        HeatPulseRecord, ...
        EndRecord, ...   
        AllRecords, ...
        TimeScalingFactor, ...
        AllSensorsTemp);
      
    SensorsIgnored = setxor(1:NumberOfSensors,SensorsToUse);
    
    STATUS(LogFileId,['Selected processing parameters:'],1);
    STATUS(LogFileId,['-------------------------------'],2);
   
    if isempty(SensorsIgnored)
        STATUS(LogFileId,'All the sensors are used !   ',2);
    else
        STATUS(LogFileId,['Sensors ' ...
                int2str(SensorsIgnored) ...
                ' are ignored ...'],2);
        STATUS(LogFileId,['Only sensors ' int2str(SensorsToUse) ...
                ' will be used !'],2);
    end

    STATUS(LogFileId,['Penetration Record:  ' int2str(PenetrationRecord)],1);
    STATUS(LogFileId,['Heat Pulse Record:   ' int2str(HeatPulseRecord)],1);
    STATUS(LogFileId,['End of Data Record:  ' int2str(EndRecord)],2);
    STATUS(LogFileId,['Frictional Tau Window:  [' ...
            num2str(FricTauMin) '  ' num2str(FricTauMax) ']'],1);
    STATUS(LogFileId,['Heat Pulse Tau Window:  [' ...
            num2str(PulseTauMin) '  ' num2str(PulseTauMax) ']'],2);
    STATUS(LogFileId,['Max # of Iterations:     ' int2str(MaxNumberOfIterations)],1);
    STATUS(LogFileId,['Min change in Total k:   ' num2str(MinTotalkChange)],3); 
    
    % ==========================================================================
    % BEGIN MAIN LOOP
    % ==========================================================================
    
    % Compute relative depths of sensors - Top sensor is at zero depth.
    % -----------------------------------------------------------------

    %RelativeDepths = (repmat(NumberOfSensors,1,NumberOfSensors)-[1:NumberOfSensors]) ...
    %       * SensorDistance + 0.1;
    
    % MH June 2 2015
    % Included Variable TopSensorDepth in initial Default Parameters (~line
    % 100) to facilitate processing with non-PGC Probes
    RelativeDepths = (repmat(NumberOfSensors,1,NumberOfSensors)-[1:NumberOfSensors]) ...
           * SensorDistance + TopSensorDepth;
%    
%    RelativeDepths = (repmat(NumberOfSensors,1,NumberOfSensors)-[1:NumberOfSensors]) ...
%        * SensorDistance + 0.1;
%    
    % The depths of sensors are relative to 10 cm below surface to avoid problems
    % in case of log in kInit function is specified.
    
    % if an initial kInit(z) function exists (the first argument of kInit in the PAR
    % file is then 99 and the next 6 are the coefficients of kInit(z)
    
    if kInit(1) == 99;
        A = kInit(2);
        B = kInit(3);
        C = kInit(4);
        D = kInit(5);
        E = kInit(6);
        F = kInit(7);
        kInit = A ...
            + B*RelativeDepths ...
            + C*RelativeDepths.^2 ...
            + D*exp(E*RelativeDepths) ...
            + F*log10(RelativeDepths);      
        kFunction = 1;
    else    
        kFunction = 0;
    end
    
    % Initialize iterative process (independent upon whether or not a Heat Pulse exists)
    % ----------------------------------------------------------------------------------
    
    Currentk = kInit;
    CurrentT = NaN*ones(size(kInit));
    
    TChange = Inf;
    kChange = Inf;
    
    % Initialize Counters
    % -------------------
    
    Iteration = 1;
    Trial = 1;
    FirstIteration = 1;
    TotalIterations = 1;
    AnotherTrial = 1;
    
    % More Controls
    % -------------
    
    if  ~(all(Mode == [3 0]) || all(Mode == [3 3]))
        figure(ControlWindow)
        
        TrialTitle = uicontrol('style','text', ...
            'string','Current trial', ...
            'units','pixels', ...
            'backgroundcolor',[0.2 0.2 0.2], ...
            'foregroundcolor',[0.4 0.4 1], ...
            'fontsize',12, ...
            'fontweight','bold', ...
            'position',[XC1 YC(13) LC1 HC2]);
        
        TrialText = uicontrol('Style','text', ...
            'units','pixels', ...
            'backgroundcolor',[0 0 0], ...
            'foregroundcolor',[1 1 0], ...
            'fontsize',12, ...
            'horizontalalignment','center', ...
            'position',[XC1 YC(14) LC1 HC2], ...
            'String',num2str(Trial));
        
        IterationTitle = uicontrol('style','text', ...
            'string','Current iteration', ...
            'units','pixels', ...
            'backgroundcolor',[0.2 0.2 0.2], ...
            'foregroundcolor',[0.4 0.4 1], ...
            'fontsize',12, ...
            'fontweight','bold', ...
            'position',[XC1 YC(15) LC1 HC2]);
        
        IterationText = uicontrol('Style','text', ...
            'units','pixels', ...
            'backgroundcolor',[0 0 0], ...
            'foregroundcolor',[1 1 0], ...
            'fontsize',12, ...
            'horizontalalignment','center', ...
            'position',[XC1 YC(16) LC1 HC2], ...
            'String',num2str(Iteration));
        
    end
    
end

% ==========================================================================
% MODE [1 0] - INTERACTIVE MODE - DISCARD SENSORS
% ==========================================================================

if all(Mode == [1 0])
    % Load previous Workspace
    % -----------------------
    
    load SlugHeat15Temp
    load SlugHeat15Mode
    
    % Reset iterative control variables
    % ---------------------------------
    
    CurrentT = NaN*ones(size(kInit));
    TChange = Inf;
    kChange = Inf;
    Trial = Trial + 1;
    FirstIteration = 1;
    Iteration = 1;
    
    % Ask for bad sensors 
    % -------------------
    
    Prompt = {['Enter Temperatures to ignore: (Enter space-separated sensor numbers. ' ...
                'Leave blank to use all sensors)'],'Enter Conductivities to ignore'};
    DiscardTitle = ['Trial: ' int2str(Trial) ' - Bad Sensors Selection'];
    Default = {int2str(BadT),int2str(Badk)};
    
    AddOpts.Resize='on';
    AddOpts.WindowStyle='normal';
    AddOpts.Interpreter='tex';
    Answer = inputdlg(Prompt,DiscardTitle,1,Default,AddOpts);
    
    BadT = str2num(char(Answer(1)));
    Badk = str2num(char(Answer(2)));
    
    STATUS(LogFileId,[repmat('-',1,NumberOfColumns)],1);
    STATUS(LogFileId,['Mode is [' int2str(Mode) '] - ' FORMATTIME ...
            ' - Discarding bad sensors - Trial ' int2str(Trial) ' !'],1);
    STATUS(LogFileId,[repmat('-',1,NumberOfColumns)],3);
    
    POINTER(1);
    
    % ReInitialize conductivities
    % ---------------------------
    
    if ~PulseData    
%
    % AF 9/2 Different scheme for variable distance (VarDist == 1); just use input values
%
        %if VarDist == 0
        %   RelativeDepths = (repmat(NumberOfSensors,1,NumberOfSensors)-[1:NumberOfSensors]) ...
        %       * SensorDistance + 0.1;
        %else
           %RelativeDepths = SensorDistance
            RelativeDepths = (repmat(NumberOfSensors,1,NumberOfSensors)-[1:NumberOfSensors]) ...
           * SensorDistance + TopSensorDepth;
        %end
%        
%       RelativeDepths = (repmat(NumberOfSensors,1,NumberOfSensors)-[1:NumberOfSensors]) ...
%            * SensorDistance + 0.1;
%        
        if kInit(1) == 99;
   
            A = kInit(2);
            B = kInit(3);
            C = kInit(4);
            D = kInit(5);
            E = kInit(6);
            F = kInit(7);
            kInit = A ...
                + B*RelativeDepths ...
                + C*RelativeDepths.^2 ...
                + D*exp(E*RelativeDepths) ...
                + F*log10(RelativeDepths);
            kFunction = 1;
            
        else
            Currentk = kInit;
        end   
        
    end    
end

% ==========================================================================
% CONTINUE WITH MAIN PROCESSING LOOP
% ==========================================================================
if all(Mode == [0 2]) || all(Mode == [1 0]) || Mode(1) == 3
    
    % Begin iterative part of the computations
    % ----------------------------------------
    
    if Mode(1) ~= 3
        MONITOR;
        POINTER(1);
    end

    if (Trial == 1 || (Trial > 1 && ~PulseData))
        
        % MH SlugHeat15 Add variable IterationCounter
        IterationCounter=1;
        
        while ( Iteration <= MaxNumberOfIterations ...
                && abs(sum(kChange(find(~isnan(kChange))))) >= MinTotalkChange)      
            
            % ====================================================================
            % COMPUTE ASYMPTOTIC TEMPERATURES AFTER FRICTIONAL PENETRATION DECAY
            % ====================================================================
            
            if (Trial == 1 || (Trial > 1 && kFunction))
                
                [	NumberOfFricUsedPoints, ...
                        MinimumFricEqTemp, ...
                        MinimumFricError, ...
                        MinimumFricDelays, ...
                        MinimumFricSlope ...
                ] = FRICTIONAL( ...
                    FricTime, ...
                    FricTemp, ...
                    NumberOfSensors, ...
                    FrictionalDelays, ...
                    FricMaxStep, ...
                    TimeInc, ...
                    Currentk, ...
                    HyndmanCoeffs, ...
                    SensorRadius, ...
                    FricTauMin, ...
                    FricTauMax, ...
                    Mode);
                
                POINTER(1);
                
                % Write Frictional results to result file
                % ---------------------------------------
                
                
                a = [1:NumberOfSensors]';
                a(SensorsIgnored) = -a(SensorsIgnored);
                b = repmat(length(FricTime),NumberOfSensors,1);
                b(SensorsIgnored) = zeros(length(SensorsIgnored),1);
                c = repmat(NumberOfFricUsedPoints,NumberOfSensors,1);
                c(SensorsIgnored) = zeros(length(SensorsIgnored),1);
                d = MinimumFricEqTemp;
                e = MinimumFricError;

%
                f = [-1000*diff(MinimumFricEqTemp')/SensorDistance 0]';
%
                g = MinimumFricDelays;
                h = MinimumFricSlope;
                FrictionalResults = [a b c d e f g h]';
                
                PRINTOUTFRICTIONALRESULTS(FrictionalResults,sum(TChange))
                
                % And what is the new equilibrium sediment temperature ?
                % ------------------------------------------------------
                
                PreviousT = CurrentT;
                CurrentT = MinimumFricEqTemp';
                
            end
            
            % ==========================================================================
            % COMPUTE THERMAL CONDUCTIVITIES FROM HEAT PULSE DECAY IF ANY
            % ==========================================================================
            
            if PulseData
                
                [ ...
                        MeankPointAtMinkDiff, ...
                        kSlopeAtMinkDiff, ...
                        MeankPointAtZeroInfTemp, ...
                        MeankPointAtMinRMS, ...
                        kSlopeAtZeroInfTemp, ...
                        kSlopeAtMinRMS, ...
                        TempAtInf, ...
                        NumberOfUsedPoints, ...
                        MinimumPulseDelays, ...
                        kError ...  
                ] = HEATPULSE( ...
                    NumberOfSensors, ...
                    PulseTime, ...
                    PulseDelays, ...
                    MinimumFricEqTemp, ...
                    MinimumFricSlope, ...
                    PulseTemp, ...
                    Currentk, ...
                    HyndmanCoeffs, ...
                    SensorRadius, ...	
                    PulseMaxStep, ...
                    TimeShiftInc, ...
                    PulseTauMin, ...
                    PulseTauMax, ...
                    PulsePower, ...
                    HeatPulseLength, ...
                    Mode);     
                
                POINTER(1);
                
                % Write first Heat Pulse results
                % ------------------------------
                
                a = [1:NumberOfSensors]';
                a(SensorsIgnored) = -a(SensorsIgnored);
                b = repmat(length(PulseTime),NumberOfSensors,1);
                b(SensorsIgnored) = zeros(length(SensorsIgnored),1);
                c = repmat(NumberOfUsedPoints,NumberOfSensors,1);
                c(SensorsIgnored) = zeros(length(SensorsIgnored),1);
                d = MeankPointAtMinkDiff;
                e = kError;
                f = TempAtInf;
                g = MinimumPulseDelays;
                h = kSlopeAtMinkDiff;
                i = MeankPointAtZeroInfTemp;
                j = MeankPointAtMinRMS;
                k = kSlopeAtMinRMS;
                l = kSlopeAtZeroInfTemp;
                
                HeatPulseResults = [a b c d e f g h i j k l]';
                
                PRINTOUTHEATPULSERESULTS(HeatPulseResults,Iteration,sum(kChange))
                
                
                % And what is the new conductivity ?  (Feels like JEOPARDY, hey ?)
                % ----------------------------------------------------------------
                
                Previousk = Currentk;
                Currentk  = MeankPointAtMinkDiff';
                %Currentk = MeankPointAtZeroInfTemp;
                %Currentk = MeankPointAtMinRMS;
                %Currentk = kSlopeAtMinRMS;
                %Currentk = kSlopeAtZeroInfTemp;
                
            else 
                
                % ==========================================================================
                % DO "BULLARD" ANALYSIS
                % ==========================================================================
             
                [ ...
                        SensorsUsedForBullardFit, ...
                        GoodkIndex, ...
                        ShiftedBullardDepths, ...
                        ShiftedRelativeDepths, ...
                        SigmaR, ...
                        PenetrationLag, ...
                        Slope, ...
                        Shift] = ...
                    BULLARDANALYSIS(RelativeDepths, ...
                    Currentk, ...
                    MinimumFricEqTemp', ...
                    Mode);
                
                POINTER(1);
                
                % What is the new conductivity ?
                % ------------------------------
                
                Previousk = Currentk;
                if kFunction 
                    Currentk = A + B*ShiftedRelativeDepths + C*ShiftedRelativeDepths.^2 ...
                        + D*exp(E*ShiftedRelativeDepths) + F*log10(ShiftedRelativeDepths);
                else
                    Currentk = kInit;
                end
                
                
            end
            
            % Update temperature, conductivity and convergence monitoring figure
            % ------------------------------------------------------------------
            
            TChange = abs(CurrentT(~isnan(CurrentT))-PreviousT(~isnan(CurrentT)));
            kChange = abs(Currentk(~isnan(Currentk))-Previousk(~isnan(Currentk)));
%            kStack(TotalIterations,:) = kChange;
%            TStack(TotalIterations,:) = TChange;
            
            %MONITOR(TStack,kStack,NumberOfSensors);    
            
            Iteration = Iteration + 1;
            TotalIterations = TotalIterations + 1;
            IterationCounter = IterationCounter +1;
            
            if ~(all(Mode == [3 0]) | all(Mode == [3 3]))
                set(IterationText,'string',num2str(Iteration))
            end
            FirstIteration = 0;
            
        end
        
    end
    
    if (all(Mode == [3 1]) | all(Mode == [3 4]) | all(Mode == [3 6])) & ~PulseData
        set(BullardFig(5:9,3,Iteration-1),'visible','on');
        set(BullardFig(4,2,Iteration-1),'xcolor','k','ycolor','k');
        PrintName = [ResName '_BullardAnalysis_' int2str(Trial) '_' int2str(Iteration-1) '.ps'];
        eval(['print -dpsc -noui -f' num2str(BullardFig(1,1,Iteration-1)) ' ' PrintName]);
        set(BullardFig(5:9,3,Iteration-1),'visible','off');
        set(BullardFig(4,2,Iteration-1),'xcolor','y','ycolor','y');   
        refresh;   
    end
    
    % ==========================================================================
    % DO "BULLARD" ANALYSIS FOR THE HEAT PULSE CASE
    % ==========================================================================
    
    if PulseData
        
        [ ...
                SensorsUsedForBullardFit, ...
                GoodkIndex, ...
                ShiftedBullardDepths, ...
                ShiftedRelativeDepths, ...
                SigmaR, ...
                PenetrationLag, ...
                Slope, ...
                Shift] ...
            = BULLARDANALYSIS ...
            (RelativeDepths, ...
            Currentk,...
            MinimumFricEqTemp', ...
            Mode);
        
    end
    
    POINTER(1);
    
    % ==========================================================================
    % NOW DO HEAT FLOW REGRESSION ANALYSIS
    % ==========================================================================
    
    [Scatter, ...
        TempOverDepth, ...
        Sigmaa, ...
        Sigmab] = ...
    HFREGANALYSIS(SensorsUsedForBullardFit, ...
        GoodkIndex, ...
        ShiftedRelativeDepths, ...
        ShiftedBullardDepths, ...
        MinimumFricEqTemp', ...
        MinimumFricError', ...
        Currentk', ...
        Mode);
    
    if Trial
        
        eval(['save ' ResName '_Summary' ...
                ' SensorsUsedForBullardFit' ...
                ' GoodkIndex' ...
                ' ShiftedRelativeDepths' ...
                ' ShiftedBullardDepths' ...
                ' Currentk' ...
                ' MinimumFricEqTemp' ...
                ' MinimumFricError' ...
                ' Iteration' ...
                ' PenetrationLag' ...
                ' Slope' ...
                ' Shift' ...
                ' SigmaR' ...
                ' NumberOfFricUsedPoints' ...
                ' MinimumFricDelays' ...
                ' MinimumFricSlope' ...
                ' Scatter' ...
                ' TempOverDepth']);
        
    end
    
    STATUS(LogFileId,['Saved mat file: ' ResName ...
            '_Summary.mat with summary of results after Trial 1 ...'],2);
      
    if (Mode(1) ~= 3 & ~Mode(2)) | (Mode(1) ~= 3 & Mode(2) ~= 3)
        
        figure(ControlWindow);
        
        set(CommandControls(4),'enable','off');
        
        FigureListTitle = uicontrol('style','text', ...
            'string','List of Figures', ...
            'units','pixels', ...
            'backgroundcolor',[0.2 0.2 0.2], ...
            'foregroundcolor',[0.4 0.4 1], ...
            'fontsize',12, ...
            'fontweight','bold', ...
            'position',[XC1 YC(17) LC1 HC2]);
                
        % MH SlugHeat15 Running original code in Matlab2016 saves CurrentFigs as
        % actual figures, which creates a very large file. Comment out and
        % just keep figure names and numbers
        
        CurrentFigs = sort(get(0,'children'));
        %[CurrentFigNames,idx] = sort(get(CurrentFigs,'name'));
        %CurrentFigs = CurrentFigs(idx);
        foo={};
        for i=1:length(CurrentFigs)
            foo{i,1} = CurrentFigs(i).Number;
            foo{i,2} = CurrentFigs(i).Name;
            %CurrentFigNames{i}=CurrentFigs(i).Name;
            %idx(i)=CurrentFigs(i).Number;
        end
        foo=sortrows(foo);
        CurrentFigs     = cell2mat(foo(:,1));
        CurrentFigNames = foo(:,2);
                
        FiguresList = uicontrol('Style','popupmenu', ...
            'units','pixels', ...
            'backgroundcolor',[0.75 0.75 0.75], ...
            'foregroundcolor','k', ...
            'fontsize',10, ...
            'fontweight','bold', ...
            'horizontalalignment','left', ...
            'position',[XC1 YC(18) LC1*2.5 HC2], ...
            'String',CurrentFigNames, ...
            'ToolTipString','Click to pop-up figures list', ...
            'CallBack',['global FiguresList CurrentFigs;' ...
                'figure(CurrentFigs(get(FiguresList,''value'')))']);
        
        %figure(CurrentFigs(idx(end-1)));
        figure(CurrentFigs(end-1));
        
    end

    if Mode(1) ~= 3
        save SlugHeat15Temp
    end
    
    if (Mode(1) ~= 3 & ~Mode(2)) | (Mode(1) ~= 3 & Mode(2) ~= 3)
        set(CommandControls(5:6),'enable','on')
        POINTER(0);
    end
    
    STATUS(LogFileId,[FORMATTIME ...
            ' - End processing of Trial ' int2str(Trial) ' !'],1);
    STATUS(LogFileId,[repmat('-',1,NumberOfColumns)],3);
    STATUS(ResFileId,[FORMATTIME ...
            ' - End processing of Trial ' int2str(Trial) ' !'],1);
    STATUS(ResFileId,[repmat('-',1,NumberOfColumns)],3);   
    
end

% ==========================================================================
% MODE [2 0] - MONTE-CARLO ANALYSIS
% ==========================================================================

if all(Mode == [2 0]) | all(Mode == [3 3]) | all(Mode == [3 4]) | all(Mode == [3 5]) | all(Mode == [3 6])
    
    VarDist = [];
    
    if all(Mode == [2 0])
        load SlugHeat15Temp
    end
    
    load SlugHeat15Mode
    
    STATUS(LogFileId,[repmat('-',1,NumberOfColumns)],1);
    STATUS(LogFileId,['Mode is [' int2str(Mode) '] - ' FORMATTIME ...
            ' - Begin Monte-Carlo analysis !'],1);
    STATUS(LogFileId,[repmat('-',1,NumberOfColumns)],3);
    
    POINTER(1);
    
    if ~PulseData
        
        if all(Mode == [2 0])
            
            NotGood = 1;
            
            while NotGood
                
                Answer = inputdlg( ...
                    {'Number of Iterations', ...
                        'Standard deviation in conductivity', ...
                        ['Factors for sensors: ' int2str(1:NumberOfSensors)], ...
                        'Minimum conductivity value', ...
                        'Maximum conductivity value', ...
                        'Minimum layer thickness', ...
                        'Use Frictional Decay ? (0/1)'}, ...
                    ['Monte-Carlo Analysis Parameters (No Heat Pulse)'], ...
                    1, ...
                    {int2str(MaxMCIterations), ...
                        num2str(Sigmak0), ...
                        num2str(ones(1,length(1:NumberOfSensors))), ...
                        num2str(kMin), ...
                        num2str(kMax), ...
                        num2str(MinThickness), ...
                        int2str(UseFrictional)});
                
                if length(str2num(char(Answer(3)))) ~= NumberOfSensors
                    FactorsWarnHdl = warndlg({[int2str(NumberOfSensors) ' factors are required !']}, ...
                        'Warning');
                else
                    NotGood = 0;
                end
                
            end
            
            MaxMCIterations = str2num(char(Answer(1)));
            SigmakFactors = str2num(char(Answer(3)));
            Sigmak0 = str2num(char(Answer(2)))*SigmakFactors;
            kMin = str2num(char(Answer(4)));
            kMax = str2num(char(Answer(5)));
            MinThickness = str2num(char(Answer(6)));
            UseFrictional = str2num(char(Answer(7)));
            
        else
            
            MaxMCIterations = MaxMCIterationsBat;
            if ~isnan(FactorsBat) ...
                    & length(FactorsBat) == NumberOfSensors
                Sigmak0 = Sigmak0Bat*FactorsBat;
                SigmakFactors = FactorsBat;
            else
                Sigmak0 = Sigmak0Bat*ones(1,NumberOfSensors);
                SigmakFactors = ones(1,NumberOfSensors);
            end
            kMin = kMinBat;
            kMax = kMaxBat;
            MinThickness = MinThicknessBat;
            UseFrictional = UseFrictionalBat;
            
        end
        
        MONTECARLONOHP(ShiftedRelativeDepths, ...
            MinimumFricEqTemp, ...
            Currentk, ...
            RelativeDepths, ...
            SensorDistance, ...
            MaxMCIterations, ...
            Sigmak0, ...
            SigmakFactors, ...
            kMin, ...
            kMax, ...
            MinThickness, ...
            Mode, ...
            UseFrictional, ...
            FricTime, ...
            FricTemp, ...
            FrictionalDelays, ...
            FricMaxStep, ...
            TimeInc, ...
            HyndmanCoeffs, ...
            SensorRadius, ...
            FricTauMin, ...
            FricTauMax, ...
            VarDist);     
        
    else
        
        if all(Mode == [2 0])
            % TESTING THERMAL CONDUCTIVITY ANISOTROPY
            Answer = inputdlg( ...
                {'Number of Iterations', ...
                    'Minimum Layer Thickness' , 'K Anisotropy'}, ...
                ['Monte-Carlo Analysis Parameters (Data with Heat Pulse)'], ...
                1, ...
                {int2str(MaxMCIterations), ...
                    num2str(MinThickness), ...
                    num2str(kAnisotropy)});
            
            MaxMCIterations = str2num(char(Answer(1)));
            MinThickness = str2num(char(Answer(2)));
            kAnisotropy  = str2num(char(Answer(3)));
            
        else
            
            MaxMCIterations = MaxMCIterationsBat;
            MinThickness = MinThicknessBat; 
            
        end
        
        MONTECARLOHP(ShiftedRelativeDepths, ...
            MinimumFricEqTemp, ...
            Currentk, ...
            RelativeDepths, ...
            SensorDistance, ...
            MaxMCIterations, ...
            MinThickness, ...
            Mode, ...
            VarDist);
        
    end
    
    POINTER(0);
    
    if all(Mode == [2 0]) | all(Mode == [3 4]) | all(Mode == [3 5]) | all(Mode == [3 6])
        
        figure(ControlWindow);
        % MH SlugHeat15 Revise Figure List 
        %FigureListTitle = uicontrol('style','text', ...
        %    'string','List of Figures', ...
        %    'units','pixels', ...
        %    'backgroundcolor',[0.2 0.2 0.2], ...
        %    'foregroundcolor',[0.4 0.4 1], ...
        %    'fontsize',12, ...
        %    'fontweight','bold', ...
        %    'position',[XC1 YC(15) LC1 HC2]);
        
        %CurrentFigs = sort(get(0,'children'));
        %[CurrentFigNames,idx] = sort(get(CurrentFigs,'name'));
        
        %FiguresList = uicontrol('Style','popupmenu', ...
        %    'units','pixels', ...
        %    'backgroundcolor',[0 0 0], ...
        %    'foregroundcolor',[1 1 0], ...
        %    'fontsize',10, ...
        %    'horizontalalignment','left', ...
        %    'position',[XC1 YC(16) LC1*3 HC2], ...
        %    'String',CurrentFigNames, ...
        %    'ToolTipString','Click to pop-up figures list', ...
        %    'CallBack',['global FiguresList CurrentFigs;' ...
        %        'figure(CurrentFigs(get(FiguresList,''value'')))']);
        
        FigureListTitle = uicontrol('style','text', ...
            'string','List of Figures', ...
            'units','pixels', ...
            'backgroundcolor',[0.2 0.2 0.2], ...
            'foregroundcolor',[0.4 0.4 1], ...
            'fontsize',12, ...
            'fontweight','bold', ...
            'position',[XC1 YC(17) LC1 HC2]);

        CurrentFigs = sort(get(0,'children'));
        
        foo={};
        for i=1:length(CurrentFigs)
            foo{i,1} = CurrentFigs(i).Number;
            foo{i,2} = CurrentFigs(i).Name;
            %CurrentFigNames{i}=CurrentFigs(i).Name;
            %idx(i)=CurrentFigs(i).Number;
        end
        foo=sortrows(foo);
        CurrentFigs     = cell2mat(foo(:,1));
        CurrentFigNames = foo(:,2);

        FiguresList = uicontrol('Style','popupmenu', ...
            'units','pixels', ...
            'backgroundcolor',[0.75 0.75 0.75], ...
            'foregroundcolor','k', ...
            'fontsize',10, ...
            'fontweight','bold', ...
            'horizontalalignment','left', ...
            'position',[XC1 YC(18) LC1*2.5 HC2], ...
            'String',CurrentFigNames, ...
            'ToolTipString','Click to pop-up figures list', ...
            'CallBack',['global FiguresList CurrentFigs;' ...
                'figure(CurrentFigs(get(FiguresList,''value'')))']);
    end
    
    STATUS(LogFileId,[FORMATTIME ...
            ' - End Monte-Carlo analysis !'],2);
    STATUS(LogFileId,[repmat('-',1,NumberOfColumns)],3);
      
    STATUS(ResFileId,[FORMATTIME ...
            ' - End Monte-Carlo analysis !'],2);
    STATUS(ResFileId,[repmat('-',1,NumberOfColumns)],3);
    
    if Mode(1) ~= 3
        save SlugHeat15Temp
    end
    
    if Mode(1) ~= 3 & ~Mode(2)
        set(CommandControls(5:6),'enable','on')
        POINTER(0);
        if Mode(1)==2
            set(CommandControls(5:6),'enable','off')
            POINTER(0);  
        end
    end
    
end

if Mode(1) == 3
    
    % PC 'if' Modifications for removal/deletion of files
    % 10.3.2002 -- MH
    
    load SlugHeat15BatchStatus
    if PenFileToProcess <= length(PenFilesList)
        fclose('all');
        if ~isunix
            eval(['!del SlugHeat15Temp.mat'])
        else
            unix('rm SlugHeat15Temp.mat');
        end
        % Originally:
        % unix('rm SlugHeat15Temp.mat');
        clear all
        clear global
        load SlugHeat15BatchStatus
        eval(['load SlugHeat15BatchFile' int2str(PenFileToProcess)]);
        SlugHeat15([3 ModeBat]);
    else
        fclose('all');
        if ~isunix
            eval(['!del SlugHeat15Temp.mat SlugHeat15Mode.mat SlugHeat15Batch*'])
        else
            unix('rm SlugHeat15Temp.mat SlugHeat15Mode.mat SlugHeat15Batch*');
        end
        % Originally:
        % unix('rm SlugHeat15Temp.mat SlugHeat15Mode.mat SlugHeat15Batch*');
        close all
        disp([FORMATTIME ' - Batch Processing complete !']);
    end
    
end

% ==========================================================================
% --------------------------------------------------------------------------
%
%     -----   S U B R O U T I N E S   F O R   R O Q 15   -----
%
% --------------------------------------------------------------------------
% ==========================================================================


% ==========================================================================
% 
% -----   STATUS   -----
%
% ==========================================================================

function STATUS(FileId,Message,LineFeed)

if nargin<3
    fprintf(FileId,'%s',Message);
else
    Format = ['%s' repmat('\n',1,LineFeed)];
    fprintf(FileId,Format,Message);
end

% ==========================================================================
% 
% -----   FORMATTIME   -----
%
% ==========================================================================

function FormattedTime = FORMATTIME

cl = clock;
s = date;
s(find(s=='-'))=' ';
FormattedTime = [s ' - ' num2str(cl(4),'%02d') ...
        ':' num2str(cl(5),'%02d') ...
        ':' num2str(round(cl(6)),'%02d')];

% ==========================================================================
% 
% -----   POINTER   -----
%
% ==========================================================================

function POINTER(Wait)

if Wait
    Pointer = 'watch';
else
    Pointer = 'arrow';
end

AllFigures = get(0,'children');
set(AllFigures,'pointer',Pointer')


% ==========================================================================
% 
% -----   PRINTOUTHEADER   -----
%
% ==========================================================================

function PRINTOUTHEADER(ParFile,PenFile,LogFile,ResFile,IsPARDefault)

global ResFileId LogFileId NumberOfColumns
global Version Update

LogFileId = fopen(LogFile,'w');
ResFileId = fopen(ResFile,'w');
NC = NumberOfColumns;

% RES file
% --------

Id = ResFileId;

fprintf(Id,'%s\n',repmat('=',1,NC));
fprintf(Id,'%s\n',repmat('=',1,NC));
fprintf(Id,'%s\n',['===' repmat(' ',1,NC-6) '===']);
fprintf(Id,'%s\n',['===       R O Q  1 5  -  Version: ' Version ...
        '  -  Update: ' Update '       ===']);
fprintf(Id,'%s\n',['===' repmat(' ',1,NC-6) '===']);
fprintf(Id,'%s\n',repmat('=',1,NC));
fprintf(Id,'%s\n\n\n',repmat('=',1,NC));

l1 = length(['RESULTS FILE: ' pwd '/' ResFile]);
l2 = length(['Processed: ' FORMATTIME]);

x1 = fix((NC-l1)/2);
x2 = fix((NC-l2)/2);
x0 = min(x1,x2)-4;
l = max(l1,l2)+8;
tl1 = fix((l-l1-4)/2);
tr1 = l-tl1-l1-4;
tl2 = fix((l-l2-4)/2);
tr2 = l-tl2-l2-4;

fprintf(Id,'%s\n',[repmat(' ',1,x0) repmat('-',1,l)]);
fprintf(Id,'%s\n',[repmat(' ',1,x0) '--' repmat(' ',1,l-4)  '--']);
fprintf(Id,'%s\n',[repmat(' ',1,x0) '--' repmat(' ',1,tl1) ...
        'RESULTS FILE: ' pwd '/' ResFile repmat(' ',1,tr1) '--']);
fprintf(Id,'%s\n',[repmat(' ',1,x0) '--' repmat(' ',1,l-4)  '--']);
fprintf(Id,'%s\n',[repmat(' ',1,x0) '--' repmat(' ',1,tl2) ...
        'Processed: ' FORMATTIME repmat(' ',1,tr2) '--']);
fprintf(Id,'%s\n',[repmat(' ',1,x0) '--' repmat(' ',1,l-4)  '--']);
fprintf(Id,'%s\n\n\n\n',[repmat(' ',1,x0) repmat('-',1,l)]);

String = ['Penetration file:  ' PenFile];
fprintf(Id,'%s\n\n',[repmat(' ',1,fix((NC-length(String))/2)) String]);
String = ['Parameter file (*):  ' ParFile];
fprintf(Id,'%s\n\n',[repmat(' ',1,fix((NC-length(String))/2)) String]);
String = ['Log file:  ' pwd '/' LogFile];
fprintf(Id,'%s\n\n\n',[repmat(' ',1,fix((NC-length(String))/2)) String]);

if IsPARDefault == 2
    fprintf(Id,'%s\n\n\n','(*) File copied from user-selected PAR file !');
elseif IsPARDefault
    fprintf(Id,'%s\n\n\n','(*) File created from default PARAMETERS of this version of SlugHeat15 !');
else
    fprintf(Id,'%s\n\n\n','(*) File SlugHeat15.par found in the working directory !');
end


% LOG file
% --------

Id = LogFileId;

fprintf(Id,'%s\n',repmat('=',1,NC));
fprintf(Id,'%s\n',repmat('=',1,NC));
fprintf(Id,'%s\n',['===' repmat(' ',1,NC-6) '===']);
fprintf(Id,'%s\n',['===       R O Q  1 4  -  Version: ' Version ...
        '  -  Update: ' Update '       ===']);
fprintf(Id,'%s\n',['===' repmat(' ',1,NC-6) '===']);
fprintf(Id,'%s\n',repmat('=',1,NC));
fprintf(Id,'%s\n\n\n',repmat('=',1,NC));

l1 = length(['LOG FILE: ' pwd '/' LogFile]);
l2 = length(['Processed: ' FORMATTIME]);

x1 = fix((NC-l1)/2);
x2 = fix((NC-l2)/2);
x0 = min(x1,x2)-4;
l = max(l1,l2)+8;
tl1 = fix((l-l1-4)/2);
tr1 = l-tl1-l1-4;
tl2 = fix((l-l2-4)/2);
tr2 = l-tl2-l2-4;

fprintf(Id,'%s\n',[repmat(' ',1,x0) repmat('-',1,l)]);
fprintf(Id,'%s\n',[repmat(' ',1,x0) '--' repmat(' ',1,l-4)  '--']);
fprintf(Id,'%s\n',[repmat(' ',1,x0) '--' repmat(' ',1,tl1) ...
        'LOG FILE: ' pwd '/' LogFile repmat(' ',1,tr1) '--']);
fprintf(Id,'%s\n',[repmat(' ',1,x0) '--' repmat(' ',1,l-4)  '--']);
fprintf(Id,'%s\n',[repmat(' ',1,x0) '--' repmat(' ',1,tl2) ...
        'Processed: ' FORMATTIME repmat(' ',1,tr2) '--']);
fprintf(Id,'%s\n',[repmat(' ',1,x0) '--' repmat(' ',1,l-4)  '--']);
fprintf(Id,'%s\n\n\n\n',[repmat(' ',1,x0) repmat('-',1,l)]);

String = ['Penetration file:  ' PenFile];
fprintf(Id,'%s\n\n',[repmat(' ',1,fix((NC-length(String))/2)) String]);
String = ['Parameter file (*):  ' ParFile];
fprintf(Id,'%s\n\n',[repmat(' ',1,fix((NC-length(String))/2)) String]);
String = ['Res file:  ' pwd '/' ResFile];
fprintf(Id,'%s\n\n\n',[repmat(' ',1,fix((NC-length(String))/2)) String]);

if IsPARDefault == 2
    fprintf(Id,'%s\n\n\n','(*) File copied from user-selected PAR file !');
elseif IsPARDefault
    fprintf(Id,'%s\n\n\n','(*) File created from default PARAMETERS of this version of SlugHeat15 !');
else
    fprintf(Id,'%s\n\n\n','(*) File SlugHeat15.par found in the working directory !');
end

fprintf(Id,'%s\n',repmat('-',1,NC));
fprintf(Id,'%s\n','Begin log file');
fprintf(Id,'%s\n\n',repmat('-',1,NC));

TmpId = fopen('SlugHeat15.log');
InitialLog = fread(TmpId);
fprintf(Id,'%s',InitialLog);
fclose(TmpId);

% ==========================================================================
%
% -----   READPARFILE   -----
%
% ==========================================================================

function [ ... 
        NumberOfSensors, ...	
        WaterThermistor, ...
        TimeScalingFactor, ...
        SensorRadius, ...
        SensorDistance, ...
        CalibrationCoeffs, ...
        HyndmanCoeffs, ...
        FrictionalDelays, ...
        FricMaxStep, ...
        TimeInc, ...
        FricTauMin, ...
        FricTauMax, ...
        PulseDelays, ...
        kInit, ...
        PulsePower, ...
        TimeShiftInit, ...
        TimeShiftInc, ...
        PulseMaxStep, ...
        kTolerance, ...
        PulseTauMin, ...
        PulseTauMax, ...
        HeatPulseLength ...
] = READPARFILE(ParFile)

% Opens the 'PAR' file
% --------------------

fid = fopen(ParFile);

% Finds all Carriage Line Returns (ascii code = 10)
% -------------------------------------------------

Lookup = fread(fid,inf);
CR = find(Lookup==10);

% Starts reading parameters
% -------------------------

% Line 1: Number of sensors
fseek(fid,0,'bof');
NumberOfSensors = fscanf(fid,'%d',1);

% Line 2: Is there a water thermistor ?
fseek(fid,CR(1)+1,'bof');
WaterThermistor = fscanf(fid,'%d',1);

% Line 3: Time scaling factor (sec/unit)
fseek(fid,CR(2)+1,'bof');
TimeScalingFactor = fscanf(fid,'%g',1);

% Line 4: Time between thermistor readings (sec)
fseek(fid,CR(3)+1,'bof');
DeltaTime = fscanf(fid,'%g',1);

% Line 5: Sensor radius (m)
fseek(fid,CR(4)+1,'bof');
SensorRadius = fscanf(fid,'%g',1);

% Line 6: Distance between sensors (m)
fseek(fid,CR(5)+1,'bof');
SensorDistance = fscanf(fid,'%g',1);

% Line 7: Assumed temperature error (K)
fseek(fid,CR(6)+1,'bof');
TempError = fscanf(fid,'%g',1);

% Line 8: Lenght of heat pulse (sec)
fseek(fid,CR(7)+1,'bof');
HeatPulseLength = fscanf(fid,'%g',1);

% Line 9, 10 & 11: Calibration coefficients
% Readings to milliKelvins

Format = repmat('%g,',1,NumberOfSensors);
Format = [Format '%g'];
fseek(fid,CR(9)+1,'bof');
aa = fscanf(fid,Format,NumberOfSensors+WaterThermistor)';
fseek(fid,CR(10)+1,'bof');
bb =  fscanf(fid,Format,NumberOfSensors+WaterThermistor)';
fseek(fid,CR(11)+1,'bof');
cc =  fscanf(fid,Format,NumberOfSensors+WaterThermistor)';

CalibrationCoeffs = [aa;bb;cc];

% Line 12: Hyndman Coefficients for k
fseek(fid,CR(12)+1,'bof');
HyndmanCoeffs = fscanf(fid,'%g %g %g',3)';

% Line 13: Frictional time delays (sec)
Format = repmat('%g ',1,NumberOfSensors);
Format = [Format '%g'];
fseek(fid,CR(13)+1,'bof');
FrictionalDelays = fscanf(fid,Format,NumberOfSensors)';

% Line 14: Maximum number of steps and Time
% increment in frictional delay calculation (sec)
fseek(fid,CR(14)+1,'bof');
FricMaxStep = fscanf(fid,'%g',1);
TimeInc = fscanf(fid,'%g',1);

% Line 15: Minimum and max Tau values used for the 
% frictional delay
fseek(fid,CR(15)+1,'bof');
FricTauMin = fscanf(fid,'%g',1);
FricTauMax = fscanf(fid,'%g',1);

% Line 16: Pulse time delays (sec)
fseek(fid,CR(16)+1,'bof');
PulseDelays = fscanf(fid,Format,NumberOfSensors)';

% Line 17: Initial Conductivities (W m/K)
fseek(fid,CR(17)+1,'bof');
ktype=fscanf(fid,Format,1);
fseek(fid,CR(17)+1,'bof');
if ktype == 99
  kInit = fscanf(fid,Format,7)';
else 
  kInit = fscanf(fid,Format,NumberOfSensors)';
end

% Line 18: Heat pulse power (J/m/s)
fseek(fid,CR(18)+1,'bof');
PulsePower = fscanf(fid,'%g',1);

% Line 19: Initial time shit & Increment (sec)
fseek(fid,CR(19)+1,'bof');
TimeShiftInit = fscanf(fid,'%g',1);
TimeShiftInc  = fscanf(fid,'%g',1);

% Line 20: Maximum iteration number & error
% tolerance on conductivity iteration
fseek(fid,CR(20)+1,'bof');
PulseMaxStep = fscanf(fid,'%g',1);
kTolerance = fscanf(fid,'%g',1);

% Line 21: Minimum and max Tau values used for the
% heat pulse delay
fseek(fid,CR(21)+1,'bof');
PulseTauMin = fscanf(fid,'%g',1);
PulseTauMax = fscanf(fid,'%g',1);

% Close the 'PAR' file
% --------------------

fclose(fid);

% ==========================================================================
% 
% -----   PRINTOUTPARAMETERS   -----
%
% ==========================================================================

function PRINTOUTPARAMETERS( ...
    ParFile, ...
    NumberOfSensors, ...
    WaterThermistor, ...
    TimeScalingFactor, ...
    SensorRadius, ...
    SensorDistance, ...
    CalibrationCoeffs, ...
    HyndmanCoeffs, ...
    FrictionalDelays, ...
    FricMaxStep, ...
    TimeInc, ...
    FricTauMin, ...
    FricTauMax, ...
    PulseDelays, ...
    kInit, ...
    PulsePower, ...
    TimeShiftInit, ...
    TimeShiftInc, ...
    PulseMaxStep, ...
    kTolerance, ...
    PulseTauMin, ...
    PulseTauMax, ...
    HeatPulseLength)

global ResFileId LogFileId NumberOfColumns

NC = NumberOfColumns;

% RES file
% --------

Id = ResFileId;

String = ['PARAMETERS READ IN PAR FILE'];
fprintf(Id,'%s\n',[repmat(' ',1,fix((NC-length(String))/2)) ...
        repmat('-',1,length(String))]);
fprintf(Id,'%s\n',[repmat(' ',1,fix((NC-length(String))/2)) String]);
fprintf(Id,'%s\n\n\n',[repmat(' ',1,fix((NC-length(String))/2)) ...
        repmat('-',1,length(String))]);

fprintf(Id,'%s\t\t%02d\n','Number Of Sensors:',NumberOfSensors);
fprintf(Id,'%s\t%1.1f\n','Time Scaling Factor (s):',TimeScalingFactor);
fprintf(Id,'%s\t\t%1.2e\n','Sensor Radius (m):',SensorRadius);
fprintf(Id,'%s\t%1.2f\n','Inter-sensor spacing (m):',SensorDistance);
fprintf(Id,'\n%s\n\n','Calibration Coefficients ( T = 1000*[a.x^2 + b.x + c] degC ):');
Dim = size(CalibrationCoeffs);
fprintf(Id,['  a: ' repmat('%1.1f  ',1,Dim(2)) '\n'],CalibrationCoeffs(1,:));
fprintf(Id,['  b: ' repmat('%1.1f  ',1,Dim(2)) '\n'],CalibrationCoeffs(2,:));
fprintf(Id,['  c: ' repmat('%1.1f  ',1,Dim(2)) '\n'],CalibrationCoeffs(3,:));
fprintf(Id,'\n%s\n\n','Hyndman Coefficients ( Kappa = k/[a - b.k + c.k^2] 10^-6 m^2/s ):');
fprintf(Id,'  a: %1.3f\n',HyndmanCoeffs(1));
fprintf(Id,'  b: %1.3f\n',HyndmanCoeffs(2));
fprintf(Id,'  c: %1.3f\n',HyndmanCoeffs(3));
fprintf(Id,'\n%s\n\n','Initial Frictional Delays (s):');
fprintf(Id,['  ' repmat('%1.1f  ',1,length(FrictionalDelays)) '\n'],FrictionalDelays);
fprintf(Id,'\n%s\t%d\n','Time Shift Increment (s):  ',TimeInc);
fprintf(Id,'%s\t%d\n','Maximum Frictional Step:  ',FricMaxStep);
fprintf(Id,'%s\t%1.1f\n','Minimum Frictional Tau:  ',FricTauMin);
fprintf(Id,'%s\t%1.1f\n','Maximum Fricional Tau:  ',FricTauMax);
fprintf(Id,'\n%s\n\n','Assumed Initial Conductivities (W/m/degC):  ');
if kInit(1) == 99
    fprintf(Id,'  k(z) =');
    if kInit(2)~=0; fprintf(Id,' %+1.3f',kInit(2)); end
    if kInit(3)~=0; fprintf(Id,' %+1.3fz',kInit(3)); end 
    if kInit(4)~=0; fprintf(Id,' %+1.3fz^2',kInit(4)); end
    if kInit(5)~=0; fprintf(Id,' %+1.3fexp(%+1.3fz)',kInit(5:6)); end
    if kInit(7)~=0; fprintf(Id,' %+1.3flog10(z)',kInit(7)); end
    fprintf(Id,'\n');
else
    fprintf(Id,['  ' repmat('%1.2f  ',1,length(kInit)) '\n'],kInit);
end
fprintf(Id,'\n%s\n\n','Initial Heat Pulse Delays (s):');
fprintf(Id,['  ' repmat('%1.1f  ',1,length(PulseDelays)) '\n'],PulseDelays);
fprintf(Id,'\n%s\t%1.1f\n','Time Shift Increment (s): ',TimeShiftInc);
fprintf(Id,'%s\t%d\n','Maximum Heat Pulse Step:  ',PulseMaxStep);
fprintf(Id,'%s\t%1.1f\n','Minimum Heat Pulse Tau:  ',PulseTauMin);
fprintf(Id,'%s\t%1.1f\n','Maximum Heat Pulse Tau:  ',PulseTauMax);
fprintf(Id,'%s\t%1.1f\n','Heat Pulse Power (J/m):  ',PulsePower);
fprintf(Id,'%s\t%1.1f\n','Heat Pulse Length (s):  ',HeatPulseLength);
fprintf(Id,'%s\t%1.3f\n\n\n','Tolerance on k (degC):  ',kTolerance);


% LOG file
% --------

Id = LogFileId;

String = ['PARAMETERS READ IN PAR FILE'];
fprintf(Id,'\n%s\n',[repmat(' ',1,fix((NC-length(String))/2)) ...
        repmat('-',1,length(String))]);
fprintf(Id,'%s\n',[repmat(' ',1,fix((NC-length(String))/2)) String]);
fprintf(Id,'%s\n\n\n',[repmat(' ',1,fix((NC-length(String))/2)) ...
        repmat('-',1,length(String))]);

fprintf(Id,'%s\t\t%02d\n','Number Of Sensors:',NumberOfSensors);
fprintf(Id,'%s\t%1.1f\n','Time Scaling Factor (s):',TimeScalingFactor);
fprintf(Id,'%s\t\t%1.2e\n','Sensor Radius (m):',SensorRadius);
fprintf(Id,'%s\t%1.2f\n','Inter-sensor spacing (m):',SensorDistance);
fprintf(Id,'\n%s\n\n','Calibration Coefficients ( T = 1000*[a.x^2 + b.x + c] degC ):');
Dim = size(CalibrationCoeffs);
fprintf(Id,['  a: ' repmat('%1.1f  ',1,Dim(2)) '\n'],CalibrationCoeffs(1,:));
fprintf(Id,['  b: ' repmat('%1.1f  ',1,Dim(2)) '\n'],CalibrationCoeffs(2,:));
fprintf(Id,['  c: ' repmat('%1.1f  ',1,Dim(2)) '\n'],CalibrationCoeffs(3,:));
fprintf(Id,'\n%s\n\n','Hyndman Coefficients ( Kappa = k/[a - b.k + c.k^2] 10^-6 m2 s-1 ):');
fprintf(Id,'  a: %1.3f\n',HyndmanCoeffs(1));
fprintf(Id,'  b: %1.3f\n',HyndmanCoeffs(2));
fprintf(Id,'  c: %1.3f\n',HyndmanCoeffs(3));
fprintf(Id,'\n%s\n\n','Initial Frictional Delays (s):');
fprintf(Id,['  ' repmat('%1.1f  ',1,length(FrictionalDelays)) '\n'],FrictionalDelays);
fprintf(Id,'\n%s\t%d\n','Time Shift Increment (s):  ',TimeInc);
fprintf(Id,'%s\t%d\n','Maximum Frictional Step:  ',FricMaxStep);
fprintf(Id,'%s\t%1.1f\n','Minimum Frictional Tau:  ',FricTauMin);
fprintf(Id,'%s\t%1.1f\n','Maximum Fricional Tau:  ',FricTauMax);
fprintf(Id,'\n%s\n\n','Assumed Initial Conductivities (W/m/degC):  ');
if kInit(1) == 99
    fprintf(Id,'  k(z) =');
    if kInit(2)~=0; fprintf(Id,' %+1.3f',kInit(2)); end
    if kInit(3)~=0; fprintf(Id,' %+1.3fz',kInit(3)); end 
    if kInit(4)~=0; fprintf(Id,' %+1.3fz^2',kInit(4)); end
    if kInit(5)~=0; fprintf(Id,' %+1.3fexp(%+1.3fz)',kInit(5:6)); end
    if kInit(7)~=0; fprintf(Id,' %+1.3flog10(z)',kInit(7)); end
    fprintf(Id,'\n');
else
    fprintf(Id,['  ' repmat('%1.2f  ',1,length(kInit)) '\n'],kInit);
end
fprintf(Id,'\n%s\n\n','Initial Heat Pulse Delays (s):');
fprintf(Id,['  ' repmat('%1.1f  ',1,length(PulseDelays)) '\n'],PulseDelays);
fprintf(Id,'\n%s\t%1.1f\n','Time Shift Increment (s): ',TimeShiftInc);
fprintf(Id,'%s\t%d\n','Maximum Heat Pulse Step:  ',PulseMaxStep);
fprintf(Id,'%s\t%1.1f\n','Minimum Heat Pulse Tau:  ',PulseTauMin);
fprintf(Id,'%s\t%1.1f\n','Maximum Heat Pulse Tau:  ',PulseTauMax);
fprintf(Id,'%s\t%1.1f\n','Heat Pulse Power (J/m):  ',PulsePower);
fprintf(Id,'%s\t%1.1f\n','Heat Pulse Length (s):  ',HeatPulseLength);
fprintf(Id,'%s\t%1.3f\n\n\n','Tolerance on k (degC):  ',kTolerance);


% ==========================================================================
%
% -----   READPENFILE   -----
% 
% ==========================================================================

function [...
        StationName, ...
        Penetration, ...
        CruiseName, ...
        Latitude, ...
        Longitude, ...
        Depth, ...
        Tilt, ...
        LoggerId, ...
        ProbeId, ...
        NumberOfSensors2, ...
        PenetrationRecord, ...
        HeatPulseRecord, ...
        EndRecord, ...
        BottomWaterRawData, ...
        AllRecords, ...
        AllSensorsRawData, ...
        WaterSensorRawData, ...
        EqmStartRecord, ...
        EqmEndRecord ...
] = READPENFILE(PenFile)


% Opens the 'PEN' file

fid = fopen(PenFile);

% Reads header and preliminary data

fseek(fid,1,'cof');
% MH SlugHeat15 EDIT Rewind
frewind(fid);
StationName = fscanf(fid,'%d',1);
Penetration = fscanf(fid,'%d',1);

fseek(fid,0,'bof');
Lookup = setstr(fread(fid,255));
Quotes = find(Lookup=='''');
fseek(fid,Quotes(1),'bof');
CruiseName = fscanf(fid,'%c',Quotes(2)-Quotes(1)-1);

fseek(fid,1,'cof');
Latitude = fscanf(fid,'%f',1);
Longitude = fscanf(fid,'%f',1);
Depth = fscanf(fid,'%d',1);
Tilt = fscanf(fid,'%f',1);
LoggerId = fscanf(fid,'%d',1);
ProbeId = fscanf(fid,'%d',1);
NumberOfSensors2 = fscanf(fid,'%d',1);
PenetrationRecord = fscanf(fid,'%d',1);
HeatPulseRecord = fscanf(fid,'%d',1);
% MH ADDED EQM START AND END RECORDS
EqmStartRecord  = fscanf(fid,'%d',1);
EqmEndRecord    = fscanf(fid,'%d',1);
%MH SlugHeat15 changed from %g to %f format to accommodate NANs
Format = repmat('%f ',1,NumberOfSensors2);
Format = [Format '%f'];
BottomWaterRawData = fscanf(fid,Format, ...
    NumberOfSensors2+1)';
RawRead = fscanf(fid,['%f ' Format],inf);
l = length(RawRead);

% MH 9.3.17 : reshape returns error if RawRead does not have
% (NumberOfSensors2+2) * l/(NumberOfSensors2+2) Elements

RawRead = reshape(RawRead, ...
    (NumberOfSensors2+2), ...
    l/(NumberOfSensors2+2))';

AllRecords = RawRead(:,1);
EndRecord = AllRecords(end);
AllSensorsRawData = RawRead(:,2:end-1);

WaterSensorRawData = RawRead(:,end);

fclose(fid);

% ==========================================================================
%
% -----   READCALFILE   -----
%
% ==========================================================================
function WaterCorrectionType = READCALFILE(CalFile)
fid = fopen(CalFile);
WaterCorrectionType = str2num(fgetl(fid));
fclose(fid);


% ==========================================================================
%
% -----   CONVERTRAWTOTEMP   -----
%
% ==========================================================================

function [...
        BottomWaterTemp, ...
        WaterSensorTemp, ...
        AllSensorsTemp ...
] = CONVERTRAWTOTEMP( ...
    BottomWaterRawData, ...
    CalibrationCoeffs, ...
    AllSensorsRawData, ...
    WaterSensorRawData, ...
    WaterCorrectionType, ...
    PenetrationRecord, ...
    AllRecords, ...
    EqmStartRecord, ...
    EqmEndRecord)

% Here the raw readings from the Pen file are converted in degrees then
% corrected to bottom water (to bring the readings from each thermistor
% to a same reference) then corrected with respect to the temperature
% read in the bottom water during the time of measurements.

% In the PGC pre-processing software, values are already converted
% to milli degrees

% Converted Temperatures
% ----------------------


% Raw Temperatures (degrees) - All channels
RawTemp = AllSensorsRawData/1000;

% Ambient Water Temperature (degrees) sensor during deployment
WaterSensorTemp = WaterSensorRawData/1000;

%% MH EDIT FOR COLOMBIA TESTS WHERE THERE IS NO GOOD BWT DATA
%  SET BWT TO T11
%uiwait(msgbox('Temp edit: setting bwt == ch5','Colombia Edit'));
%WaterSensorTemp    = RawTemp(:,5);
%WaterSensorRawData = WaterSensorTemp*1000;


% Temperatures During Calibration Interval for All Channels
% ---------------------------------------------------------
a                = find(AllRecords >= EqmStartRecord & AllRecords<=EqmEndRecord);
b                = find(AllRecords >= PenetrationRecord);
RawTempCalib     = RawTemp(a,:);
WaterSensorCalib = WaterSensorTemp(a,:);
WaterSensorPen   = WaterSensorTemp(b(1):b(end));

% Bottom Water Temperatures (degrees - First Reading for All Thermistors)
BottomWaterTemp = BottomWaterRawData/1000;

WaterSensorCalibFirst = WaterSensorCalib(1);
WaterSensorCalibLast  = WaterSensorCalib(end);
WaterSensorCalibMean  = mean(WaterSensorCalib);
WaterSensorCalibPen   = mean(WaterSensorPen);

% Consider calibrating to T1 (deepest thermistor)
T1Calib      = RawTempCalib(:,1);
T1CalibFirst = T1Calib(1);
T1CalibLast  = T1Calib(end);
T1CalibMean  = mean(T1Calib);

% Final Temperature in Bottom Water Calibration Interval (depending on
% whether or not referencing to Ambient BWT sensor or T1
if WaterCorrectionType<5
    RefTemp0 = WaterSensorCalibLast;
else
    RefTemp0 = T1CalibLast;
end

% Here the correction is applied. We can substract the AVERAGE (Type 3),
% the FIRST point (Type 1) or the LAST point of the water sensor
% calibration record (Type 2). Added the same for the tip thermistor

if WaterCorrectionType == 3
    RefTemp1 = WaterSensorCalibMean;
elseif WaterCorrectionType == 2
    RefTemp1 = WaterSensorCalibLast;
elseif WaterCorrectionType == 1
    RefTemp1 = WaterSensorCalibFirst;
elseif WaterCorrectionType == 4
    RefTemp1 = WaterSensorCalibPen;
elseif WaterCorrectionType == 5
    RefTemp1 = T1CalibFirst;
elseif WaterCorrectionType == 6
    RefTemp1 = T1CalibLast;
elseif WaterCorrectionType == 7
    RefTemp1 = T1CalibMean;
end

% Apply Correction
TempCorrection = RefTemp1-RefTemp0;


l = length(WaterSensorRawData);

AllSensorsTemp = RawTemp ...
    -repmat(BottomWaterTemp(1:end-1),l,1) ...
    -TempCorrection;

WaterSensorTemp = WaterSensorTemp-TempCorrection;


% ------------ Manual Offset ----------------- %
if exist('offset.dat','file');
   fid    = fopen('offset.dat','r');
   offset = str2num(fgetl(fid));
   fclose(fid);
   beep;
   disp([' APPLYING OFFSET OF ',num2str(offset),' IN CONVERTRAWTOTEMP']);
   AllSensorsTemp  = AllSensorsTemp  + offset;
   WaterSensorTemp = WaterSensorTemp + offset;
   BottomWaterTemp = BottomWaterTemp + offset;
end

% MANUAL OFFSET : ADDED FOR ANSON
%AllSensorsTemp  = AllSensorsTemp  +0.05;
%WaterSensorTemp = WaterSensorTemp +0.05;
%BottomWaterTemp = BottomWaterTemp +0.05;


% ==========================================================================
%
% -----   SPLITDECAYS   -----
%
% ==========================================================================

function [ ...
        FricTime, ...
        FricTemp, ...
        PulseData, ...
        PulseTime, ...
        PulseTemp ...
] = SPLITDECAYS( ...
    PenetrationRecord, ...
    HeatPulseRecord, ...
    AllRecords, ...
    TimeScalingFactor, ...
    AllSensorsTemp);

% This subroutine of SlugHeat15 splits the data in two sets: one for the
% Frictional decay and one for the Heat pulse decay.  Two markers are given
% in the header of .pen files: the first indicates the beginning of the
% Frictional decay and the second the beginning of the Heat pulse decay.


EndFricRecord = HeatPulseRecord-1;
PulseData = 1;

% Here if no more than 12 records (typically 2 minutes) are found after 
% the Heat Pulse record marker only the Frictional Decay is considered.

if AllRecords(end) <= HeatPulseRecord + 12
    PulseData = 0;
end

ind1 = find(AllRecords==PenetrationRecord);
ind2 = find(AllRecords==EndFricRecord);
Fric0 = AllRecords(ind1:ind2);
FricTime = TimeScalingFactor*(Fric0-Fric0(1));
FricTemp = AllSensorsTemp(ind1:ind2,:);

if PulseData
    ind1 = find(AllRecords==HeatPulseRecord);
    PulseTime = AllRecords(ind1:end);
    PulseTime = TimeScalingFactor*(PulseTime-Fric0(1));
    PulseTemp = AllSensorsTemp(ind1:end,:);
else
    PulseTime = [];
    PulseTemp = [];
end

% ==========================================================================
%
% -----   SPLITDECAYS2   -----
%
% ==========================================================================

function [ ...
        FricTime, ...
        FricTemp, ...
        PulseData, ...
        PulseTime, ...
        PulseTemp ...
] = SPLITDECAYS2( ...
    PenetrationRecord, ...
    HeatPulseRecord, ...
    EndRecord, ...   
    AllRecords, ...
    TimeScalingFactor, ...
    AllSensorsTemp);

if ~HeatPulseRecord 
    PulseData = 0;
    EndFricRecord = EndRecord;
else
    PulseData = 1;
    EndFricRecord = HeatPulseRecord-1;
end

ind1 = find(AllRecords==PenetrationRecord);
ind2 = find(AllRecords==EndFricRecord);
Fric0 = AllRecords(ind1:ind2);
FricTime = TimeScalingFactor*(Fric0-Fric0(1));
FricTemp = AllSensorsTemp(ind1:ind2,:);

if PulseData
    ind1 = find(AllRecords==HeatPulseRecord);
    ind2 = find(AllRecords==EndRecord);
    PulseTime = AllRecords(ind1:ind2);
    PulseTime = TimeScalingFactor*(PulseTime-Fric0(1));
    PulseTemp = AllSensorsTemp(ind1:ind2,:);
else
    PulseTime = [];
    PulseTemp = [];
end

% ==========================================================================
%
% -----   PLOTCORRECTEDTEMP   -----
%
% ==========================================================================



function PLOTCORRECTEDTEMP( ...
    AllSensorsTemp, ...
    NumberOfSensors, ...
    WaterThermistor, ...
    WaterSensorTemp, ...
    Tilt, ...
    Depth, ...
    TAPRecord, ...
    Mode)

global RawDataFig FigSpace CMap
global PenFile ResName TAPName
global AllRecords PenetrationRecord HeatPulseRecord EndRecord
global FricTauMin FricTauMax PulseTauMin PulseTauMax
global SensorsToUse
global PulseData MinTotalkChange MaxNumberOfIterations

% Define Raw data figure
% ----------------------

if ~isempty(RawDataFig)
    figure(RawDataFig(1,1))
else
    RawDataFig(1,1) = figure( ...
        'position',FigSpace, ...
        'color',[0.25 0.25 0.25], ...
        'MenuBar','none', ...
        'numbertitle','off', ...
        'Name',['B - Data from Penetration File ']);
    % MH SlugHeat15 add 'color','k' to axes calls. 
    RawDataFig(1,2) = axes('position',[0.13 0.44 0.77 0.52],'color','k');
    RawDataFig(2,2) = axes('position',[0.13 0.34 0.77 0.07],'color','k');
    RawDataFig(3,2) = axes('position',[0.13 0.25 0.77 0.07],'color','k');
    RawDataFig(4,2) = axes('position',[0.13 0.16 0.77 0.07],'color','k');
    RawDataFig(5,2) = axes('position',[0.06 0.16 0.03 0.80],'color',[0.25 0.25 0.25]');
    RawDataFig(6,2) = axes('position',[0.02 0.01 0.96 0.06],'visible','off');
    orient landscape;
end

% Design colormap
% ---------------

colormap('jet');
CMap = flipud(colormap);
CMap = interp1([1:64],CMap,[1:64/NumberOfSensors:64]);

% Sensor colorbar
% ---------------

axes(RawDataFig(5,2))
colormap(CMap)
% MH SlugHeat15 Comment out color bar
%colorbar(RawDataFig(5,2))
caxis([1 NumberOfSensors])

% MH SlugHeat15 turn remove 'xcolor','y' and replace with background [0.25 0.25 0.25]
set(RawDataFig(5,2), ...
    'xcolor',[0.25 0.25 0.25], ...
    'ycolor','y', ...
    'ytick',[1.5:NumberOfSensors+0.5], ...
    'ylim',[1 NumberOfSensors+1], ...
    'yticklabel',[1:NumberOfSensors], ...
    'yaxislocation','left', ...
    'xtick',[], ...
    'ticklength',[0 0])

ylabel('\bf Sensor Number', ...
    'verticalalignment','bottom', ...
    'fontsize',12,'color','y')

% MH SlugHeat15 set visible 'off'
%set(gca,'visible','off')

% Plot all sensors
% ----------------

axes(RawDataFig(1,2))
hold on
RawDataFig(1:NumberOfSensors,3) = plot( ...
    AllRecords,AllSensorsTemp,'-d','markersize',4);
hold on


% MH Set axis limits on raw data figure to highlight decays
Vaxlim = axis;
axis([Vaxlim(1) Vaxlim(2) -0.01 1])


for i=1:NumberOfSensors
    set(RawDataFig(i,3),'color',CMap(i,:))
end

set(gca, ...
    'xcolor','y', ...
    'ycolor','y', ...
    'box','on', ...
    'color','k', ...
    'xlim',[AllRecords(1) AllRecords(end)], ...
    'fontsize',11, ...
    'yaxislocation','right')

axes(RawDataFig(1,2))
y(1) = ylabel('\bf Temperature relative to bottom water (^oC)', ...
    'verticalalignment','top', ...
    'fontsize',12);

RawDataFig(1,7) = line(PenetrationRecord*[1 1],get(gca,'ylim'));
set(RawDataFig(1,7),'color','g', ...
    'linestyle','--')
RawDataFig(2,7) = line(HeatPulseRecord*[1 1],get(gca,'ylim'));
set(RawDataFig(2,7),'color','r', ...
    'linestyle','--')
RawDataFig(3,7) = line(EndRecord*[1 1],get(gca,'ylim'));
set(RawDataFig(3,7),'color','c', ...
    'linestyle','--') 
RawDataFig(4,7) = line([AllRecords(1) AllRecords(end)],[0 0]);
set(RawDataFig(4,7),'color','y', ...
    'linestyle',':')


% Plot Water sensor
% -----------------

axes(RawDataFig(2,2))
% MH SlugHeat15 Put HOLD here
hold on
if WaterThermistor    
    p=plot(AllRecords,WaterSensorTemp,'w-d','markersize',3);       
    dummy = [min(WaterSensorTemp) max(WaterSensorTemp)];
    if ~diff(dummy)
        dummy(1) = dummy(1)-0.05*dummy(1);
        dummy(2) = dummy(2)+0.05*dummy(2);
    end
    if ~dummy(1) & ~dummy(2)
        dummy(1) = -0.01;
        dummy(2) = 0.01;
    end
    set(gca,'ylim',[dummy(1)-0.1*diff(dummy) dummy(2)+0.1*diff(dummy)])
else
    text(AllRecords(1)+0.5*(AllRecords(end)-AllRecords(1)), ...
        0.5,'\bf There is no Water Sensor data for this penetration file !', ...
        'color','r', ... 
        'VerticalAlignment','middle', ...
        'horizontalalignment','center');
end
% MH SlugHeat15 Put HOLD here
hold on
RawDataFig(5,7) = line(PenetrationRecord*[1 1],get(gca,'ylim'));
set(RawDataFig(5,7),'color','g', ...
    'linestyle','--')
RawDataFig(6,7) = line(HeatPulseRecord*[1 1],get(gca,'ylim'));
set(RawDataFig(6,7),'color','r', ...
    'linestyle','--')
RawDataFig(7,7) = line(EndRecord*[1 1],get(gca,'ylim'));
set(RawDataFig(7,7),'color','c', ...
    'linestyle','--')

set(gca, ...
    'xcolor','y', ...
    'ycolor','y', ...
    'color','k', ...
    'xlim',[AllRecords(1) AllRecords(end)], ...
    'box','on', ...
    'fontsize',10, ...
    'yaxislocation','right', ...
    'xticklabel',[])
y(2) = ylabel('\bf Water (^oC)', ...
    'verticalalignment','top', ...
    'fontsize',10);

% Plot Tilt sensor
% ----------------

axes(RawDataFig(3,2))
% MH SlugHeat15 Put HOLD here
hold on
if ~isempty(TAPRecord)    
    plot(TAPRecord,Tilt,'w->','markersize',3);       
    dummy = [min(Tilt) max(Tilt)];
     if ~diff(dummy)
        dummy(1) = dummy(1)-0.05*dummy(1);
        dummy(2) = dummy(2)+0.05*dummy(2);
    end
    if ~dummy(1) & ~dummy(2)
        dummy(1) = -0.01;
        dummy(2) = 0.01;
    end
    set(gca,'ylim',[dummy(1)-0.1*diff(dummy) dummy(2)+0.1*diff(dummy)])
else
    text(AllRecords(1)+0.5*(AllRecords(end)-AllRecords(1)), ...
        0.5,['No tap file found ! Average tilt = ' num2str(Tilt) ' ^o'], ...
        'color','w', ... 
        'VerticalAlignment','middle', ...
        'horizontalalignment','center', ...
        'fontsize',10);
end
% MH SlugHeat15 Put HOLD here
hold on
RawDataFig(8,7) = line(PenetrationRecord*[1 1],get(gca,'ylim'));
set(RawDataFig(8,7),'color','g', ...
    'linestyle','--')
RawDataFig(9,7) = line(HeatPulseRecord*[1 1],get(gca,'ylim'));
set(RawDataFig(9,7),'color','r', ...
    'linestyle','--')
RawDataFig(10,7) = line(EndRecord*[1 1],get(gca,'ylim'));
set(RawDataFig(10,7),'color','c', ...
    'linestyle','--')
set(gca, ...
    'xcolor','y', ...
    'ycolor','y', ...
    'color','k', ...
    'xlim',[AllRecords(1) AllRecords(end)], ...
    'box','on', ...
    'fontsize',11, ...
    'yaxislocation','right', ...
    'xticklabel',[])
y(3) = ylabel('\bf Tilt  (^o)', ...
    'verticalalignment','top', ...
    'fontsize',10);

% Plot Depth sensor
% -----------------

axes(RawDataFig(4,2))

if ~isempty(TAPRecord)    
    plot(TAPRecord,Depth,'w-v','markersize',3);
    dummy = [min(Depth) max(Depth)];
    if ~diff(dummy)
        dummy(1) = dummy(1)-0.05*dummy(1);
        dummy(2) = dummy(2)+0.05*dummy(2);
    end
    if ~dummy(1) & ~dummy(2)
        dummy(1) = -0.01;
        dummy(2) = 0.01;
    end
    set(gca,'ylim',[dummy(1)-0.1*diff(dummy) dummy(2)+0.1*diff(dummy)])
else
    text(AllRecords(1)+0.5*(AllRecords(end)-AllRecords(1)), ...
        0.5,['No tap file found ! Average Depth = ' num2str(Depth) ' m'], ...
        'color','w', ... 
        'VerticalAlignment','middle', ...
        'horizontalalignment','center', ...
        'fontsize',10);
end
hold on
RawDataFig(11,7) = line(PenetrationRecord*[1 1],get(gca,'ylim'));
set(RawDataFig(11,7),'color','g', ...
    'linestyle','--')
RawDataFig(12,7) = line(HeatPulseRecord*[1 1],get(gca,'ylim'));
set(RawDataFig(12,7),'color','r', ...
    'linestyle','--') 
RawDataFig(13,7) = line(EndRecord*[1 1],get(gca,'ylim'));
set(RawDataFig(13,7),'color','c', ...
    'linestyle','--') 

set(gca, ...
    'xcolor','y', ...
    'ycolor','y', ...
    'color','k', ...
    'xlim',[AllRecords(1) AllRecords(end)], ...
    'box','on', ...
    'fontsize',11, ...
    'yaxislocation','right', ...
    'ydir','reverse')
y(4) = ylabel('\bf Depth  (m)', ...
    'verticalalignment','top', ...
    'fontsize',10);
xlabel('\bf Record number', ...
    'verticalalignment','top', ...
    'fontsize',12);

set(y,'units','normalized')
% MH SlugHeat15 variable 'p' is a line:
    %p(i,1:3) = get(y(i),'position');
    %
    % clear it
        p=[];
for i = 1:4
    p(i,1:3) = y(i).Position;
end
for i = 1:4
    axes(RawDataFig(i,2));
    set(y(i),'position',[max(p(:,1)) p(i,2) 0])
end

if Mode(1) ~= 3
    
    % Define uicontrols for toggling sensors plots
    % --------------------------------------------
    
    for i = 1:NumberOfSensors
        
        CallBackString = ['global RawDataFig CMap;' ...
                'if get(RawDataFig(' int2str(i) ',4),''value'');' ...
                    'set(RawDataFig(' int2str(i) ',3),''visible'',''off'');' ...
                    'set(RawDataFig(' int2str(i) ',4),''backgroundcolor'',CMap(' int2str(i) ',:)/3);' ...
                    'set(RawDataFig(' int2str(i) ',4),''tooltipstring'',' ...
                    '[''Click to toggle on plotting of sensor ' int2str(i) ''']);' ...
                'else ' ...
                    'set(RawDataFig(' int2str(i) ',3),''visible'',''on'');' ...
                    'set(RawDataFig(' int2str(i) ',4),''backgroundcolor'',CMap(' int2str(i) ',:));' ...
                    'set(RawDataFig(' int2str(i) ',4),''tooltipstring'',' ...
                    '[''Click to toggle off plotting of sensor ' int2str(i) ''']);' ...
                'end;'];
        
        % MH SlugHeat15: Removed 'clipping','off'. Change width from 0.029 to
        % 0.020
        RawDataFig(i,4) = uicontrol('style','checkbox', ...
            'backgroundcolor',CMap(i,:), ...
            'units','normalized', ...
            'position',[0.061 0.161+0.796*(i-1)/NumberOfSensors ...
                0.020 0.796/NumberOfSensors], ...
            'value',0, ...         
            'tooltipstring',['Click to toggle off plotting of' ...
                ' sensor ' int2str(i)], ...
            'callback',CallBackString);
            %'clipping','off', ...
        
    end
    
    CallBackStringAllOff = ['global RawDataFig CMap NumberOfSensors;' ...
            'for i = 1:NumberOfSensors;' ...
            'set(RawDataFig(i,4),''value'',1);' ...
            'set(RawDataFig(i,3),''visible'',''off'');' ...
            'set(RawDataFig(i,4),''backgroundcolor'',CMap(i,:)/3);' ...
            'end;'];
    
    CallBackStringAllOn = ['global RawDataFig CMap NumberOfSensors;' ...
            'for i = 1:NumberOfSensors;' ...
            'set(RawDataFig(i,4),''value'',0);' ...
            'set(RawDataFig(i,3),''visible'',''on'');' ...
            'set(RawDataFig(i,4),''backgroundcolor'',CMap(i,:));' ...
            'end;'];
    
    RawDataFig(1,5) = uicontrol('Style','pushbutton', ...
        'units','normalized', ...
        'position',[0.02 0.055 0.08 0.035], ...
        'string','All Off', ...
        'tooltipstring','Click to toggle off plotting of all sensors', ...
        'fontsize',12, ...
        'foregroundcolor','y', ...
        'backgroundcolor',[0.15 0.15 0.15], ...
        'callback',CallBackStringAllOff);
    
    RawDataFig(2,5) = uicontrol('Style','pushbutton', ...
        'units','normalized', ...
        'position',[0.1 0.055 0.08 0.035], ...
        'string','All On', ...
        'tooltipstring','Click to toggle on plotting of all sensors', ...
        'fontsize',12, ...
        'backgroundcolor',[0.15 0.15 0.15], ...
        'foregroundcolor','y', ...
        'callback',CallBackStringAllOn);
   
end

% Print and Save buttons
% ----------------------

axes(RawDataFig(6,2))
RawDataFig(1,6) = text(0.5,1,['\bf' ResName], ...
    'verticalalignment','top', ...
    'horizontalalignment','center', ...
    'fontsize',16);
RawDataFig(2,6) = text(0,0.3,['Results: ' pwd '/' ResName '.res'], ...
    'verticalalignment','bottom', ...
    'horizontalalignment','left', ...
    'fontsize',9);
RawDataFig(3,6) = text(0,0,['Penetration: ' PenFile], ...
    'verticalalignment','bottom', ...
    'horizontalalignment','left', ...
    'fontsize',9);
RawDataFig(4,6) = text(1,0,['Processed: ' FORMATTIME], ...
    'verticalalignment','bottom', ...
    'horizontalalignment','right', ...
    'fontsize',9);

set(RawDataFig(6,2),'visible','off');
set(RawDataFig(1:4,6),'visible','off')

if Mode(1) ~= 3
    
    CallBackPrintString = ['global RawDataFig; ' ...
            'set(RawDataFig(1:4,6),''visible'',''on''); ' ...
            'print -dps -noui -f' num2str(RawDataFig(1,1)) '; ' ...
            'set(RawDataFig(1:4,6),''visible'',''off''); ' ...
            'refresh'];
    RawDataFig(3,5) = uicontrol('Style','pushbutton', ...
        'units','normalized', ...
        'position',[0.02 0.02 0.08 0.035], ...
        'string','Print', ...
        'tooltipstring','Click to send this figure to your default printer (B&W)', ...
        'fontsize',12, ...
        'backgroundcolor',[0.15 0.15 0.15], ...
        'foregroundcolor','y', ...
        'callback',CallBackPrintString);
    CallBackSaveString = ['global RawDataFig ResName; ' ...
        'ScreenSize = get(0,''screensize''); ' ...
        'ScreenSize(4) = ScreenSize(4)*0.95; ' ...
        'set(RawDataFig(1:4,6),''visible'',''off''); ' ...
        'PrintName = char(inputdlg(' ...
        '{''Enter file name:''},' ...
        '''Tiff file name'',' ...
        '[1 48],{[''01_'' ResName ''_RawData.tiff'']})); ' ...
        'pause(1); ' ...
        'eval([''screencapture(0,''''position'''', ScreenSize ,'''''',PrintName,'''''');'']);' ...
        'set(RawDataFig(1:4,6),''visible'',''off''); ' ...
        'set(RawDataFig(1:5,2),''xcolor'',''y'',''ycolor'',''y''); ' ...
        'refresh'];
    
    RawDataFig(4,5) = uicontrol('Style','pushbutton', ...
        'units','normalized', ...
        'position',[0.1 0.02 0.08 0.035], ...
        'string','Screengrab', ...
        'fontsize',12, ...
        'backgroundcolor',[0.15 0.15 0.15], ...
        'foregroundcolor','y', ...
        'callback',CallBackSaveString);
    
    
    % Parameters buttons
    % ------------------
    
    % Data window
    % -----------
        
    CallBackPenRecString = ['global RawDataFig PenetrationRecord EndRecord AllRecords;' ...
            'dummy = str2num(get(RawDataFig(5,5),''string''));' ...
            'if ~isempty(dummy) & dummy>=AllRecords(1) & dummy<EndRecord;' ...
            'PenetrationRecord = dummy;' ...
            'save SlugHeat15Temp PenetrationRecord -append;' ...
            'set(RawDataFig(5,5),''userdata'',''Modified'');' ...
            'else;' ...
            'set(RawDataFig(5,5),''string'',PenetrationRecord);' ...
            'end;' ...
            'set(RawDataFig([1 5 8 11],7),''XData'',PenetrationRecord*[1 1]);'];
    
    CallBackPulseRecString = ['global RawDataFig PenetrationRecord HeatPulseRecord EndRecord AllRecords;' ...
            'dummy = str2num(get(RawDataFig(6,5),''string''));' ...
            'if (~isempty(dummy) & dummy>=PenetrationRecord & dummy<EndRecord) | ~dummy;' ...
            'HeatPulseRecord = dummy;' ...
            'save SlugHeat15Temp HeatPulseRecord -append;' ...
            'set(RawDataFig(6,5),''userdata'',''Modified'');' ...
            'else;' ...
            'set(RawDataFig(6,5),''string'',HeatPulseRecord);' ...
            'end;' ...
            'set(RawDataFig([2 6 9 12],7),''XData'',HeatPulseRecord*[1 1]);'];
    
    
    CallBackEndRecString = ['global RawDataFig PenetrationRecord HeatPulseRecord EndRecord AllRecords;' ...
            'dummy = str2num(get(RawDataFig(7,5),''string''));' ...
            'if ~isempty(dummy) & dummy>=PenetrationRecord & dummy<EndRecord;' ...
            'EndRecord = dummy;' ...
            'save SlugHeat15Temp EndRecord -append;' ...
            'set(RawDataFig(7,5),''userdata'',''Modified'');' ...
            'else;' ...
            'set(RawDataFig(7,5),''string'',EndRecord);' ...
            'end;' ...
            'set(RawDataFig([3 7 10 13],7),''XData'',EndRecord*[1 1]);'];
    
    % MH 09.24.2014
    PenRecString = uicontrol('Style','text', ...
        'units','normalized', ...
        'position',[0.2 0.02+0.035 0.06 0.035],...
        'string','Pen #', ...
        'fontsize',12, ...
        'backgroundcolor',[0.25 0.25 0.25], ...
        'foregroundcolor','w', ...
        'userdata','Default');
    
    RawDataFig(5,5) = uicontrol('Style','edit', ...
        'units','normalized', ...
        'position',[0.2 0.02 0.06 0.035], ...
        'string',PenetrationRecord, ...
        'tooltipstring','Current Penetration Record.  Click to edit. Must be within Data bounds !', ...
        'fontsize',12, ...
        'backgroundcolor',[0.15 0.15 0.15], ...
        'foregroundcolor','g', ...
        'userdata','Default', ...
        'callback',CallBackPenRecString);
    
     % MH 09.24.2014
    PulseRecString = uicontrol('Style','text', ...
        'units','normalized', ...
        'position',[0.26 0.02+0.035 0.06 0.035],...
        'string','Heat #', ...
        'fontsize',12, ...
        'backgroundcolor',[0.25 0.25 0.25], ...
        'foregroundcolor','w', ...
        'userdata','Default');
    
    RawDataFig(6,5) = uicontrol('Style','edit', ...
        'units','normalized', ...
        'position',[0.26 0.02 0.06 0.035], ...
        'string',HeatPulseRecord, ...
        'tooltipstring',['Current Heat Pulse Record.  Click to edit. ' ...
            'Must be within Data bounds and come after the Pen record !'], ...
        'fontsize',12, ...
        'backgroundcolor',[0.15 0.15 0.15], ...
        'foregroundcolor','r', ...
        'userdata','Default', ...
        'callback',CallBackPulseRecString);
    
    if ~PulseData
        set(RawDataFig(6,5),'enable','off')
        HeatPulseRecord = 0;
    end
    
    % MH 09.24.2014
    EndRecString = uicontrol('Style','text', ...
        'units','normalized', ...
        'position',[0.32 0.02+0.035 0.06 0.035],...
        'string','End #', ...
        'fontsize',12, ...
        'backgroundcolor',[0.25 0.25 0.25], ...
        'foregroundcolor','w', ...
        'userdata','Default');
    
    RawDataFig(7,5) = uicontrol('Style','edit', ...
        'units','normalized', ...
        'position',[0.32 0.02 0.06 0.035], ...
        'string',EndRecord, ...
        'tooltipstring',['Current End of Record.  Click to edit. ' ...
            'Must be within Data bounds and come after the Pen record !'], ...
        'fontsize',12, ...
        'backgroundcolor',[0.15 0.15 0.15], ...
        'foregroundcolor','c', ...
        'userdata','Default', ...
        'callback',CallBackEndRecString);
    
    
    % Tau Windows
    % -----------
    
    CallBackFricTauMinString = ['global RawDataFig FricTauMin FricTauMax;' ...
            'dummy = str2num(get(RawDataFig(8,5),''string''));' ...
            'if ~isempty(dummy) & dummy>=0 & dummy<FricTauMax;' ...
            'FricTauMin = dummy;' ...
            'save SlugHeat15Temp FricTauMin -append;' ...
            'set(RawDataFig(8,5),''userdata'',''Modified'');' ...
            'else;' ...
            'set(RawDataFig(8,5),''string'',FricTauMin);' ...
            'end;'];
    
    CallBackFricTauMaxString = ['global RawDataFig FricTauMin FricTauMax;' ...
            'dummy = str2num(get(RawDataFig(9,5),''string''));' ...
            'if ~isempty(dummy) & dummy>=FricTauMin;' ...
            'FricTauMax = dummy;' ...
            'save SlugHeat15Temp FricTauMax -append;' ...
            'set(RawDataFig(9,5),''userdata'',''Modified'');' ...
            'else;' ...
            'set(RawDataFig(9,5),''string'',FricTauMax);' ...
            'end;'];
    
    CallBackPulseTauMinString = ['global RawDataFig PulseTauMin PulseTauMax;' ...
            'dummy = str2num(get(RawDataFig(10,5),''string''));' ...
            'if ~isempty(dummy) & dummy>=0 & dummy<PulseTauMax;' ...
            'PulseTauMin = dummy;' ...
            'save SlugHeat15Temp PulseTauMin -append;' ...
            'set(RawDataFig(10,5),''userdata'',''Modified'');' ...
            'else;' ...
            'set(RawDataFig(10,5),''string'',PulseTauMin);' ...
            'end;'];
    
    CallBackPulseTauMaxString = ['global RawDataFig PulseTauMin PulseTauMax;' ...
            'dummy = str2num(get(RawDataFig(11,5),''string''));' ...
            'if ~isempty(dummy) & dummy>=PulseTauMin;' ...
            'PulseTauMax = dummy;' ...
            'save SlugHeat15Temp PulseTauMax -append;' ...
            'set(RawDataFig(11,5),''userdata'',''Modified'');' ...
            'else;' ...
            'set(RawDataFig(11,5),''string'',PulseTauMax);' ...
            'end;'];
    
    % MH 09.24.2014
    FricTauMinString = uicontrol('Style','text', ...
        'units','normalized', ...
        'position',[0.40 0.02+0.035 0.04 0.035],...
        'string','Tau Min (fric)', ...
        'fontsize',12, ...
        'backgroundcolor',[0.25 0.25 0.25], ...
        'foregroundcolor','w', ...
        'userdata','Default');
    
    RawDataFig(8,5) = uicontrol('Style','edit', ...
        'units','normalized', ...
        'position',[0.4 0.02 0.04 0.035], ...
        'string',FricTauMin, ...
        'tooltipstring','Current Minimum Tau for the Penetration decay.  Click to edit. Must be positive !', ...
        'fontsize',12, ...
        'backgroundcolor',[0.15 0.15 0.15], ...
        'foregroundcolor','g', ...
        'userdata','Default', ...
        'callback',CallBackFricTauMinString);
    
    % MH 09.24.2014
    FricTauMaxString = uicontrol('Style','text', ...
        'units','normalized', ...
        'position',[0.44 0.02+0.035 0.04 0.035],...
        'string','Tau Max (fric)', ...
        'fontsize',12, ...
        'backgroundcolor',[0.25 0.25 0.25], ...
        'foregroundcolor','w', ...
        'userdata','Default');
    
    RawDataFig(9,5) = uicontrol('Style','edit', ...
        'units','normalized', ...
        'position',[0.44 0.02 0.04 0.035], ...
        'string',FricTauMax, ...
        'tooltipstring','Current maximum Tau for the Penetration decay.  Click to edit.', ...
        'fontsize',12, ...
        'backgroundcolor',[0.15 0.15 0.15], ...
        'foregroundcolor','r', ...
        'userdata','Default', ...
        'callback',CallBackFricTauMaxString);
    
    % MH 09.24.2014
    PulseTauMinString = uicontrol('Style','text', ...
        'units','normalized', ...
        'position',[0.48 0.02+0.035 0.04 0.035],...
        'string','Tau Min (pulse)', ...
        'fontsize',12, ...
        'backgroundcolor',[0.25 0.25 0.25], ...
        'foregroundcolor','w', ...
        'userdata','Default');
    
    RawDataFig(10,5) = uicontrol('Style','edit', ...
        'units','normalized', ...
        'position',[0.48 0.02 0.04 0.035], ...
        'string',PulseTauMin, ...
        'tooltipstring','Current Minimum Tau for the heat pulse decay.  Click to edit. Must be positive !', ...
        'fontsize',12, ...
        'backgroundcolor',[0.15 0.15 0.15], ...
        'foregroundcolor','g', ...
        'userdata','Default', ...
        'callback',CallBackPulseTauMinString);
    
    % MH 09.24.2014
    PulseTauMaxString = uicontrol('Style','text', ...
        'units','normalized', ...
        'position',[0.52 0.02+0.035 0.04 0.035],...
        'string','Tau Max (pulse)', ...
        'fontsize',12, ...
        'backgroundcolor',[0.25 0.25 0.25], ...
        'foregroundcolor','w', ...
        'userdata','Default');
    
    RawDataFig(11,5) = uicontrol('Style','edit', ...
        'units','normalized', ...
        'position',[0.52 0.02 0.04 0.035], ...
        'string',PulseTauMax, ...
        'tooltipstring','Current maximum Tau for the heat pulse decay.  Click to edit.', ...
        'fontsize',12, ...
        'backgroundcolor',[0.15 0.15 0.15], ...
        'foregroundcolor','r', ...
        'userdata','Default', ...
        'callback',CallBackPulseTauMaxString);
    
    if ~PulseData
        set(RawDataFig(10:11,5),'enable','off')
    end
    
    
    % Sensors to Use
    % --------------
    
    CallBackSensorsString = ['global RawDataFig SensorsToUse NumberOfSensors;' ...
            'dummy = str2num(get(RawDataFig(12,5),''string''));' ...
            'if ~isempty(dummy) & min(dummy)>0 & max(dummy)<=NumberOfSensors & isempty(find(~diff(dummy)));' ...
            'SensorsToUse = sort(dummy);' ...      
            'save SlugHeat15Temp SensorsToUse -append;' ...
            'set(RawDataFig(12,5),''userdata'',''Modified'');' ...
            'end;' ...
            'set(RawDataFig(12,5),''string'',num2str(SensorsToUse));'];
    
    % MH 09.24.2014
    SensorsDisplayString = uicontrol('Style','text', ...
        'units','normalized', ...
        'position',[0.58 0.02+0.035 0.25 0.035],...
        'string','Sensors: 1 (tip) to 11 (stand) ', ...
        'fontsize',12, ...
        'backgroundcolor',[0.25 0.25 0.25], ...
        'foregroundcolor','w', ...
        'userdata','Default');
    
    RawDataFig(12,5) = uicontrol('Style','edit', ...
        'units','normalized', ...
        'position',[0.58 0.02 0.25 0.035], ...
        'string',num2str(sort(SensorsToUse)), ...
        'tooltipstring','Current Sensors To be Used.  Click to edit.', ...
        'fontsize',12, ...
        'backgroundcolor',[0.15 0.15 0.15], ...
        'foregroundcolor','w', ...
        'userdata','Default', ...
        'callback',CallBackSensorsString);
    
    
    % Convergence criteria
    % --------------------
    
    CallBackMaxIterString = ['global RawDataFig MaxNumberOfIterations;' ...
            'dummy = str2num(get(RawDataFig(13,5),''string''));' ...
            'if ~isempty(dummy) & dummy>1;' ...
            'MaxNumberOfIterations = dummy;' ...
            'save SlugHeat15Temp MaxNumberOfIterations -append;' ...
            'set(RawDataFig(13,5),''userdata'',''Modified'');' ...
            'end;' ...
            'set(RawDataFig(13,5),''string'',MaxNumberOfIterations);'];
    
    % MH 09.24.2014
    DisplayMaxIterString = uicontrol('Style','text', ...
        'units','normalized', ...
        'position',[0.85 0.02+0.035 0.06 0.035],...
        'string','Max Iterations', ...
        'fontsize',12, ...
        'backgroundcolor',[0.25 0.25 0.25], ...
        'foregroundcolor','w', ...
        'userdata','Default');
    
    RawDataFig(13,5) = uicontrol('Style','edit', ...
        'units','normalized', ...
        'position',[0.85 0.02 0.06 0.035], ...
        'string',MaxNumberOfIterations, ...
        'tooltipstring','Maximum Number of Iterations.  Click to edit.', ...
        'fontsize',12, ...
        'backgroundcolor',[0.15 0.15 0.15], ...
        'foregroundcolor','w', ...
        'userdata','Default', ...
        'callback',CallBackMaxIterString);
    
    CallBackMinTotalkString = ['global RawDataFig MinTotalkChange;' ...
            'dummy = str2num(get(RawDataFig(14,5),''string''));' ...
            'if ~isempty(dummy) & dummy>=0;' ...
            'MinTotalkChange = dummy;' ...
            'save SlugHeat15Temp MinTotalkChange -append;' ...
            'set(RawDataFig(14,5),''userdata'',''Modified'');' ...
            'end;' ...
            'set(RawDataFig(14,5),''string'',MinTotalkChange);'];
    
    % MH 09.24.2014
    DisplayMinTotalkString = uicontrol('Style','text', ...
        'units','normalized', ...
        'position',[0.91 0.02+0.035 0.06 0.035],...
        'string','Min Total K Delta', ...
        'fontsize',12, ...
        'backgroundcolor',[0.25 0.25 0.25], ...
        'foregroundcolor','w', ...
        'userdata','Default');
    
    RawDataFig(14,5) = uicontrol('Style','edit', ...
        'units','normalized', ...
        'position',[0.91 0.02 0.06 0.035], ...
        'string',MinTotalkChange, ...
        'tooltipstring','Minimum Total Change in Conductivity.  Click to edit.', ...
        'fontsize',12, ...
        'backgroundcolor',[0.15 0.15 0.15], ...
        'foregroundcolor','w', ...
        'userdata','Default', ...
        'callback',CallBackMinTotalkString);
    
end

zoom on
drawnow

if Mode(1) == 3
    
    set(RawDataFig(1:4,6),'visible','on');
    set(RawDataFig(1:5,2),'xcolor','k','ycolor','k');
    PrintName = [ResName '_RawData.ps'];
    eval(['print -dpsc -noui -f' num2str(RawDataFig(1,1)) ' ' PrintName]);
    set(RawDataFig(1:4,6),'visible','off');
    set(RawDataFig(1:5,2),'xcolor','y','ycolor','y');
    refresh  
    
end

% ==========================================================================
% 
% -----   MONITOR  -----
%
% ==========================================================================


function MonitorFig = MONITOR(TStack,kStack,NumberOfSensors)

global MonitorFig
global PulseData Iteration FirstIteration TotalIterations
global FigSpace
global CMap SensorsToUse

if (~nargin & TotalIterations == 1)
    
    MonitorFig(1) = figure( ...
        'menubar',	'none', ...
        'numbertitle','off', ...
        'position',	FigSpace, ...
        'color',		[0.25 0.25 0.25], ...
        'name',		['C - Convergence monitoring']);
    return
    
elseif ~nargin
    
    return
    
end

if TotalIterations == 1
    
    figure(MonitorFig(1))
    MonitorFig(2) = axes('position',[0.1 0.52 0.35 0.38]);
    MonitorFig(3) = axes('position',[0.5 0.52 0.35 0.38]);
    MonitorFig(4) = axes('position',[0.1 0.1 0.35 0.38]);
    MonitorFig(5) = axes('position',[0.5 0.1 0.35 0.38]);
    MonitorFig(6) = axes('position',[0.94 0.1 0.02 0.8]);
    
else
    
    figure(MonitorFig(1))
    
end

% Colorbar legend
% ---------------

axes(MonitorFig(6))
cla
colormap(CMap)
colorbar(MonitorFig(6))
caxis([1 NumberOfSensors])

set(MonitorFig(6), ...
    'xcolor',		'y', ...
    'ycolor',		'y', ...
    'ylim',		[1 NumberOfSensors+1], ...
    'ytick',		[1.5:NumberOfSensors+0.5], ...
    'yticklabel',[1:NumberOfSensors], ...
    'ticklength',[0 0])
ylabel('\bf Sensor Number', ...
    'verticalalignment','top')

% Now the rest
% ------------

s = size(TStack);

axes(MonitorFig(2));
p = semilogy([1:TotalIterations],TStack,'-x','markersize',4);
for i=1:NumberOfSensors
    set(p(i),'color',CMap(i,:))
end
title('\fontsize{12} \bf Asymptotic Sediment Temperature T', ...
    'color','w', ...
    'verticalalignment','bottom');
ylabel('Change for each sensor n, \DeltaT_n=\midT_{i}(n)-T_{i-1}(n)\mid', ...
    'verticalalignment','bottom');

axes(MonitorFig(3));
p = semilogy([1:TotalIterations],kStack,'-o','markersize',4);
for i=1:NumberOfSensors
    set(p(i),'color',CMap(i,:))
end

cas =0

%if PulseData
%   title('\fontsize{12} \bf In-situ conductivity, k (calculated from the heat pulse)', ...
%      'color','w', ...
%      'verticalalignment','bottom');
%else
%   title('\fontsize{12} \bf In-situ conductivity, k (assumed from regional function)', ...
%      'color','w', ...
%      'verticalalignment','bottom');
%end   
%ylabel('Change for each sensor n, \Deltak_n=\midk_{i}(n)-k_{i-1}(n)\mid', ...
%   'verticalalignment','top');

cas =1
Dim = size(kStack);
kNoNaN = kStack(find(~isnan(kStack)));
TNoNaN = TStack(find(~isnan(kStack)));
ST = sum(reshape(TNoNaN,[Dim(1) length(TNoNaN)/Dim(1)]),2);
Sk = sum(reshape(kNoNaN,[Dim(1) length(kNoNaN)/Dim(1)]),2);

axes(MonitorFig(4));
semilogy([1:TotalIterations],ST,'w-x')
xlabel('Total number of iteration, i', ...
    'verticalalignment','top','color','y');
ylabel('Total change, \Sigma (\DeltaT_n)', ...
    'verticalalignment','bottom','color','y');

axes(MonitorFig(5));
semilogy([1:TotalIterations],Sk,'w-o')
xlabel('Total number of iteration, i', ...
    'verticalalignment','top','color','y');
ylabel('Total change, \Sigma (\Deltak_n)', ...
    'verticalalignment','top','color','y');

set(MonitorFig([2:5]),'xcolor','y', ...
    'ycolor','y', ...
    'color','k', ...
    'fontsize',12)

if TotalIterations>1
    set(MonitorFig([2:5]),'xlim',[1 TotalIterations])
end
set(MonitorFig([2 4]),'xtick',[1:length(TStack)])
set(MonitorFig([3 5]),'xtick',[1:length(kStack)])
set(MonitorFig([2 3]),'xticklabel',[])
set(MonitorFig([3 5]),'yaxislocation','right')

drawnow   


% ==========================================================================
%
% -----   FRICTIONAL   -----
%
% ==========================================================================

function [ ...
        NumberOfUsedPoints, ...
        MinimumEqTemp, ...
        MinimumError, ...
        MinimumDelays, ...
        MinimumSlope ...
] = FRICTIONAL( ...
    FrictionalTime, ...
    FrictionalTemperature, ...
    NumberOfSensors, ...
    InitialDelays, ...
    MaxStep, ...
    TimeInc, ...
    k, ...
    HyndmanCoeffs, ...
    SensorRadius, ...
    TauMin, ...
    TauMax, ...
    Mode, ...
    UseFrictional);

global FrictionalFig FigSpace
global Trial Iteration
global CMap StatusText StatusString
global Tau00Data FAT00
global SensorsToUse
global PenFile ResName

% Initialization
% --------------

NumberOfSensorsUsed = length(SensorsToUse);

DataTime = repmat(FrictionalTime,1,NumberOfSensorsUsed);
DataTemp = NaN*ones(size(FrictionalTemperature(:,SensorsToUse)));
HC = HyndmanCoeffs;
Kappa = 1e-6*k(SensorsToUse)./(HC(1) ...
    - HC(2)*k(SensorsToUse) ...
    + HC(3)*k(SensorsToUse).^2);
Kappa = repmat(Kappa,length(FrictionalTime),1);
%
% AF 9/02  If statement added to handle negative Kappa values. These are bogus
%          but they can be created if there are thermistors that don't penetrate,
%          and iteration using these values results in negative conductivities.
%          It would be ideal to modify this later so that negative k values are 
%          are trapped and reset to initial values. 
%
LowestK=min(min(Kappa));
if LowestK < 0
    msgbox('Error during iteration. Exit SlugHeat15 and reopen pen file, then eliminate bad thermistor. ','Negative conductivity detected!')
    pause;
    clc;
    clf reset;
    close all hidden;
    clear all;
    clear global;
    more off;
    echo off all;
    fclose('all');
end
%
DataTau = Kappa.*DataTime/SensorRadius.^2;
Tau00Index = [1:Tau00Data(3)/Tau00Data(2)];

if exist('UseFrictional')
    Mode = [3 0];
end

% Truncate Data to selected Tau window
% ------------------------------------

[i,j] = find(DataTau > TauMin & DataTau < TauMax);
DataTemp(i,j) = FrictionalTemperature(i,SensorsToUse(j)');

% Compute time shifts
% -------------------

TimeShifts = repmat(InitialDelays(SensorsToUse),[MaxStep 1]) ...
    + repmat(TimeInc*[1:MaxStep]',[1 NumberOfSensorsUsed]);

ShiftedTime = repmat(InitialDelays(SensorsToUse),[length(FrictionalTime) 1 MaxStep]) ...
    + repmat(FrictionalTime,[1 NumberOfSensorsUsed MaxStep]) ...
    + repmat(permute(TimeInc*[1:MaxStep],[3 1 2]),[length(FrictionalTime) NumberOfSensorsUsed 1]);

% Compute TauData
% ---------------

dummy = repmat(Kappa,[1 1 MaxStep]);
ShiftedTau = dummy.*ShiftedTime/SensorRadius^2;
ShiftedTauIndex = round(ShiftedTau/Tau00Data(2));

ShiftedTauIndex(ShiftedTauIndex > Tau00Data(3)/Tau00Data(2)) = length(FAT00) + 1;
ShiftedTauIndex(ShiftedTauIndex < 1) = length(FAT00) + 2;
FAT00(end+1) = 9;
FAT00(end+1) = NaN;

DataFAT = FAT00(ShiftedTauIndex);
iDF = find(DataFAT>8);
DataFAT(iDF) = 1./(4*ShiftedTau(iDF))-1./(8*ShiftedTau(iDF).^2);
DataTemp = repmat(DataTemp,[1 1 MaxStep]);

% Compute chi-square fits
% -----------------------

[ix,jx] = find(~isnan(DataFAT));
[iy,jy] = find(~isnan(DataTemp));

DataLimits = [max([min(ix) min(iy)]) min([max(ix) max(iy)])];
NumberOfUsedPoints = 1+diff(DataLimits);
clear ix iy jx jy

X = reshape(DataFAT(DataLimits(1):DataLimits(2),:,:), ...
    [NumberOfUsedPoints NumberOfSensorsUsed*MaxStep]);
Y = reshape(DataTemp(DataLimits(1):DataLimits(2),:,:), ...
    [NumberOfUsedPoints NumberOfSensorsUsed*MaxStep]);

clear ix jx iy jy
[a,b,Sigmaa,Sigmab,Chi2] = CHI2FIT(X,Y);
clear X Y

a = reshape(a,[NumberOfSensorsUsed MaxStep]);
b = reshape(b,[NumberOfSensorsUsed MaxStep]);
Sigmaa = reshape(Sigmaa,[NumberOfSensorsUsed MaxStep]);
Sigmab = reshape(Sigmab,[NumberOfSensorsUsed MaxStep]);

Chi2 = reshape(Chi2,[NumberOfSensorsUsed MaxStep]);
RMS = sqrt(Chi2/(NumberOfUsedPoints/2));

% Compute Errors and Standard deviation
% -------------------------------------

MinimumError = NaN*ones(NumberOfSensors,1);
MinimumDelays = NaN*ones(NumberOfSensors,1);
MinimumEqTemp = NaN*ones(NumberOfSensors,1);
MinimumSlope = NaN*ones(NumberOfSensors,1);

[dummy,IndexOfMinimums] = min(2*RMS,[],2);
MinimumError(SensorsToUse) = dummy;
MinimumDelays(SensorsToUse) = diag(TimeShifts(IndexOfMinimums,:));    
MinimumEqTemp(SensorsToUse) = diag(a(:,IndexOfMinimums));
MinimumSlope(SensorsToUse) = diag(b(:,IndexOfMinimums));

% Plotting
% --------

if Mode(1) ~= 2
    
    if ~(all(Mode == [3 0]) | all(Mode == [3 1]) | all(Mode == [3 3]) ...
            | all(Mode == [3 4]) | all(Mode == [3 5]))
                
        % MH SlugHeat15 Comment out closing the Frictional Figure    
        %if (Trial >= 1 && Iteration >1)
        %    close(FrictionalFig(1,1,Trial,Iteration-1))
        %end
        
        % MH ROQ 15 Create Single FrictionalFig (rather than recreating
        % with each iteration. Comment out original and set new to 
        % FrictionalFig(1,1,1,1)
        %
        % All this is put into a single if / end loop for the first time
        % through
        %
        %FrictionalFig(1,1,Trial,Iteration) = figure( ...
        %    'position', [FigSpace], ...
        %    'color',[0.25 0.25 0.25], ...
        %    'MenuBar','none', ...
        %    'numbertitle','off', ...
        %    'Name',['D - Frictional Decay Reduction - Trial ' ...
        %        int2str(Trial) ' - Iteration ' int2str(Iteration)]);
        %orient landscape;
        %
        %if (Trial<=1 && Iteration<1)
        if (Trial==1 && Iteration==1)
            FrictionalFig(1,1,1,1) = figure( ...
                'position', [FigSpace], ...
                'color',[0.25 0.25 0.25], ...
                'MenuBar','none', ...
                'numbertitle','off', ...
                'Name',['D - Frictional Decay Reduction - Trial ' ...
                    int2str(Trial) ' - Iteration ' int2str(Iteration)]);
            orient landscape;
        
        % MH SlugHeat15 TO DO: SET COLORS AND COLORBAR THE SAME AS IN THE MAIN
        % RAWDATAFIG(5,2)
        %
        
        % MH SlugHeat15: Force Single FrictionalFig
        %
        %FrictionalFig(1,2,Trial,Iteration) = axes('position',[0.18 0.60 0.34 0.36],'color','k');
        %FrictionalFig(2,2,Trial,Iteration) = axes('position',[0.57 0.60 0.34 0.36],'color','k');
        %FrictionalFig(3,2,Trial,Iteration) = axes('position',[0.18 0.16 0.34 0.36],'color','k');
        %FrictionalFig(4,2,Trial,Iteration) = axes('position',[0.57 0.16 0.34 0.36],'color','k');
        %FrictionalFig(5,2,Trial,Iteration) = axes('position',[0.06 0.16 0.03 0.80],'color',[0.25 0.25 0.25]);
        %FrictionalFig(6,2,Trial,Iteration) = axes('position',[0.02 0.01 0.96 0.06],'visible','off');
            FrictionalFig(1,2,1,1) = axes('position',[0.18 0.60 0.34 0.36],'color','k');
            FrictionalFig(2,2,1,1) = axes('position',[0.57 0.60 0.34 0.36],'color','k');
            FrictionalFig(3,2,1,1) = axes('position',[0.18 0.16 0.34 0.36],'color','k');
            FrictionalFig(4,2,1,1) = axes('position',[0.57 0.16 0.34 0.36],'color','k');
            FrictionalFig(5,2,1,1) = axes('position',[0.06 0.16 0.03 0.80],'color',[0.25 0.25 0.25]);
            FrictionalFig(6,2,1,1) = axes('position',[0.02 0.01 0.96 0.06],'visible','off');
        
            
        % Sensor colorbar
        % ---------------
        
        % MH SlugHeat15 Single FrictionalFig
        %axes(FrictionalFig(5,2,Trial,Iteration))
            axes(FrictionalFig(5,2,1,1))
            colormap(CMap)
        % MH SlugHeat15 Comment out color bar
        %colorbar(FrictionalFig(5,2,Trial,Iteration))
            caxis([1 NumberOfSensors])
        
        % MH SlugHeat15 turn remove 'xcolor','y' and replace with background [0.25 0.25 0.25]
        %set(FrictionalFig(5,2,Trial,Iteration), ...
            set(FrictionalFig(5,2,1,1), ...
                'xcolor',[0.25 0.25 0.25], ...
                'ycolor','y', ...
                'ytick',[1.5:NumberOfSensors+0.5], ...
                'ylim',[1 NumberOfSensors+1], ...
                'yticklabel',[1:NumberOfSensors], ...
                'yaxislocation','left', ...
                'xtick',[], ...
                'ticklength',[0 0])

            ylabel('\bf Sensor Number', ...
                'verticalalignment','bottom', ...
                'fontsize',12)
            
            % MH SlugHeat15 END FRICTIONALFIG SINGLE FIGURE
        end
        
        % MH SlugHeat15 Update Single Figure Name with Trial and Iteration
        set(FrictionalFig(1,1,1,1),'Name',...
            ['D - Frictional Decay Reduction - Trial ' ...
                    int2str(Trial) ' - Iteration ' int2str(Iteration)]);
        
        % Begin plots
        % -----------
        
        % MH SlugHeat15 FrictionalFig Single Figure
        %axes(FrictionalFig(1,2,Trial,Iteration))
        axes(FrictionalFig(1,2,1,1))
        cla;
        hold on;
        n=1;
        % MH SlugHeat15 add Hold ON
        hold on
        for i = SensorsToUse
            %FrictionalFig(i,3,Trial,Iteration) = plot( ...
            FrictionalFig(i,3,1,1) = plot( ...
                ShiftedTime(:,n,IndexOfMinimums(n)), ...
                DataTemp(:,n,IndexOfMinimums(n)),'-o', ...
                'color',CMap(i,:), ...
                'markersize',3);
            hold on  
            n=n+1;
        end
        xlabel('\bfTime (s)','fontsize',12,'verticalalignment','top')
        ylabel('\bfTemperature ( ^oC)','fontsize',12,'verticalalignment','bottom')
        set(gca,'xlim',[FrictionalTime(1)+min(min(TimeShifts)) ...
                FrictionalTime(end)+max(max(TimeShifts))])
            
        % MH SlugHeat15 FrictionalFig Single Figure
        %FrictionalFig(1:4,11,Trial,Iteration) = axis';
        FrictionalFig(1:4,11,1,1) = axis';
        ax = axis;
        line([FrictionalTime(1) FrictionalTime(1)],[ax(3) ax(4)],'linestyle','--','color','g')
        line([FrictionalTime(end) FrictionalTime(end)],[ax(3) ax(4)],'linestyle','--','color','r')
        
        % MH SlugHeat15 FrictionalFig Single Figure
        %axes(FrictionalFig(2,2,Trial,Iteration))
        axes(FrictionalFig(2,2,1,1))
        % MH SlugHeat15 add Hold ON
        cla
        hold on
        n=1;
        for i = SensorsToUse
            %FrictionalFig(i,4,Trial,Iteration) = plot( ...
            FrictionalFig(i,4,1,1) = plot( ...
                ShiftedTau(:,n,IndexOfMinimums(n)),DataTemp(:,n,IndexOfMinimums(n)),'-o', ...
                'color',CMap(i,:), ...
                'markersize',3);
            hold on
            n=n+1;
        end
        xlabel('\tau','fontsize',16,'verticalalignment','top')
        ylabel('\bfTemperature ( ^oC)','fontsize',12,'verticalalignment','top')
        set(gca,'yaxislocation','right')
        
        % MH SlugHeat15 FrictionalFig Single Figure
        %FrictionalFig(1:4,12,Trial,Iteration) = axis';
        FrictionalFig(1:4,12,1,1) = axis';
        ax = axis;
        line([TauMin TauMin],[ax(3) ax(4)],'linestyle',':','color','y')
        line([TauMax TauMax],[ax(3) ax(4)],'linestyle',':','color','y')
        
        % MH SlugHeat15 FrictionalFig Single Figure
        %axes(FrictionalFig(3,2,Trial,Iteration))
        axes(FrictionalFig(3,2,1,1))
        % MH SlugHeat15 add Hold ON
        cla
        hold on
        n=1;
        for i = SensorsToUse
            % MH SlugHeat15 FrictionalFig Single Figure
            %FrictionalFig(i,5,Trial,Iteration) = plot( ...
            FrictionalFig(i,5,1,1) = plot( ...
                DataFAT(:,n,IndexOfMinimums(n)),DataTemp(:,n,IndexOfMinimums(n)),'d', ...
                'color',CMap(i,:), ...
                'markersize',4);
            hold on
            %FrictionalFig(i,6,Trial,Iteration) = plot([0 DataFAT(DataLimits(1),n,IndexOfMinimums(n))], ...
            FrictionalFig(i,6,1,1) = plot([0 DataFAT(DataLimits(1),n,IndexOfMinimums(n))], ...
                b(n,IndexOfMinimums(n))*[0 DataFAT(DataLimits(1),n,IndexOfMinimums(n))] + a(n,IndexOfMinimums(n)), ...
                'color',CMap(i,:));
            n=n+1;
        end
        xlabel('\bfF(2,\rm\fontsize{16}\tau\bf\fontsize{12})','fontsize',12,'verticalalignment','top')
        ylabel('\bfTemperature ( ^oC)','fontsize',12,'verticalalignment','bottom')
        PlotLims = [0 ...
                max(diag(squeeze((DataFAT(DataLimits(1),:,IndexOfMinimums))))) ...
                min([MinimumEqTemp;min(min(min(DataTemp)))]) ...
                max([MinimumEqTemp;max(max(max(DataTemp)))])];
        
        PlotLims(2) = PlotLims(2)+PlotLims(2)/20;
        PlotLims(3) = PlotLims(3)-(PlotLims(4)-PlotLims(3))/20;
        PlotLims(4) = PlotLims(4)+(PlotLims(4)-PlotLims(3))/20;
        set(gca,'xlim',PlotLims(1:2), ...
            'ylim',PlotLims(3:4))
        
        % MH SlugHeat15 FrictionalFig Single Figure
        %FrictionalFig(1:4,13,Trial,Iteration) = axis';
        FrictionalFig(1:4,13,1,1) = axis';
        ax = axis;
        line([0 0],[ax(3) ax(4)],'linestyle',':','color','y')
        
        %axes(FrictionalFig(4,2,Trial,Iteration))
        axes(FrictionalFig(4,2,1,1))
        cla
        hold on
        n=1;
        for i = SensorsToUse
            %FrictionalFig(i,7,Trial,Iteration) = plot( ...
            FrictionalFig(i,7,1,1) = plot( ...
                TimeShifts(:,n),RMS(n,:),'-v', ...
                'color',CMap(i,:), ...
                'markersize',4);
            hold on
            n=n+1;
        end
        xlabel('\bfTime Shifts (s)','fontsize',12,'verticalalignment','top')
        ylabel('\bfResidual Misfit ( ^oC)', ...
            'fontsize',12,'verticalalignment','top')
        set(gca,'yaxislocation','right','yscale','log')
        
        %FrictionalFig(1:4,14,Trial,Iteration) = axis';
        FrictionalFig(1:4,14,1,1) = axis';
        ax = axis;
        
        n=1;
        for i = SensorsToUse
            %FrictionalFig(i,8,Trial,Iteration) = line(MinimumDelays(n)*[1 1], ...
            FrictionalFig(i,8,1,1) = line(MinimumDelays(n)*[1 1], ...
                [ax(3) ax(4)], ...
                'color',CMap(i,:),'linestyle',':');
            hold on
            n=n+1;
        end
        
        %set(FrictionalFig(1:4,2,Trial,Iteration), ...
        set(FrictionalFig(1:4,2,1,1), ...
            'color','k', ...
            'xcolor','y', ...
            'ycolor','y', ...
            'fontsize',11)
        
        % MH SlugHeat15 FrictionalFig Single Figure
        %
        % PROBABLY JUST NEED TO DO THIS THE FIRST TIME
        %
        % Replace all calls of Trial and Iteration to 1,1
        %
        if (Trial==1 && Iteration==1)
        
            if Mode(1) ~= 3

                % Define uicontrols for toggling sensors plots
                % --------------------------------------------

                for i = 1:NumberOfSensors

                    CallBackString = ['global FrictionalFig CMap;' ...
                            'if get(FrictionalFig(' int2str(i) ',9,' int2str(Trial) ',' ...
                            int2str(Iteration) '),''value'');' ...
                            'set(FrictionalFig(' int2str(i) ',3:8,' int2str(Trial) ',' ...
                            int2str(Iteration) '),''visible'',''off'');' ...
                            'set(FrictionalFig(' int2str(i) ',9,' int2str(Trial) ',' ...
                            int2str(Iteration) '),''backgroundcolor'',CMap(' int2str(i) ',:)/3);' ...
                            'set(FrictionalFig(' int2str(i) ',9,' int2str(Trial) ',' ...
                            int2str(Iteration) '),''tooltipstring'',' ...
                            '[''Click to toggle on plotting of sensor ' int2str(i) ''']);' ...
                            'else ' ...
                            'set(FrictionalFig(' int2str(i) ',3:8,' int2str(Trial) ',' ...
                            int2str(Iteration) '),''visible'',''on'');' ...
                            'set(FrictionalFig(' int2str(i) ',9,' int2str(Trial) ',' ...
                            int2str(Iteration) '),''backgroundcolor'',CMap(' int2str(i) ',:));' ...
                            'set(FrictionalFig(' int2str(i) ',9,' int2str(Trial) ',' ...
                            int2str(Iteration) '),''tooltipstring'',' ...
                            '[''Click to toggle off plotting of sensor ' int2str(i) ''']);' ...
                            'end;' ...
                            'for i = 1:4;' ...
                            'set(FrictionalFig(i,2,' int2str(Trial) ',' ...
                            int2str(Iteration) '),''xlim'',FrictionalFig(1:2,10+i,' int2str(Trial) ',' ...
                            int2str(Iteration) ')'',''ylim'',FrictionalFig(3:4,10+i,' int2str(Trial) ',' ...
                            int2str(Iteration) ')'');' ...
                            'end;'];

                    % MH SlugHeat15 COMMENT OUT UICONTROL CLIPPING change width from
                    % 0.029 to 0.020
                    FrictionalFig(i,9,Trial,Iteration) = uicontrol('style','checkbox', ...
                        'backgroundcolor',CMap(i,:), ...
                        'units','normalized', ...
                        'position',[0.061 0.161+0.796*(i-1)/NumberOfSensors ...
                            0.020 0.796/NumberOfSensors], ...
                        'value',0, ...
                        'tooltipstring',['Click to toggle off plotting of' ...
                            ' sensor ' int2str(i)], ...
                        'callback',CallBackString);
                    %                    'clipping','off', ...

                    if isempty(intersect(i,SensorsToUse))
                        set(FrictionalFig(i,9,Trial,Iteration), ...
                            'backgroundcolor',[1 1 1], ...
                            'tooltipstring',['Sensor  ' int2str(i) ' is ignored !'], ...
                            'callback','')
                    end 

                end

                CallBackStringAllOff = ['global FrictionalFig CMap SensorsToUse;' ...
                        'for i = SensorsToUse;' ...
                        'set(FrictionalFig(i,9,' int2str(Trial) ',' ...
                        int2str(Iteration) '),''value'',1);' ...
                        'set(FrictionalFig(i,3:8,' int2str(Trial) ',' ...
                        int2str(Iteration) '),''visible'',''off'');' ...
                        'set(FrictionalFig(i,9,' int2str(Trial) ',' ...
                        int2str(Iteration) '),''backgroundcolor'',CMap(i,:)/3);' ...
                        'end;' ...
                        'for i = 1:4;' ...
                        'set(FrictionalFig(i,2,' int2str(Trial) ',' ...
                        int2str(Iteration) '),''xlim'',FrictionalFig(1:2,10+i,' int2str(Trial) ',' ...
                        int2str(Iteration) ')'',''ylim'',FrictionalFig(3:4,10+i,' int2str(Trial) ',' ...
                        int2str(Iteration) ')'');' ...
                        'end;'];

                CallBackStringAllOn = ['global FrictionalFig CMap SensorsToUse;' ...
                        'for i = SensorsToUse;' ...
                        'set(FrictionalFig(i,9,' int2str(Trial) ',' ...
                        int2str(Iteration) '),''value'',0);' ...
                        'set(FrictionalFig(i,3:8,' int2str(Trial) ',' ...
                        int2str(Iteration) '),''visible'',''on'');' ...
                        'set(FrictionalFig(i,9,' int2str(Trial) ',' ...
                        int2str(Iteration) '),''backgroundcolor'',CMap(i,:));' ...
                        'end;' ...
                        'for i = 1:4;' ...
                        'set(FrictionalFig(i,2,' int2str(Trial) ',' ...
                        int2str(Iteration) '),''xlim'',FrictionalFig(1:2,10+i,' int2str(Trial) ',' ...
                        int2str(Iteration) ')'',''ylim'',FrictionalFig(3:4,10+i,' int2str(Trial) ',' ...
                        int2str(Iteration) ')'');' ...
                        'end;'];

                FrictionalFig(1,10,Trial,Iteration) = uicontrol('Style','pushbutton', ...
                    'units','normalized', ...
                    'position',[0.02 0.02 0.08 0.035], ...
                    'string','All Off', ...
                    'tooltipstring','Click to toggle off plotting of all sensors', ...
                    'fontsize',12, ...
                    'foregroundcolor','y', ...
                    'backgroundcolor',[0.15 0.15 0.15], ...
                    'callback',CallBackStringAllOff);

                FrictionalFig(2,10,Trial,Iteration) = uicontrol('Style','pushbutton', ...
                    'units','normalized', ...
                    'position',[0.1 0.02 0.08 0.035], ...
                    'string','All On', ...
                    'tooltipstring','Click to toggle on plotting of all sensors', ...
                    'fontsize',12, ...
                    'backgroundcolor',[0.15 0.15 0.15], ...
                    'foregroundcolor','y', ...
                    'callback',CallBackStringAllOn);

            end

            % Print and Save buttons
            % ----------------------

            axes(FrictionalFig(6,2,Trial,Iteration))
            FrictionalFig(1,16,Trial,Iteration) = text(0.5,1,['\bf' ResName], ...
                'verticalalignment','top', ...
                'horizontalalignment','center', ...
                'fontsize',16);
            FrictionalFig(2,16,Trial,Iteration) = text(0,0.3,['Results: ' pwd '/' ResName '.res'], ...
                'verticalalignment','bottom', ...
                'horizontalalignment','left', ...
                'fontsize',9);
            FrictionalFig(3,16,Trial,Iteration) = text(0,0,['Penetration: ' PenFile], ...
                'verticalalignment','bottom', ...
                'horizontalalignment','left', ...
                'fontsize',9);
            FrictionalFig(4,16,Trial,Iteration) = text(1,0.3,['Trial: ' int2str(Trial) ...
                    ' - Iteration: ' int2str(Iteration)], ...
                'verticalalignment','bottom', ...
                'horizontalalignment','right', ...
                'fontsize',9);
            FrictionalFig(5,16,Trial,Iteration) = text(1,0,['Processed: ' FORMATTIME], ...
                'verticalalignment','bottom', ...
                'horizontalalignment','right', ...
                'fontsize',9);

            set(FrictionalFig(6,2,Trial,Iteration),'visible','off');
            set(FrictionalFig(1:5,16,Trial,Iteration),'visible','off')

            if Mode(1) ~= 3

                CallBackPrintString = ['global FrictionalFig; ' ...
                        'set(FrictionalFig(1:5,16,' num2str(Trial) ',' num2str(Iteration) '),''visible'',''on''); ' ...
                        'print -dps -noui -f' num2str(FrictionalFig(1,1,Trial,Iteration)) '; ' ...
                        'set(FrictionalFig(1:5,16,' num2str(Trial) ',' num2str(Iteration) '),''visible'',''off''); ' ...
                        'refresh'];
                FrictionalFig(3,10,Trial,Iteration) = uicontrol('Style','pushbutton', ...
                    'units','normalized', ...
                    'position',[0.18 0.02 0.08 0.035], ...
                    'string','Print', ...
                    'tooltipstring','Click to send this figure to your default printer (B&W)', ...
                    'fontsize',12, ...
                    'backgroundcolor',[0.15 0.15 0.15], ...
                    'foregroundcolor','y', ...
                    'callback',CallBackPrintString);
                CallBackSaveString = ['global FrictionalFig ResName; ' ...
                        'set(FrictionalFig(1:5,16,' num2str(Trial) ',' num2str(Iteration) '),''visible'',''off''); ' ...
                        'set(FrictionalFig(1:5,2,' num2str(Trial) ',' num2str(Iteration) '),' ...
                        '''xcolor'',''y'',''ycolor'',''y''); ' ...
                        'PrintName = char(inputdlg(' ...
                        '{''Enter file name:''},' ...
                        '''Postcript file name'',' ...
                        '[1 48],{[''02_'' ResName ''_Frictional_' int2str(Trial) '_' int2str(Iteration) '.tiff'']})); ' ...
                        'ScreenSize = get(0,''screensize''); ' ...
                        'ScreenSize(4) = ScreenSize(4)*0.95; ' ...
                        'pause(1);' ...
                        'eval([''screencapture(0,''''position'''', ScreenSize ,'''''',PrintName,'''''');'']);' ...
                        'set(FrictionalFig(1:5,16,' num2str(Trial) ',' num2str(Iteration) '),''visible'',''off''); ' ...
                        'set(FrictionalFig(1:5,2,' num2str(Trial) ',' num2str(Iteration) '),' ...
                        '''xcolor'',''y'',''ycolor'',''y''); ' ...
                        'refresh'];
                FrictionalFig(3,10,Trial,Iteration) = uicontrol('Style','pushbutton', ...
                    'units','normalized', ...
                    'position',[0.26 0.02 0.08 0.035], ...
                    'string','Screengrab', ...
                    'fontsize',12, ...
                    'backgroundcolor',[0.15 0.15 0.15], ...
                    'foregroundcolor','y', ...
                    'callback',CallBackSaveString);

            end
        end
        
        zoom on
        drawnow
    end
    
end

if all(Mode == [3 6])
    
    set(FrictionalFig(1:5,16,Trial,Iteration),'visible','on');
    set(FrictionalFig(1:5,2,Trial,Iteration),'xcolor','k','ycolor','k');
    PrintName = [ResName '_Frictional_' int2str(Trial) '_' int2str(Iteration) '.ps'];
    eval(['print -dpsc -noui -f' num2str(FrictionalFig(1,1,Trial,Iteration)) ' ' PrintName]);
    set(FrictionalFig(1:5,16,Trial,Iteration),'visible','off');
    set(FrictionalFig(1:5,2,Trial,Iteration),'xcolor','y','ycolor','y');
    refresh;
    
end


% ==========================================================================
% 
% -----   PRINTOUTFRICTIONALRESULTS  -----
%
% ==========================================================================

function PRINTOUTFRICTIONALRESULTS(FrictionalResults,TChange)

global ResFileId LogFileId NumberOfColumns Iteration Trial PulseData

NC = NumberOfColumns;

Id = LogFileId;
if Iteration==1
    if PulseData
        
        String = ['RESULTS OF FRICTIONAL AND HEAT PULSE DECAYS REDUCTION - TRIAL # ' int2str(Trial)];
        fprintf(Id,'%s\n',[repmat(' ',1,fix((NC-length(String))/2)) ...
                repmat('-',1,length(String))]);
        fprintf(Id,'%s\n',[repmat(' ',1,fix((NC-length(String))/2)) String]);
        fprintf(Id,'%s\n\n',[repmat(' ',1,fix((NC-length(String))/2)) ...
                repmat('-',1,length(String))]);
        
    else
        String = ['RESULTS OF FRICTIONAL DECAY REDUCTION - NO HEAT PULSE - TRIAL # ' int2str(Trial)];
        fprintf(Id,'%s\n',[repmat(' ',1,fix((NC-length(String))/2)) ...
                repmat('-',1,length(String))]);
        fprintf(Id,'%s\n',[repmat(' ',1,fix((NC-length(String))/2)) String]);
        fprintf(Id,'%s\n\n',[repmat(' ',1,fix((NC-length(String))/2)) ...
                repmat('-',1,length(String))]);
        
    end
end

fprintf(Id,'\n%s',['Frictional Decay - Iteration ' num2str(Iteration,'%02d')]);
if Iteration > 2
    fprintf(Id,'%s',[' - Total change in Temperature: ' num2str(TChange,'%+4.1e')]);
    fprintf(Id,'\n%s\n\n', ...
        '=======================================================================');
else
    fprintf(Id,'\n%s\n\n', ...
        '==============================='); 
end

fprintf(Id,'%s\n', ...
    'Sensor  Data Points  Eq. temp.   Error   Gradient  Delay   Slope');
fprintf(Id,'%s\n', ...
    '        Tot. / Used    (deg)     (95%)   (mdeg/m)  (sec)   (/deg)');
fprintf(Id,'%s\n\n', ...
    '------  -----------  ---------  -------  --------  ------  ------');
fprintf(Id, ...
    '%4d %7d / %2d %10.3f %10.1e %9.3f %6d %8.3f\n',FrictionalResults);

if ~PulseData
  fprintf(Id,'\n%s\n\n', ...
    '-----------------------------------------------------------------');
end


% ==========================================================================
%
% -----   HEATPULSE   -----
%
% ==========================================================================

function [ ...
        MeankPointAtMinkDiff, ...
        kSlopeAtMinkDiff, ...
        MeankPointAtZeroInfTemp, ...
        MeankPointAtMinRMS, ...
        kSlopeAtZeroInfTemp, ...
        kSlopeAtMinRMS, ...
        TempAtInf, ...
        NumberOfUsedPoints, ...
        MinimumPulseDelays, ...
        kError ...  
] = HEATPULSE( ...
    NumberOfSensors, ...
    InitialTime, ...
    InitialDelays, ...
    MinimumFricEqTemp, ...
    MinimumFricSlope, ...
    HeatPulseTemp, ...
    k, ...
    HyndmanCoeffs, ...
    SensorRadius, ...	
    MaxStep, ...
    TimeInc, ...
    TauMin, ...
    TauMax, ...
    PulsePower, ...
    HeatPulseLength, ...
    Mode);

global HeatPulseFig FigSpace 
global StatusText StatusString CMap
global Trial Iteration
global Tau00Data FAT00
global SensorsToUse
global PenFile ResName

% Initialization
% --------------

NumberOfSensorsUsed = length(SensorsToUse);

Alpha=2.0;
LIT = length(InitialTime);
HC = HyndmanCoeffs;
Kappa = repmat(1e-6*k(SensorsToUse)./(HC(1) ...
    - HC(2)*k(SensorsToUse) ...
    + HC(3)*k(SensorsToUse).^2),LIT,1);
Tau00Index = [1:Tau00Data(3)/Tau00Data(2)];
ResidualTime = repmat(InitialTime,[1 NumberOfSensorsUsed]);
HeatPulseTime = repmat(InitialTime-InitialTime(1),[1 NumberOfSensorsUsed])-HeatPulseLength/2;

% Obtain Tau and F(Alpha,Tau) values corresponding to Time
% --------------------------------------------------------

ResidualTau = Kappa.*ResidualTime/(SensorRadius^2);
HeatPulseTau = Kappa.*HeatPulseTime/(SensorRadius^2);
ResidualTauIndex = round(ResidualTau/Tau00Data(2));
HeatPulseTauIndex = round(HeatPulseTau/Tau00Data(2));

% Don't consider data for Tau<=0 and,
% if greater than the maximum Tau of FAT00, approximate it with 1/2AlphaTau !
% ---------------------------------------------------------------------------

ResidualTauIndex(ResidualTauIndex > Tau00Data(3)/Tau00Data(2)) = length(FAT00) + 1;
HeatPulseTauIndex(HeatPulseTauIndex > Tau00Data(3)/Tau00Data(2)) = length(FAT00) + 1;
ResidualTauIndex(ResidualTauIndex < 1) = length(FAT00) + 2;
HeatPulseTauIndex(HeatPulseTauIndex < 1) = length(FAT00) + 2;
FAT00(end+1) = 9;
FAT00(end+1) = NaN;

ResidualFAT = FAT00(ResidualTauIndex);
HeatPulseFAT = FAT00(HeatPulseTauIndex);   

iRF = find(ResidualFAT>8);
iHPF = find(HeatPulseFAT>8);
ResidualFAT(iRF) = 1./(4*ResidualTau(iRF))-1./(8*ResidualTau(iRF).^2);
HeatPulseFAT(iHPF) = 1./(4*HeatPulseTau(iHPF))-1./(8*HeatPulseTau(iHPF).^2);

% Compute and remove residual temperature of the frictional decay
% ---------------------------------------------------------------

ResidualTemp = repmat(MinimumFricEqTemp(SensorsToUse)',LIT,1) ...   
    + repmat(MinimumFricSlope(SensorsToUse)',LIT,1).*ResidualFAT;
Temp = HeatPulseTemp(:,SensorsToUse)-ResidualTemp; 

% Correct the heat pulse decay for early Tau
% ------------------------------------------

CorrectedTemp = Temp./(2*Alpha*HeatPulseTau.*HeatPulseFAT);

% Apply Tau window to heat pulse data
% -----------------------------------

DataTemp = NaN*ones(size(CorrectedTemp));
[i,j] = find(HeatPulseTau > TauMin & HeatPulseTau < TauMax);
DataTemp(i,j) = CorrectedTemp(i,j);
DataTemp = repmat(DataTemp,[1 1 MaxStep]);

% Compute time shifts
% -------------------

TimeShifts = repmat(InitialDelays(SensorsToUse),[MaxStep 1]) ...
    + repmat(-TimeInc*[0:MaxStep-1]',[1 NumberOfSensorsUsed]);

ShiftedTime = repmat(InitialDelays(SensorsToUse),[LIT 1 MaxStep]) ...
    + repmat(HeatPulseTime,[1 1 MaxStep]) ...
    + repmat(permute(-TimeInc*[0:MaxStep-1],[3 1 2]),[LIT NumberOfSensorsUsed 1]);

% Compute 1/time and remove infinite and negative 1/time
% ------------------------------------------------------

ShiftedTime(find(ShiftedTime<=0)) = NaN;
OneOverTime = 1./ShiftedTime;

% Get rid of NaNs in OneOverTime and DataTemp and make 2-D arrays
% ---------------------------------------------------------------

[ix,jx] = find(~isnan(OneOverTime));
[iy,jy] = find(~isnan(DataTemp));

DataLimits = [max([min(ix) min(iy)]) min([max(ix) max(iy)])];
NumberOfUsedPoints = 1+diff(DataLimits);
clear ix iy jx jy

X = reshape(OneOverTime(DataLimits(1):DataLimits(2),:,:), ...
    [NumberOfUsedPoints NumberOfSensorsUsed*MaxStep]);
Y = reshape(DataTemp(DataLimits(1):DataLimits(2),:,:), ...
    [NumberOfUsedPoints NumberOfSensorsUsed*MaxStep]);

[a,b,Sigmaa,Sigmab,Chi2] = CHI2FIT(X,Y);

kSlope = (PulsePower/4/pi)./reshape(b,[NumberOfSensorsUsed MaxStep]);
TempAtInfinity = reshape(a,[NumberOfSensorsUsed MaxStep]);
kSlopeRMS = sqrt(reshape(Chi2,[NumberOfSensorsUsed MaxStep])/(NumberOfUsedPoints-2));

% Now calculate kPoint for all delays
% -----------------------------------

kPoint = reshape(PulsePower.*X./(4*pi.*Y),[NumberOfUsedPoints NumberOfSensorsUsed MaxStep]);

% Calculate average and variance of kPoint
% ----------------------------------------

kPointMean = squeeze(mean(kPoint));

% Find the k's corresponding to the minimum RMS or to Zero asymptotic temperature
% -------------------------------------------------------------------------------

kError = NaN*zeros(NumberOfSensors,1);
kSlopeAtMinkDiff = NaN*zeros(NumberOfSensors,1);
MeankPointAtMinkDiff = NaN*zeros(NumberOfSensors,1);
MeankPointAtZeroInfTemp = NaN*zeros(NumberOfSensors,1);
kSlopeAtZeroInfTemp = NaN*zeros(NumberOfSensors,1);
kSlopeAtMinRMS = NaN*zeros(NumberOfSensors,1);
MeankPointAtMinRMS = NaN*zeros(NumberOfSensors,1);
MinimumPulseDelays = NaN*zeros(NumberOfSensors,1);
TempAtInf = NaN*zeros(NumberOfSensors,1);

kDiff = abs(kSlope-repmat(k(SensorsToUse)',[1 MaxStep]));

[MinkDiff,MinkDiffIndex] = min(kDiff,[],2);
[dummy,MinkSlopeRMSIndex] = min(2*kSlopeRMS,[],2);
[dummy,ZeroInfTempIndex] = min(abs(TempAtInfinity),[],2);

kError(SensorsToUse) = dummy;
kSlopeAtMinkDiff(SensorsToUse) = diag(kSlope(:,MinkDiffIndex));
MeankPointAtMinkDiff(SensorsToUse) = diag(kPointMean(:,MinkDiffIndex));
MeankPointAtZeroInfTemp(SensorsToUse) = diag(kPointMean(:,ZeroInfTempIndex));
kSlopeAtZeroInfTemp(SensorsToUse) = diag(kSlope(:,ZeroInfTempIndex));
MeankPointAtMinRMS(SensorsToUse) = diag(kPointMean(:,MinkSlopeRMSIndex));
kSlopeAtMinRMS(SensorsToUse) = diag(kSlope(:,MinkSlopeRMSIndex));
MinimumPulseDelays(SensorsToUse) = diag(TimeShifts(MinkDiffIndex,:));
TempAtInf(SensorsToUse) = diag(TempAtInfinity(:,MinkDiffIndex));


if ~(all(Mode == [3 0]) | all(Mode == [3 1]) | all(Mode == [3 3]) ...
        | all(Mode == [3 4]) | all(Mode == [3 5]))
    
    % Plotting
    % --------
    
    % MH SlugHeat15: Change all instances of Trial and Iteration to 1,1 for just
    % a single figure
    %if (Trial >= 1 && Iteration >1)
    %    close(HeatPulseFig(1,1,Trial,Iteration-1))
    %end
    if (Trial==1 && Iteration==1)    
        HeatPulseFig(1,1,1,1) = figure( ...
            'position', [FigSpace], ...
            'color',[0.25 0.25 0.25], ...
            'MenuBar','none', ...
            'numbertitle','off', ...
            'Name',['E - Heat Pulse Decay Reduction - Trial ' int2str(Trial) ...
                ' - Iteration ' int2str(Iteration)]);
        orient landscape;
        HeatPulseFig(1,2,1,1) = axes('position',[0.18 0.60 0.34 0.36],'color','k');
        HeatPulseFig(2,2,1,1) = axes('position',[0.57 0.60 0.34 0.36],'color','k');
        HeatPulseFig(3,2,1,1) = axes('position',[0.18 0.16 0.34 0.36],'color','k');
        HeatPulseFig(4,2,1,1) = axes('position',[0.57 0.16 0.34 0.36],'color','k');
        HeatPulseFig(5,2,1,1) = axes('position',[0.06 0.16 0.03 0.80],'color',[0.25 0.25 0.25]);
        HeatPulseFig(6,2,1,1) = axes('position',[0.02 0.01 0.96 0.06],'visible','off');

        % Sensor colorbar
        % ---------------

        axes(HeatPulseFig(5,2,1,1))
        colormap(CMap)
        %colorbar(HeatPulseFig(5,2,Trial,Iteration))
        caxis([1 NumberOfSensors])

        set(HeatPulseFig(5,2,1,1), ...
            'xcolor',[0.25 0.25 0.25], ...
            'ycolor','y', ...
            'ytick',[1.5:NumberOfSensors+0.5], ...
            'ylim',[1 NumberOfSensors+1], ...
            'yticklabel',[1:NumberOfSensors], ...
            'yaxislocation','left', ...
            'xtick',[], ...
            'ticklength',[0 0])

        ylabel('\bf Sensor Number', ...
            'verticalalignment','bottom', ...
            'fontsize',12)
    end
    
    % MH SlugHeat15 Update Single Figure Name with Trial and Iteration
    set(HeatPulseFig(1,1,1,1),'Name',...
        ['E - Heat Pulse Decay Reduction - Trial ' int2str(Trial) ...
                ' - Iteration ' int2str(Iteration)]);

    
    % Optimally shifted Heat pulse decay data
    % ---------------------------------------
    
    axes(HeatPulseFig(1,2,1,1))
    cla;
    hold on;
    n=1;
    for i = SensorsToUse
        HeatPulseFig(i,3,1,1) = plot( ...
            ShiftedTime(:,n,MinkDiffIndex(n)),DataTemp(:,n,MinkDiffIndex(n)), ...
            'color',CMap(i,:),'marker','v');
        hold on
        n=n+1;
    end
    
    xlabel('\bfCorrected Time (s)', ...
        'verticalalignment','top', ...
        'fontsize',12)
    ylabel('\bfCorrected Temperature ( ^oC)', ...
        'verticalalignment','bottom', ...
        'fontsize',12)
    set(gca,'xlim',[HeatPulseTime(1) HeatPulseTime(end)])
    
    HeatPulseFig(1:4,11,1,1) = axis';
    ax = axis;
    line([HeatPulseTime(1) HeatPulseTime(1)],[ax(3) ax(4)],'linestyle','--','color','g')
    line([HeatPulseTime(end) HeatPulseTime(end)],[ax(3) ax(4)],'linestyle','--','color','r')
    
    % RMS = f(Time shift)
    % -------------------
    
    axes(HeatPulseFig(2,2,1,1))
    cla;
    hold on;
    n=1;
    for i = SensorsToUse
        HeatPulseFig(i,4,1,1) = plot( ...
            TimeShifts(:,n),kSlopeRMS(n,:),'-o', ...
            'color',CMap(i,:),'markersize',4);
        hold on
        n=n+1;
    end
    xlabel('\bfTime Shifts (s)', ...
        'verticalalignment','top', ...
        'fontsize',12)
    ylabel('\bfResidual Misfit for k_{slope} (W m^{-1} ^oC^{-1})', ...
        'verticalalignment','top', ...
        'fontsize',12)
    set(gca,'yaxislocation','right', ...
        'yscale','log')
    
    HeatPulseFig(1:4,12,1,1) = axis';
    ax = axis;
    for i = SensorsToUse
        HeatPulseFig(i,8,1,1) = line( ...
            MinimumPulseDelays(i)*[1 1],[ax(3) ax(4)], ...
            'color',CMap(i,:),'linestyle',':');
        hold on
    end
    
    % Temperature vs 1/time with fit
    % ------------------------------
    
    axes(HeatPulseFig(3,2,1,1))
    cla;
    hold on;
    n=1;
    for i = SensorsToUse
        HeatPulseFig(i,5,1,1) = plot( ...
            OneOverTime(:,n,MinkDiffIndex(n)),DataTemp(:,n,MinkDiffIndex(n)),'v', ...
            'color',CMap(i,:));
        hold on
        idx = find(~isnan(OneOverTime(:,n,MinkDiffIndex(n))));
        
        HeatPulseFig(i,6,1,1) = plot( ...
            [0 OneOverTime(idx(1),n,MinkDiffIndex(n))], ...
            TempAtInfinity(n,MinkDiffIndex(n)) + ((PulsePower/4/pi)./kSlope(n,MinkDiffIndex(n))) ...
            * [0 OneOverTime(idx(1),n,MinkDiffIndex(n))], ...
            'color',CMap(i,:));
        n=n+1;
    end
    xlabel('\bf1/Time (s^{-1})', ...
        'verticalalignment','top', ...
        'fontsize',12)
    ylabel('\bfCorrected Temperature ( ^oC)', ...
        'verticalalignment','bottom', ...
        'fontsize',12)
    lims = get(HeatPulseFig(1,2,1,1),'ylim');
    set(gca,'xlim',[0 1./HeatPulseTime(DataLimits(1))],'ylim',[0 lims(2)])
    HeatPulseFig(1:4,13,1,1) = axis'; 
    ax = axis;
    line([0 0],[0 ax(4)],'color','y','linestyle',':')
    line([0 ax(2)],[0 0],'color','y','linestyle',':')
    
    
    % Asymptotic temperature vs time shift
    % ------------------------------------
    
    axes(HeatPulseFig(4,2,1,1))
    cla;
    hold on;
    n=1;
    for i = SensorsToUse
        HeatPulseFig(i,7,1,1) = plot( ...
            TimeShifts(:,n),TempAtInfinity(n,:),'-x', ...
            'color',CMap(i,:),'markersize',4);
        hold on
        n=n+1;
    end
    xlabel('\bf Time Shifts (s)', ...
        'verticalalignment','top', ...
        'fontsize',12)
    ylabel('\bfTemperature at Infinity ( ^oC)', ...
        'verticalalignment','top', ...
        'fontsize',12)
    set(gca,'yaxislocation','right')
    HeatPulseFig(1:4,14,1,1) = axis';
    ax = axis;
    line([ax(1) ax(2)],[0 0],'color','y','linestyle',':')
    
    for i = SensorsToUse
        HeatPulseFig(i,15,1,1) = line( ...
            MinimumPulseDelays(i)*[1 1],[ax(3) ax(4)], ...
            'color',CMap(i,:),'linestyle',':');
        hold on
        
    end
    
    set(HeatPulseFig(1:4,2,1,1), ...
        'color','k', ...
        'xcolor','y', ...
        'ycolor','y', ...
        'fontsize',11)
    
    % Define uicontrols for toggling sensors plots
    % --------------------------------------------
    if (Trial==1 && Iteration==1)
        if Mode(1) ~= 3

            for i = 1:NumberOfSensors

                CallBackString = ['global HeatPulseFig CMap;' ...
                        'if get(HeatPulseFig(' int2str(i) ',9,' int2str(Trial) ',' ...
                        int2str(Iteration) '),''value'');' ...
                        'set(HeatPulseFig(' int2str(i) ',[3:8 15],' int2str(Trial) ',' ...
                        int2str(Iteration) '),''visible'',''off'');' ...
                        'set(HeatPulseFig(' int2str(i) ',9,' int2str(Trial) ',' ...
                        int2str(Iteration) '),''backgroundcolor'',CMap(' int2str(i) ',:)/3);' ...
                        'set(HeatPulseFig(' int2str(i) ',9,' int2str(Trial) ',' ...
                        int2str(Iteration) '),''tooltipstring'',' ...
                        '[''Click to toggle on plotting of sensor ' int2str(i) ''']);' ...
                        'else ' ...
                        'set(HeatPulseFig(' int2str(i) ',[3:8 15],' int2str(Trial) ',' ...
                        int2str(Iteration) '),''visible'',''on'');' ...
                        'set(HeatPulseFig(' int2str(i) ',9,' int2str(Trial) ',' ...
                        int2str(Iteration) '),''backgroundcolor'',CMap(' int2str(i) ',:));' ...
                        'set(HeatPulseFig(' int2str(i) ',9,' int2str(Trial) ',' ...
                        int2str(Iteration) '),''tooltipstring'',' ...
                        '[''Click to toggle off plotting of sensor ' int2str(i) ''']);' ...
                        'end;' ...
                        'for i = 1:4;' ...
                        'set(HeatPulseFig(i,2,' int2str(Trial) ',' ...
                        int2str(Iteration) '),''xlim'',HeatPulseFig(1:2,10+i,' int2str(Trial) ',' ...
                        int2str(Iteration) ')'',''ylim'',HeatPulseFig(3:4,10+i,' int2str(Trial) ',' ...
                        int2str(Iteration) ')'');' ...
                        'end;'];

                % MH SlugHeat15 Comment out Clipping and change width from 0.029
                % to 0.020
                HeatPulseFig(i,9,Trial,Iteration) = uicontrol('style','checkbox', ...
                    'backgroundcolor',CMap(i,:), ...
                    'units','normalized', ...
                    'position',[0.061 0.161+0.796*(i-1)/NumberOfSensors ...
                        0.020 0.796/NumberOfSensors], ...
                    'value',0, ...
                    'tooltipstring',['Click to toggle off plotting of' ...
                        ' sensor ' int2str(i)], ...
                    'callback',CallBackString);
                %                'clipping','off', ...

                if isempty(intersect(i,SensorsToUse))
                    set(HeatPulseFig(i,9,Trial,Iteration), ...
                        'backgroundcolor',[1 1 1], ...
                        'tooltipstring',['Sensor  ' int2str(i) ' is ignored !'], ...
                        'callback','')
                end
            end

            CallBackStringAllOff = ['global HeatPulseFig CMap SensorsToUse;' ...
                    'for i = SensorsToUse;' ...
                    'set(HeatPulseFig(i,9,' int2str(Trial) ',' ...
                    int2str(Iteration) '),''value'',1);' ...
                    'set(HeatPulseFig(i,[3:8 15],' int2str(Trial) ',' ...
                    int2str(Iteration) '),''visible'',''off'');' ...
                    'set(HeatPulseFig(i,9,' int2str(Trial) ',' ...
                    int2str(Iteration) '),''backgroundcolor'',CMap(i,:)/3);' ...
                    'end;' ...
                    'for i = 1:4;' ...
                    'set(HeatPulseFig(i,2,' int2str(Trial) ',' ...
                    int2str(Iteration) '),''xlim'',HeatPulseFig(1:2,10+i,' int2str(Trial) ',' ...
                    int2str(Iteration) ')'',''ylim'',HeatPulseFig(3:4,10+i,' int2str(Trial) ',' ...
                    int2str(Iteration) ')'');' ...
                    'end;'];

            CallBackStringAllOn = ['global HeatPulseFig CMap SensorsToUse;' ...
                    'for i = SensorsToUse;' ...
                    'set(HeatPulseFig(i,9,' int2str(Trial) ',' ...
                    int2str(Iteration) '),''value'',0);' ...
                    'set(HeatPulseFig(i,[3:8 15],' int2str(Trial) ',' ...
                    int2str(Iteration) '),''visible'',''on'');' ...
                    'set(HeatPulseFig(i,9,' int2str(Trial) ',' ...
                    int2str(Iteration) '),''backgroundcolor'',CMap(i,:));' ...
                    'end;' ...
                    'for i = 1:4;' ...
                    'set(HeatPulseFig(i,2,' int2str(Trial) ',' ...
                    int2str(Iteration) '),''xlim'',HeatPulseFig(1:2,10+i,' int2str(Trial) ',' ...
                    int2str(Iteration) ')'',''ylim'',HeatPulseFig(3:4,10+i,' int2str(Trial) ',' ...
                    int2str(Iteration) ')'');' ...
                    'end;'];

            HeatPulseFig(1,10,Trial,Iteration) = uicontrol('Style','pushbutton', ...
                'units','normalized', ...
                'position',[0.02 0.02 0.08 0.035], ...
                'string','All Off', ...
                'tooltipstring','Click to toggle off plotting of all sensors', ...
                'fontsize',12, ...
                'foregroundcolor','y', ...
                'backgroundcolor',[0.15 0.15 0.15], ...
                'callback',CallBackStringAllOff);

            HeatPulseFig(2,10,Trial,Iteration) = uicontrol('Style','pushbutton', ...
                'units','normalized', ...
                'position',[0.1 0.02 0.08 0.035], ...
                'string','All On', ...
                'tooltipstring','Click to toggle on plotting of all sensors', ...
                'fontsize',12, ...
                'backgroundcolor',[0.15 0.15 0.15], ...
                'foregroundcolor','y', ...
                'callback',CallBackStringAllOn);

        end

        % Print and Save buttons
        % ----------------------

        axes(HeatPulseFig(6,2,Trial,Iteration))
        HeatPulseFig(1,16,Trial,Iteration) = text(0.5,1,['\bf' ResName], ...
            'verticalalignment','top', ...
            'horizontalalignment','center', ...
            'fontsize',16);
        HeatPulseFig(2,16,Trial,Iteration) = text(0,0.3,['Results: ' pwd '/' ResName '.res'], ...
            'verticalalignment','bottom', ...
            'horizontalalignment','left', ...
            'fontsize',9);
        HeatPulseFig(3,16,Trial,Iteration) = text(0,0,['Penetration: ' PenFile], ...
            'verticalalignment','bottom', ...
            'horizontalalignment','left', ...
            'fontsize',9);
        HeatPulseFig(4,16,Trial,Iteration) = text(1,0.3,['Trial: ' int2str(Trial) ...
                ' - Iteration: ' int2str(Iteration)], ...
            'verticalalignment','bottom', ...
            'horizontalalignment','right', ...
            'fontsize',9);
        HeatPulseFig(5,16,Trial,Iteration) = text(1,0,['Processed: ' FORMATTIME], ...
            'verticalalignment','bottom', ...
            'horizontalalignment','right', ...
            'fontsize',9);

        set(HeatPulseFig(6,2,Trial,Iteration),'visible','off');
        set(HeatPulseFig(1:5,16,Trial,Iteration),'visible','off')

        if Mode(1) ~= 3

            CallBackPrintString = ['global HeatPulseFig; ' ...
                    'set(HeatPulseFig(1:5,16,' num2str(Trial) ',' num2str(Iteration) '),''visible'',''on''); ' ...
                    'print -dps -noui -f' num2str(HeatPulseFig(1,1,Trial,Iteration)) '; ' ...
                    'set(HeatPulseFig(1:5,16,' num2str(Trial) ',' num2str(Iteration) '),''visible'',''off''); ' ...
                    'refresh'];
            HeatPulseFig(3,10,Trial,Iteration) = uicontrol('Style','pushbutton', ...
                'units','normalized', ...
                'position',[0.18 0.02 0.08 0.035], ...
                'string','Print', ...
                'tooltipstring','Click to send this figure to your default printer (B&W)', ...
                'fontsize',12, ...
                'backgroundcolor',[0.15 0.15 0.15], ...
                'foregroundcolor','y', ...
                'callback',CallBackPrintString);
            CallBackSaveString = ['global HeatPulseFig ResName; ' ...
                    'set(HeatPulseFig(1:5,16,' num2str(Trial) ',' num2str(Iteration) '),''visible'',''off''); ' ...
                    'set(HeatPulseFig(1:5,2,' num2str(Trial) ',' num2str(Iteration) '),''xcolor'',''y'',''ycolor'',''y''); ' ...
                    'PrintName = char(inputdlg(' ...
                    '{''Enter file name:''},' ...
                    '''Tiff file name'',' ...
                    '[1 48],{[''03_'' ResName ''_HeatPulse_' int2str(Trial) '_' int2str(Iteration) '.tiff'']})); ' ...
                    'ScreenSize = get(0,''screensize''); ' ...
                    'ScreenSize(4) = ScreenSize(4)*0.95; ' ...
                    'pause(1); ' ...
                    'eval([''screencapture(0,''''position'''', ScreenSize ,'''''',PrintName,'''''');'']);' ...
                    'set(HeatPulseFig(1:5,16,' num2str(Trial) ',' num2str(Iteration) '),''visible'',''off''); ' ...
                    'set(HeatPulseFig(1:5,2,' num2str(Trial) ',' num2str(Iteration) '),''xcolor'',''y'',''ycolor'',''y''); ' ...
                    'refresh'];
            HeatPulseFig(3,10,Trial,Iteration) = uicontrol('Style','pushbutton', ...
                'units','normalized', ...
                'position',[0.26 0.02 0.08 0.035], ...
                'string','Screengrab', ...
                'fontsize',12, ...
                'backgroundcolor',[0.15 0.15 0.15], ...
                'foregroundcolor','y', ...
                'callback',CallBackSaveString);

        end
    end
    
    zoom on
    drawnow
    
end

if all(Mode == [3 6])
    
    set(HeatPulseFig(1:5,16,Trial,Iteration),'visible','on');
    set(HeatPulseFig(1:5,2,Trial,Iteration),'xcolor','k','ycolor','k');
    PrintName = [ResName '_HeatPulse_' int2str(Trial) '_' int2str(Iteration) '.ps'];
    eval(['print -dpsc -noui -f' num2str(HeatPulseFig(1,1,Trial,Iteration)) ' ' PrintName]);
    set(HeatPulseFig(1:5,16,Trial,Iteration),'visible','off');
    set(HeatPulseFig(1:5,2,Trial,Iteration),'xcolor','y','ycolor','y');
    refresh;
    
end


% ==========================================================================
% 
% -----   PRINTOUTHEATPULSERESULTS  -----
%
% ==========================================================================

function PRINTOUTHEATPULSERESULTS(HeatPulseResults,Iteration,kChange)

global LogFileId

fprintf(LogFileId,'%s\n',' ');
fprintf(LogFileId,'%s',['Heat Pulse Decay - Iteration ' num2str(Iteration,'%02d')]);
if Iteration > 1
    
    fprintf(LogFileId,'%s',[' - Total change in conductivity: ' num2str(kChange,'%+4.1e')]);
    fprintf(LogFileId,'\n%s\n\n', ...
        '========================================================================');
else
    fprintf(LogFileId,'\n%s\n\n', ...
        '===============================');   
end
fprintf(LogFileId,'%s\n', ...
    'Sensor  Data Points   kPtHF97    Error    T@Inf   Delay   kSlpHF97   kPt@0Tinf  kPt@minRMS  kSlp@minRMS  kSlp@0Tinf');
fprintf(LogFileId,'%s\n', ...
    '        Tot. / Used  (W/deg/m)   (95%)    (deg)   (sec)   (W/deg/m)  (W/deg/m)  (W/deg/m)    (W/deg/m)   (W/deg/m)');
fprintf(LogFileId,'%s\n\n', ...
    '------  -----------  ---------  -------  -------  -----  ----------  ---------  ----------  -----------  ----------');
fprintf(LogFileId, ...
    '%4i %7d / %2d %11.6f %9.1e %8.5f %5d %11.6f %11.6f %11.6f %11.6f %11.6f\n',HeatPulseResults);
fprintf(LogFileId,'\n%s\n\n\n', ...
    '-------------------------------------------------------------------------------------------------------------------');


% ==========================================================================
%
% -----   BULLARDANALYSIS   -----
%
% ==========================================================================

function [ ...
        SensorsUsedForBullardFit, ...
        GoodkIndex, ...
        ShiftedBullardDepths, ...
        ShiftedRelativeDepths, ...
        SigmaR, ...
        PenetrationLag, ...
        Slope, ...
        Shift ...
] = BULLARDANALYSIS(RelativeDepths, ...
    k0, ...
    T0, ...
    Mode)

global BullardFig PulseData Iteration Trial TotalIterations
global FigSpace CMap
global NumberOfSensors BadT Badk SensorsToUse
global PenFile ResName

if Mode(1) ~= 2 
    
    if ~(all(Mode == [3 0]) | all(Mode == [3 3]))
        
        if ~PulseData
            
            FigNumber = TotalIterations;
            BullardFig(1,1,FigNumber) = figure( ...
                'position',FigSpace, ...
                'color',[0.25 0.25 0.25], ...
                'MenuBar','none', ...
                'numbertitle','off', ...
                'Name',['F - Bullard Analysis - Trial ' int2str(Trial) ...
                    ' - Iteration ' int2str(Iteration)]);
            orient landscape;
        else
            
            FigNumber = Trial;
            BullardFig(1,1,FigNumber) = figure( ...
                'position',[FigSpace], ...
                'color',[0.25 0.25 0.25], ...
                'MenuBar','none', ...
                'numbertitle','off', ...
                'Name',['F - Bullard Analysis - Trial ' int2str(Trial)]);
            orient landscape;
            
        end
        % MH SlugHeat15 Set Colors and Colormap as in other figures 
        BullardFig(1,2,FigNumber) = axes('position',[0.07 0.18 0.24 0.72],'color','k'); % dT/dZ
        BullardFig(2,2,FigNumber) = axes('position',[0.33 0.18 0.23 0.72],'color','k'); % K/Z
        BullardFig(3,2,FigNumber) = axes('position',[0.64 0.18 0.24 0.72],'color','k'); % T/CTR 
        BullardFig(4,2,FigNumber) = axes('position',[0.92 0.18 0.02 0.72],'color',[0.25 0.25 0.25],...
            'YColor',[0.25 0.25 0.25],'XColor',[0.25 0.25 0.25]); % Colorbar  
        BullardFig(5,2,FigNumber) = axes('position',[0.07 0.09 0.24 0.07],'color',[0.25 0.25 0.25]); % Below dT/dZ
        BullardFig(6,2,FigNumber) = axes('position',[0.64 0.09 0.24 0.07],'color',[0.25 0.25 0.25]); % Below T/CTR
        BullardFig(7,2,FigNumber) = axes('position',[0.02 0.01 0.96 0.06],'color',[0.25 0.25 0.25]); % Below All
        BullardFig(8,2,FigNumber) = axes('position',[0.33 0.09 0.23 0.07],'color',[0.25 0.25 0.25]); % Below K/Z
        
    end
    
end

% Define what sensors to use
% --------------------------

GoodT = setxor([1:NumberOfSensors],BadT);
Goodk = setxor([1:NumberOfSensors],Badk);

TToUse = intersect(GoodT,SensorsToUse);    % SensorsToUse for T.
kToUse = intersect(Goodk,SensorsToUse);    % SensorsToUse for k.


% Relative Depths
% ---------------

% Here we do a least-squares fit of the Temperatures other than 
% those ignored (SensorsToUse) and those discarded (BadT).
%disp('line 4640')
RelativeDepths;

[pz,Sz] = polyfit(T0(TToUse),RelativeDepths(TToUse),1);
Shift(1) = -pz(2);
Slope(1) = pz(1);

ShiftedRelativeDepths = RelativeDepths + Shift(1);	
PenetrationLag(1) = ShiftedRelativeDepths(max(TToUse));  % With respect to top
                                                         % sensor not ignored
                                                         % or discarded
z1min = min([RelativeDepths ShiftedRelativeDepths]);
z1max = max([RelativeDepths ShiftedRelativeDepths]);

% Bullard Depths
% --------------

% Here we compute Bullard Depths using all conductivities not ignored or discarded
% (even if the Temperature was discarded)

BullardDepths = ShiftedRelativeDepths(max(kToUse))/k0(max(kToUse)) ...
    + fliplr(cumtrapz(fliplr(ShiftedRelativeDepths(kToUse)),1./fliplr(k0(kToUse))));

% Now we need to determine the indices of the BullardDepths vector that correspond to
% to the valid Temperatures (i.e., those not discarded - we can forget about the Sensors
% originally ignored since they are already ignored in the Bullard Depths calculation.

[GoodBullardDepths,GoodTIndex,GoodkIndex] = intersect(TToUse,kToUse);
SensorsUsedForBullardFit = GoodBullardDepths;
[pR,SR] = polyfit(T0(GoodBullardDepths),BullardDepths(GoodkIndex),1);
[dummy,SigmaR] = polyval(pR,T0(GoodBullardDepths),SR);

[rcoef,pcoef,rlo,rup]=corrcoef(T0(GoodBullardDepths),BullardDepths(GoodkIndex));
%disp([' R    = ',num2str(rcoef(2,1))])
%disp([' Rlow = ',num2str(rlo(2,1))])

Shift(2) = -pR(2);
Slope(2) = pR(1);

% -----------------
%%%%%%%%%%%%%%%%%%%% MH Testing


% -----------------
[pGradient,sGradient]=polyfit(BullardDepths(GoodkIndex),T0(GoodBullardDepths),1);
[dummyGradient,SigmaRGradient]=polyval(pGradient,BullardDepths(GoodkIndex),sGradient);
MeanSigmaRGradient = mean(SigmaRGradient)/2;

% -----------------
%%%%%%%%%%%%%%%%%%%% MH Testing
% -----------------




ShiftedBullardDepths = BullardDepths + Shift(2);

z2min = min([BullardDepths ShiftedBullardDepths]);
z2max = max([BullardDepths ShiftedBullardDepths]);

if Mode(1) ~= 2 
    
    if ~(all(Mode == [3 0]) | all(Mode == [3 3]))
        
        % Axes limit
        % ----------
        
        zmin = min([0 z1min z2min]);
        zmax = max([z1max z2max 0]);
        Tmin = min([0 T0]);
        Tmax = max([T0 0]);
        
        kmin = min(k0);
        kmax = max(k0);
        kmin = kmin - 0.15*(kmax-kmin);
        kmax = kmax + 0.15*(kmax-kmin);
        
        if Tmax == Tmin
            Tmax = Tmax + 0.05*Tmax;
            Tmin = Tmin - 0.05*Tmin;
        end
        
        if kmax == kmin
            kmax = kmax + 0.05*kmax;
            kmin = kmin - 0.05*kmin;
        end
        
        if zmax == zmin
            zmax = zmax + 0.05*zmax;
            zmin = zmin - 0.05*zmin;
        end
        
        % Plots
        % -----
        
        % Relative Depths
        
        axes(BullardFig(1,2,FigNumber))
        hold on;
        for i = SensorsToUse
            plot(T0(i),RelativeDepths(i),'o', ...
                'color',CMap(i,:), ...
                'markersize',5);
            hold on
            plot(T0(i),ShiftedRelativeDepths(i),'o', ...
                'color',CMap(i,:), ...
                'markerfacecolor',CMap(i,:), ...
                'markersize',10);
        end
        
        plot(T0(intersect(BadT,SensorsToUse)), ...
            RelativeDepths(intersect(BadT,SensorsToUse)),'wx','markersize',9);
        plot(T0(intersect(BadT,SensorsToUse)), ...
            ShiftedRelativeDepths(intersect(BadT,SensorsToUse)),'wx','markersize',15);
        plot([0 max(T0)],Slope(1)*[0 max(T0)],'r');
        
        xlabel('\bfTemperature ( ^oC)', ...
            'fontsize',12, ...
            'verticalalignment','bottom')
        ylabel('\bfRelative Depth (m)', ...
            'fontsize',12, ...
            'verticalalignment','bottom')
        axis([Tmin Tmax zmin zmax]);
        
        % Conductivities
        % --------------
        
        axes(BullardFig(2,2,FigNumber))
        hold on;
        x = k0(kToUse);
        x = [x(1) x];
        y = ShiftedRelativeDepths(kToUse);
        y = [y(1) y(1:end-1) + diff(y)/2 0];
        stairs(x,y,'w');
        hold on
       
        for i = SensorsToUse
            plot(k0(i),ShiftedRelativeDepths(i),'d', ...
                'color',CMap(i,:), ...
                'markerfacecolor',CMap(i,:), ...
                'markersize',10);
        end
        
        plot(k0(intersect(Badk,SensorsToUse)), ...
            ShiftedRelativeDepths(intersect(Badk,SensorsToUse)),'w+','markersize',15);
        
        xlabel('\bfThermal Conductivity (W m^{-1} ^oC^{-1})', ...
            'fontsize',12, ...
            'verticalalignment','bottom')
        axis([kmin kmax zmin zmax]);
        set(gca,'yticklabel',[])
        
        % Average Thermal Conductivity +/- 1 std
        kmean = mean(x);
        kstd  = std(x);
        
        
        
        % Thermal resistance
        % ------------------
        
        axes(BullardFig(3,2,FigNumber))
        hold on
        for i = 1:length(GoodBullardDepths)
            plot(T0(GoodBullardDepths(i)),BullardDepths(GoodkIndex(i)),'o', ...
                'color',CMap(GoodBullardDepths(i),:), ...
                'markersize',5);
            hold on
            
            plot(T0(GoodBullardDepths(i)),ShiftedBullardDepths(GoodkIndex(i)),'o', ...
                'color',CMap(GoodBullardDepths(i),:), ...
                'markerfacecolor',CMap(GoodBullardDepths(i),:), ...
                'markersize',10);
        end
        
        plot([0 max(T0)],Slope(2)*[0 max(T0)],'g');
        xlabel('\bfTemperature ( ^oC)', ...
            'fontsize',12, ...
            'verticalalignment','bottom')
        ylabel(['\bfCumulative thermal resistance (m^2 ^oC W^{-1})'], ...
            'fontsize',12, ...
            'verticalalignment','bottom')
        axis([Tmin Tmax zmin zmax]);
        
        % Sensor colorbar
        % ---------------
        
        axes(BullardFig(4,2,FigNumber))
        
        AlteredCMap = CMap;
        AlteredCMap(setxor(1:NumberOfSensors,SensorsToUse),:) = ...
            repmat([0.15 0.15 0.15],length(setxor(1:NumberOfSensors,SensorsToUse)),1);
        colormap(AlteredCMap)
        %colorbar(BullardFig(4,2,FigNumber))
        % MH SlugHeat15 Colorbar
        h_colorbar=colorbar;
        h_colorbar.Position(3)=0.020;
        h_colorbar.Color='y';
        h_colorbar.FontWeight='bold';
        h_colorbar.FontSize=12;
        h_colorbar.Box='off';
        h_colorbar.AxisLocation='in';
        h_colorbar.Label.String='Sensor Number';
        caxis([0 NumberOfSensors])        
        h_colorbar.Ticks=0.5:1:NumberOfSensors;
        h_colorbar.TickLabels={[1:1:NumberOfSensors]};
        %h_colorbar.Limits=[1 NumberOfSensors+1]
        %h_colorbar.Ticks=[0.5:1:NumberOfSensors+1];

        
        
        %set(BullardFig(4,2,FigNumber), ...
        %    'ycolor','y', ...
        %    'ytick',[1.5:NumberOfSensors+0.5], ...
        %    'yticklabel',[1:NumberOfSensors], ...
        %    'ticklength',[0 0])
        %ylabel('\bfSensor Number', ...
        %    'verticalalignment','top', ...
        %    'fontsize',12,'color','y')
        
        % Plot characteristics
        % --------------------
        
        set(BullardFig(1:3,2,FigNumber), ...
            'color','k', ...
            'ydir','reverse', ...
            'xaxislocation','top', ...
            'box','off')
        
        set(BullardFig(1:2,2,FigNumber), ...
            'xcolor','y', ...
            'ycolor','y')
        
        set(BullardFig(3,2,FigNumber), ...
            'xcolor','y', ...
            'ycolor','y')
        
        set(BullardFig(1:4,2,FigNumber), ...
            'fontsize',11)
        
        axes(BullardFig(5,2,FigNumber));
        hold on;
        % MH add text for gradient and uncertainty
        textstr=[num2str((1/Slope(1)),'%4.3f'),' +/- ',num2str((MeanSigmaRGradient),'%1.3f'),' ^oC m^{-1}'];
        %BullardFig(1,3,FigNumber) = text(0.5,0.8,['Gradient:\bf ' ...
        %        num2str(1/Slope(1),'%4.3f') ' ^oC m^{-1}'], ...
        
        BullardFig(1,3,FigNumber) = text(0.5,0.8,['Gradient:\bf ',textstr], ...
            'verticalalignment','middle', ...
            'horizontalalignment','center', ...
            'fontweight','bold', ...
            'fontsize',12);
        BullardFig(2,3,FigNumber) = text(0.5,0.3,['Depth of top sensor:\bf ' ...
                num2str(PenetrationLag(1),'%4.3f') ' m'], ...
            'verticalalignment','middle', ...
            'horizontalalignment','center', ...
            'fontweight','bold', ...
            'fontsize',11);
        
        axes(BullardFig(8,2,FigNumber));
        hold on;
        % Show K averages
        textstr=[num2str((kmean),'%4.2f'),' +/- ',num2str((kstd),'%1.2f'),' (W m^{-1} ^oC^{-1})'];        
        text(0.5,0.8,['Average K:  ',textstr],'verticalalignment','middle', ...
            'horizontalalignment','center', ...
            'fontsize',12, ...
            'color','w');
        
        axes(BullardFig(6,2,FigNumber));
        hold on;
        BullardFig(3,3,FigNumber) = text(0.5,0.8,['Heat Flow:\bf ' ...
                num2str(1/Slope(2),'%4.3f') ' W m^{-2}'], ...
            'verticalalignment','middle', ...
            'horizontalalignment','center', ...
            'fontweight','bold', ...
            'fontsize',12);
        BullardFig(4,3,FigNumber) = text(0.5,0.3,['Shift:\bf ' ...
                num2str(Shift(2),'%4.3f') ' m^2 ^oC W^{-1}'], ...
            'verticalalignment','middle', ...
            'horizontalalignment','center', ...
            'fontweight','bold', ...
            'fontsize',11);
        
        % Show correlation (low) coefficient
        textstr=num2str(rlo(2,1),'%4.2f');
        text(0.5,-0.2,['Rl:  ',textstr],'verticalalignment','middle', ...
            'horizontalalignment','center', ...
            'fontsize',11, ...
            'fontweight','bold', ...
            'color','w');

        
        set(BullardFig(8,2,FigNumber),'visible','off');
        set(BullardFig(5:6,2,FigNumber),'visible','off');
        
        set(BullardFig([1 2],3,FigNumber),'color','w','fontsize',12,'fontweight','bold');
        set(BullardFig([3 4],3,FigNumber),'color','w','fontsize',12,'fontweight','bold');
        
        % Print and Save buttons
        % ----------------------
        
        axes(BullardFig(7,2,FigNumber))
        hold on;
        BullardFig(5,3,FigNumber) = text(0.5,1,['\bf' ResName], ...
            'verticalalignment','top', ...
            'horizontalalignment','center', ...
            'fontsize',16);
        BullardFig(6,3,FigNumber) = text(0,0.3,['Results: ' pwd '/' ResName '.res'], ...
            'verticalalignment','bottom', ...
            'horizontalalignment','left', ...
            'fontsize',9);
        BullardFig(7,3,FigNumber) = text(0,0,['Penetration: ' PenFile], ...
            'verticalalignment','bottom', ...
            'horizontalalignment','left', ...
            'fontsize',9);
        BullardFig(8,3,FigNumber) = text(1,0.3,['Trial: ' int2str(Trial) ...
                ' - Iteration: ' int2str(Iteration-1)], ...
            'verticalalignment','bottom', ...
            'horizontalalignment','right', ...
            'fontsize',9);
        BullardFig(9,3,FigNumber) = text(1,0,['Processed: ' FORMATTIME], ...
            'verticalalignment','bottom', ...
            'horizontalalignment','right', ...
            'fontsize',9);
        
        set(BullardFig(5:7,2,FigNumber),'visible','off');
        set(BullardFig(5:9,3,FigNumber),'visible','off');
        
        CallBackPrintString = ['global BullardFig; ' ...
                'set(BullardFig(5:9,3,' num2str(FigNumber) '),''visible'',''on''); ' ...
                'print -dps -noui -f' num2str(BullardFig(1,1,FigNumber)) '; ' ...
                'set(BullardFig(5:9,3,' num2str(FigNumber) '),''visible'',''off''); ' ...
                'refresh'];
        BullardFig(1,4,FigNumber) = uicontrol('Style','pushbutton', ...
            'units','normalized', ...
            'position',[0.02 0.02 0.08 0.035], ...
            'string','Print', ...
            'tooltipstring','Click to send this figure to your default printer (B&W)', ...
            'fontsize',12, ...
            'backgroundcolor',[0.15 0.15 0.15], ...
            'foregroundcolor','y', ...
            'callback',CallBackPrintString);
        CallBackSaveString = ['global BullardFig ResName; ' ...
                'set(BullardFig(5:9,3,' num2str(FigNumber) '),''visible'',''off''); ' ...
                'PrintName = char(inputdlg(' ...
                '{''Enter file name:''},' ...
                '''Tiff file name'',' ...
                '[1 48],{[''04_'' ResName ''_BullardAnalysis_' int2str(Trial) '_' int2str(Iteration) '.tiff'']})); ' ...
                'ScreenSize = get(0,''screensize''); ' ...
                'ScreenSize(4) = ScreenSize(4)*0.95; ' ...
                'pause(1); ' ...
                'eval([''screencapture(0,''''position'''', ScreenSize ,'''''',PrintName,'''''');'']);' ...
                'set(BullardFig(5:9,3,' num2str(FigNumber) '),''visible'',''off''); ' ...
                'refresh'];
        BullardFig(2,4,FigNumber) = uicontrol('Style','pushbutton', ...
            'units','normalized', ...
            'position',[0.1 0.02 0.08 0.035], ...
            'string','Screengrab', ...
            'fontsize',12, ...
            'backgroundcolor',[0.15 0.15 0.15], ...
            'foregroundcolor','y', ...
            'callback',CallBackSaveString);
        
        
        
    end
    
end

if all(Mode == [3 1]) | all(Mode == [3 4]) | all(Mode == [3 5]) | all(Mode == [3 6])
    if PulseData 
        set(BullardFig(5:9,3,FigNumber),'visible','on');
        set(BullardFig(4,2,FigNumber),'xcolor','k','ycolor','k');
        PrintName = [ResName '_BullardAnalysis_' int2str(Trial) '_' int2str(Iteration) '.ps'];
        eval(['print -dpsc -noui -f' num2str(BullardFig(1,1,FigNumber)) ' ' PrintName]);
        set(BullardFig(5:9,3,FigNumber),'visible','off');
        set(BullardFig(4,2,FigNumber),'xcolor','y','ycolor','y');   
        refresh;
    end
end


% ==========================================================================
% 
% -----   HFREGANALYSIS  -----
%
% ==========================================================================


function [Scatter, ...
        TempOverDepth, ...
        Sigmaa, ...
        Sigmab] = ...
    HFREGANALYSIS(SensorsUsedForBullardFit, ...
    GoodkIndex, ...
    ShiftedRelativeDepths, ...
    ShiftedBullardDepths, ...
    EqTemp, ...
    EqTempError, ...
    k, ...
    Mode);

global NumberOfSensors ResName Trial

% Go through N trials
% -------------------

lUsable = length(SensorsUsedForBullardFit);
NFit = lUsable-2;

% MH errortrap. If only 2 sensors penetrate, then the following loop will
% crash - no purpose in doing the regression analysis. Simply return
if NFit == 0
    Scatter = [];
    TempOverDepth = [];
    Sigmaa = [];
    Sigmab = [];
    return
end

% Define what sensors to use
% --------------------------

BullardDepthsToUse = ShiftedBullardDepths(GoodkIndex);
EqTempToUse = EqTemp(SensorsUsedForBullardFit);
EqTempErrorToUse = EqTempError(SensorsUsedForBullardFit);
idx = find(EqTempErrorToUse < 1e-8);
if ~isempty(idx)
    EqTempErrorToUse(idx) = mean(EqTempErrorToUse)/100 + 1e-8;
end    
UseLength = lUsable;


for i=1:NFit
    if length(1:UseLength-(NFit-i)) > 1
        X = BullardDepthsToUse(1:UseLength-(NFit-i))';
        Y = EqTempToUse(1:UseLength-(NFit-i))';
        Sigma = EqTempErrorToUse(1:UseLength-(NFit-i))'/2;    
        [A(i),B(i),Sigmaa(i),Sigmab(i),Chi2(i),Scatter(i),Covab(i),rab(i),Q(i)] ...
            = CHI2FIT(X,Y,Sigma);
    end   
end

DepthAtZero = -A./B;
TempOverDepth = B;
TempDepthError = Sigmab;

% Plot Heat Flow and Scatter results
% ----------------------------------

if (Mode(1) ~= 3)
    PLOTHFREGRESSION(UseLength,Scatter,TempOverDepth,Sigmaa,Sigmab,Q);
end

if all(Mode == [3 1]) | all(Mode == [3 4]) | all(Mode == [3 6])
    PLOTHFREGRESSION(UseLength,Scatter,TempOverDepth,Sigmaa,Sigmab,Q);
    PrintName = [ResName '_ScatterPlot_' int2str(Trial) '.ps'];
    eval(['print -dpsc -noui ' PrintName]);
end

% Print out results
% -----------------

SBD = NaN*[1:NumberOfSensors];
SBD(SensorsUsedForBullardFit) = ShiftedBullardDepths(GoodkIndex);

HeatFlowResults1 = [ ...
        [1:NumberOfSensors]' ...
        EqTemp' ...
        EqTempError'/2 ...
        ShiftedRelativeDepths' ...
        SBD' ...
        k ...
]';

HeatFlowResults2 = [ ...
        [1:NFit]' ...
        [UseLength-(NFit-1):UseLength]' ...
        DepthAtZero' ...
        TempOverDepth' ...
        Scatter' ...
        Sigmaa' ...
        Sigmab' ...
        Q' ...
    ]';

PRINTOUTHFRESULTS(HeatFlowResults1,HeatFlowResults2,SensorsUsedForBullardFit)


% ==========================================================================
% 
% -----   PLOTHFREGRESSION  -----
%
% ==========================================================================

function PLOTHFREGRESSION(NumberOfSensors,Scatter,TempOverDepth,Sigmaa,Sigmab,Q)

global HFRegressionFig Trial 
global FigSpace

HFRegressionFig(1,1,Trial) = figure( ...
    'position',[FigSpace], ...
    'color',[0.25 0.25 0.25], ...
    'MenuBar','none', ...
    'numbertitle','off', ...
    'Name',['G - Heat Flow Regression Analysis - Trial ' int2str(Trial)]);

HFRegressionFig(1,2,Trial) = axes('position',[0.1 0.525 0.8 0.4]);
HFRegressionFig(2,2,Trial) = axes('position',[0.1 0.075 0.8 0.4]);

Nfit = length(TempOverDepth);

axes(HFRegressionFig(1,2,Trial))

[a,h1,h2]=plotyy([1:Nfit],TempOverDepth,[1:Nfit],Scatter);

set(a(1),'xcolor','r', ...
    'ycolor','y', ...
    'color','k', ...
    'xtick',[1:Nfit], ...
    'xticklabel',[], ...
    'fontsize',11, ...
    'xgrid','on')
set(h1,'marker','*', ...
    'color','y')
set(a(2),'xcolor','r', ...
    'ycolor','c', ...
    'xaxislocation','top', ...
    'xtick',[1:Nfit], ...
    'xticklabel',[NumberOfSensors-Nfit+1:NumberOfSensors], ...
    'fontsize',11)
set(h2,'marker','d','color','c')
set(get(a(2),'xlabel'), ...
    'string','\bfNumber of points used', ...
    'fontsize',12, ...
    'verticalalignment','bottom')
set(get(a(1),'ylabel'), ...
    'string','\bfHeat Flow (W m^{-2})', ...
    'fontsize',12, ...
    'verticalalignment','bottom')
set(get(a(2),'ylabel'), ...
    'string','\bfScatter \fontsize{11}\rm(dimensionless)', ...
    'fontsize',12, ...
    'verticalalignment','top')

axes(HFRegressionFig(2,2,Trial))

[a,h1,h2]=plotyy([1:Nfit],Sigmab,[1:Nfit],Sigmab.*Scatter/max(Sigmab.*Scatter));

set(a(1),'xcolor','r', ...
    'ycolor','y', ...
    'color','k', ...
    'fontsize',11, ...
    'xtick',[1:Nfit], ...
    'xgrid','on')
set(h1,'marker','*', ...
    'color','y', ...
    'linestyle','--')
set(a(2),'xcolor','r', ...
    'ycolor','c', ...
    'xaxislocation','top', ...
    'xtick',[1:Nfit], ...
    'xticklabel',[], ...
    'fontsize',11)
set(h2,'marker','d', ...
    'color','c', ...
    'linestyle','--')
set(get(a(1),'xlabel'), ...
    'string','\bfTrial number', ...
    'fontsize',12, ...
    'verticalalignment','top')
set(get(a(1),'ylabel'), ...
    'string','\fontsize{16}\sigma\fontsize{12}\bf_{HF} (W m^{-2})', ...
    'fontsize',12, ...
    'verticalalignment','bottom');
set(get(a(2),'ylabel'), ...
    'string','\fontsize{16}\sigma\fontsize{12}\bf_b \rmx\bf Scatter \fontsize{11}\rm(normalized)', ...
    'fontsize',12)


% ==========================================================================
% 
% -----   PRINTOUTHFRESULTS  -----
%
% ==========================================================================

function PRINTOUTHFRESULTS(HeatFlowResults1,HeatFlowResults2,SensorsUsedForBullardFit)

global ResFileId LogFileId NumberOfColumns NumberOfSensors SensorsToUse
global BadT Badk Iteration Trial PulseData

NC = NumberOfColumns;
SensorsIgnored = setxor(1:NumberOfSensors,SensorsToUse);


HeatFlowResults1(2,BadT) = -88*ones(1,length(BadT));
HeatFlowResults1(2,BadT) = -88*ones(1,length(BadT));
HeatFlowResults1(5,Badk) = -88*ones(1,length(Badk));
HeatFlowResults1(6,Badk) = -88*ones(1,length(Badk));
HeatFlowResults1(5,BadT) = -88*ones(1,length(BadT));

HeatFlowResults1(1,SensorsIgnored) = - HeatFlowResults1(1,SensorsIgnored);
HeatFlowResults1(2,SensorsIgnored) = -99*ones(1,length(SensorsIgnored));
HeatFlowResults1(3,SensorsIgnored) = -99*ones(1,length(SensorsIgnored));
HeatFlowResults1(5,SensorsIgnored) = -99*ones(1,length(SensorsIgnored));
HeatFlowResults1(6,SensorsIgnored) = -99*ones(1,length(SensorsIgnored));

for Id = [LogFileId ResFileId]
    
    String = ['RESULTS OF HEAT FLOW REGRESSION ANALYSIS - TRIAL # ' int2str(Trial)];
    fprintf(Id,'%s\n',[repmat(' ',1,fix((NC-length(String))/2)) ...
            repmat('-',1,length(String))]);
    fprintf(Id,'%s\n',[repmat(' ',1,fix((NC-length(String))/2)) String]);
    fprintf(Id,'%s\n\n\n',[repmat(' ',1,fix((NC-length(String))/2)) ...
            repmat('-',1,length(String))]);
    
    if isempty(SensorsIgnored)
        fprintf(Id,'%s\n\n','No sensors ignored in initial processing ...');
    else
        fprintf(Id,'%s\n\n',['Sensors ' int2str(SensorsIgnored) ...
                ' were ignored in initial processing ...']);
    end
    
    if isempty(BadT)
        fprintf(Id,'%s\n','No Temperature discarded ...');
    else
        fprintf(Id,'%s\n',['Temperatures ' int2str(BadT) ...
                ' are discarded ...']);
    end
          
    if isempty(Badk)
        fprintf(Id,'%s\n\n','No Conductivity discarded ...');
    else
        fprintf(Id,'%s\n\n',['Conductivities ' int2str(Badk) ...
                ' are discarded ...']);
    end
    
    [nr,nc] = size(SensorsUsedForBullardFit);
    if nr==1
        fprintf(Id,'%s\n\n',['Sensors ' int2str(SensorsUsedForBullardFit) ...
                ' are used in this analysis']);
    else
        fprintf(Id,'%s\n\n',['Sensors ' int2str(SensorsUsedForBullardFit') ...
                ' are used in this analysis']);
    end
 
    fprintf(Id,'%s\n', ...
        'Sensor  Sed. Temp.  63% Error  Depth  Bullard Depth  Conductivity');
    fprintf(Id,'%s\n', ...
        '  Id.     (degC)      (deg)     (m)    (m2 degC/W)    (W/m/degC)');
    fprintf(Id,'%s\n\n', ...
        '------  ----------  ---------  -----  -------------  ------------');
    fprintf(Id, ...
        '%4d %10.3f %12.1e %7.2f %10.3f %12.3f\n',HeatFlowResults1);
    
    fprintf(Id,'\n%s\n','(-Id. <=> Sensor is ignored in all the processing)');
    fprintf(Id,'%s\n','(-99 <=> Sensor is ignored in all the processing)');
    fprintf(Id,'%s\n','(-88 <=> Temperature or Conductivity is discarded)');
    fprintf(Id,'\n\n');
    
    fprintf(Id,'%s\n', ...
        'Regression results for chi-square fit of data to: Temp = a + b * Depth');
    fprintf(Id,'%s\n\n', ...
        '----------------------------------------------------------------------');
    fprintf(Id,'%s\n', ...
        'Trial  # Pts  Depth   T/z    Scatter   Sigmaa   Sigmab   Q');
    fprintf(Id,'%s\n', ...
        '               (m)   (W/m2) ');
    fprintf(Id,'%s\n\n', ...
        '-----  -----  -----  ------  -------  -------  -------  ---');
    fprintf(Id, ...
        '%3d %6d %8.3f  %6.4f %7.2f %9.1e %8.1e %4.1f\n',HeatFlowResults2);
    fprintf(Id,'\n%s\n\n\n', ...
        '----------------------------------------------------------------------');
    
end


% ==========================================================================
% 
% -----   CHI2FIT  -----
%
% ==========================================================================

function [a,b,Sigmaa,Sigmab,Chi2,Scatter,Covab,rab,Q] = CHI2FIT(X,Y,Sigma)

% [a,b,Sigmaa,Sigmab,Chi2,Scatter,Covab,rab,Q] = CHI2FIT(X,Y,Sigma) - 02.22.2001
%
% CHI2FIT fits a linear function Y = a + b.X to N points (X,Y) with associated 
% uncertainties (standard deviations) Sigma.  The fit minimizes Chi-square
% which yields the maximum likelihood parameter estimation of a & b.  Note
% that if the errors are not normally distributed then the estimations are
% not maximum likelihood, but may still be useful in a practical sense.
% Sigmaa and Sigmab are the probable uncertainty in the estimates of a & b.
% Covab is the covariance of a & b and is required to estimate rab, the
% coefficient of correlation  between the uncertainty in a & b. -1 < rab < 1
% with negative values indicating an anticorrelation and positive ones a
% normal correlation.
% Q estimates the goodness-of-fit:  It is the probability that Chi2 exceeds 
% a certain value of Chi2 by chance.  When Q is larger than 0.1 the goodness-
% of-fit is believable; above 0.001 it remains acceptable.   Note that if
% Sigma is unavailable then Sigma = 1 for all points which is equivalent to
% assume a good fit and Q is meaningless.
%
% X, Y, and Sigma are either column vectors or matrices which columns 
% correspond to multiple vectors x, y, Sigma to fit.
%
% Based on the FIT routine from Numerical Recipes (p.502-509, 1989 edition)
%
% Abdellah Cherkaoui - abdul@emerald.ucsc.edu

% Initialization
% --------------

[Dimension1 Dimension2] = size(X);
if nargin<3; Sigma=ones(Dimension1,Dimension2); end

N = Dimension1;

% Compute intermediate sums
% -------------------------

S = repmat(sum(1./Sigma.^2),N,1);
Sx = repmat(sum(X./Sigma.^2),N,1);
Sy = repmat(sum(Y./Sigma.^2),N,1);
t = (X-Sx./S)./Sigma;
Stt = repmat(sum(t.^2),N,1);

% Compute output arguments
% ------------------------

b = repmat(sum((X-Sx./S).*Y./Sigma.^2),N,1)./Stt;
a = (Sy-b.*Sx)./S;
Sigmaa = sqrt((1+Sx.^2./S./Stt)./S);
Sigmab = sqrt(1./Stt);
Covab = -Sx./S./Stt;
rab = Covab./(Sigmaa.*Sigmab);

Chi2 = sum((Y-a-b.*X).^2./Sigma.^2);
Scatter = sqrt(Chi2/(N-1));
Q = 1-gammainc(Chi2/2,(N-2)/2);

% If Sigma is unavailable correct Sigmaa and Sigmab
% -------------------------------------------------

if nargin<3
    Sigmaa = Sigmaa.*sqrt(repmat(Chi2,N,1)/(N-2));
    Sigmab = Sigmab.*sqrt(repmat(Chi2,N,1)/(N-2));
end

% Output results of first row only (it is repeated to vectorize calculations)
% ---------------------------------------------------------------------------

a = a(1,:);
b = b(1,:);
Sigmaa = Sigmaa(1,:);
Sigmab = Sigmab(1,:);
Covab = Covab(1,:);
rab = rab(1,:);


% ==========================================================================
%
% -----   MONTECARLOHP   -----
%
% ==========================================================================

function MONTECARLOHP(ShiftedRelativeDepths, ...
    T0, ...
    k0, ...
    RelativeDepths, ...
    SensorDistance, ...
    MaxMCIterations, ...
    MinThickness, ...
    Mode, ...
    VarDist)

% MH Debug PC: Verbose
disp('running montecarlo -- HP');

%keyboard


global MonteCarloFig PulseData
global FigSpace CMap
global NumberOfSensors BadT Badk SensorsToUse
global PenFile ResName LogFileId ResFileId
global kAnisotropy

if all(Mode == [2 0]) | all(Mode == [3 5]) | all(Mode == [3 6])
    
    % Define figure
    % -------------
    
    MonteCarloFig(1,1) = figure( ...
        'position',[FigSpace], ...
        'color',[0.25 0.25 0.25], ...
        'MenuBar','none', ...
        'numbertitle','off', ...
        'Name',['H - Monte-Carlo Analysis - Data with Heat Pulse']);
    orient landscape;
    
    POINTER(1);
    
    MonteCarloFig(1,2) = axes('position',[0.07 0.18 0.22 0.72],'color','k');
    MonteCarloFig(2,2) = axes('position',[0.36 0.18 0.22 0.72],'color','k');
    MonteCarloFig(3,2) = axes('position',[0.65 0.18 0.22 0.72],'color','k');
    MonteCarloFig(4,2) = axes('position',[0.92 0.18 0.02 0.72],'color',[0.25 0.25 0.25],...
            'YColor',[0.25 0.25 0.25],'XColor',[0.25 0.25 0.25]); % Colorbar 
    MonteCarloFig(5,2) = axes('position',[0.07 0.09 0.22 0.07],'color',[0.25 0.25 0.25]);   
    MonteCarloFig(6,2) = axes('position',[0.36 0.09 0.22 0.07],'color',[0.25 0.25 0.25]);
    MonteCarloFig(7,2) = axes('position',[0.65 0.09 0.22 0.07],'color',[0.25 0.25 0.25]);
    MonteCarloFig(8,2) = axes('position',[0.02 0.01 0.96 0.06],'color',[0.25 0.25 0.25]);
    
    set(gca,'visible','off')
    
end

% Define what sensors to use
% --------------------------

GoodT = setxor([1:NumberOfSensors],BadT);
Goodk = setxor([1:NumberOfSensors],Badk);

TToUse = intersect(GoodT,SensorsToUse);    % SensorsToUse for T.
kToUse = intersect(Goodk,SensorsToUse);    % SensorsToUse for k.

% Initial Bullard calculation
% ---------------------------

[ ...
        SensorsUsedForBullardFit, ...
        GoodkIndex, ...
        ShiftedBullardDepths0, ...
        ShiftedRelativeDepths0, ...
        SigmaR, ...
        PenetrationLag, ...
        Slope0, ...
        Shift ...
] = BULLARDANALYSIS(RelativeDepths, ...
    k0, ...
    T0', ...
    Mode);

QMin = 1/Slope0(2);
QMax = 1/Slope0(2);

% Initialize iterative process
% ----------------------------

Iterations = NaN*ones(MaxMCIterations,1);
T = NaN*ones(MaxMCIterations,length(SensorsUsedForBullardFit));
Rz = NaN*ones(MaxMCIterations,length(SensorsUsedForBullardFit));
Q = NaN*ones(MaxMCIterations,1);
SigmaHF = NaN*ones(MaxMCIterations,1);

% Generate Random boundaries given ShiftedRelativeDepths0 !
% ---------------------------------------------------------

% Limits on Boundaries
% --------------------

zToUse = ShiftedRelativeDepths(kToUse);

zLims = [zToUse(1:length(zToUse)-1) - MinThickness/2; ...
        zToUse(2:length(zToUse)) + MinThickness/2];

zBD = repmat(zLims(1,:),MaxMCIterations,1) ...
    + rand(MaxMCIterations,length(zToUse)-1) ...
    .* repmat(diff(zLims),MaxMCIterations,1);

% TESTING THERMAL CONDUCTIVITY ANISOTROPY
% ----------------------------------------------- 
% 17 March 2016
%
%kAnisotropy = 0.0; % Hardwire Anisotropy for now (testing)
disp([' Random K anisotropy of ',num2str(kAnisotropy),' assigned...']);

% Generate random thermal conductivities. Measured is
% assumed to contain higher value due to anisotropy.
%a             = k0(kToUse);
a             = k0;
b             = a - (1-kAnisotropy) * a;
k0_Anisotropy = NaN(size(a));
foo=1;
while foo<=MaxMCIterations    
    r           = a - (b-a).*rand(1,1);
    % Assign k0 values with random 
    k0_Anisotropy(foo,:)=r;
    foo=foo+1;
end

% Plot Conductivity distribution
% ------------------------------

if all(Mode == [2 0]) | all(Mode == [3 5]) | all(Mode == [3 6])
    
    axes(MonteCarloFig(1,2));
    hold on

    % TESTING THERMAL CONDUCTIVITY ANISOTROPY
    % ----------------------------------------------- 
    % 17 March 2016
    % Following original line commented out (fixed x):
    %   x = repmat([k0(kToUse(1)) k0(kToUse)],MaxMCIterations,1);
    % Replaced with:
    %
    %x = [ repmat(k0(kToUse(1)),100,1) k0_Anisotropy(kToUse)];
    x = [k0_Anisotropy(:,kToUse(1)) k0_Anisotropy(:,kToUse)]; 
    y = [zToUse(1)*ones(MaxMCIterations,1) zBD zeros(MaxMCIterations,1)];
    Hdl = stairs(x',y');
    set(Hdl,'color',[0.35 0.35 0.35])
    hold on
    
    % TESTING THERMAL CONDUCTIVITY ANISOTROPY
    % ----------------------------------------------- 
    % 17 March 2016
    % Replaced following "for i = ..." loop in order to plot all the random
    % conductivities as well using both "i" and "j" loops
    %
    %for i = SensorsToUse
    %    plot(k0(i),ShiftedRelativeDepths(i),'d', ...
    %        'color',CMap(i,:), ...
    %        'markerfacecolor',CMap(i,:), ...
    %        'markersize',6)
    %end

    i=1;
    kSensorsToPlot = setxor(Badk,SensorsToUse);
    while i<=length(kSensorsToPlot);
        CurrentSensor = kSensorsToPlot(i);
        % Plot original k0 (no anisotropy)
        plot(k0(CurrentSensor),ShiftedRelativeDepths(CurrentSensor),'o', ...
            'color',CMap(CurrentSensor,:), ...
            'markersize',6, ...
            'markerfacecolor',CMap(CurrentSensor,:))
        j=1;
        while j<=MaxMCIterations
            plot(k0_Anisotropy(j,CurrentSensor),ShiftedRelativeDepths(CurrentSensor),'d', ...
                'color',CMap(CurrentSensor,:), ...
                'markersize',2);
                %'markerfacecolor',CMap(CurrentSensor,:), ...
                %'markersize',6)
            j=j+1;
        end
        
        i=i+1;
    end
  
    plot(k0(intersect(Badk,SensorsToUse)), ...
        ShiftedRelativeDepths(intersect(Badk,SensorsToUse)),'w+','markersize',15);
%
    set(gca, ...
        'xcolor','y', ...
        'ycolor','y', ...
        'color','k', ...
        'ydir','reverse', ...
        'xaxislocation','top', ... 
        'ylim',[0 max(ShiftedRelativeDepths0)+0.5]);
    xlabel('\bfThermal Conductivity (W m^{-1} ^oC^{-1})', ...
        'fontsize',12, ...
        'verticalalignment','bottom')
    ylabel(['\bfRelative Depths (m)'], ...
        'fontsize',12, ...
        'verticalalignment','bottom')

    axes(MonteCarloFig(5,2));
    hold on
    MonteCarloFig(1,3) = text(0.5,0.9, ...
        ['Layer thickness distribution'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','w', ...
        'fontweight','bold');
    MonteCarloFig(2,3) = text(0.5,0.6, ...
        [' - ' int2str(MaxMCIterations) ' picks for each layer.'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','w');
    MonteCarloFig(3,3) = text(0.5,0.3, ...
        ['Minimum thickness: ' num2str(MinThickness,'%1.3f') ' m'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','w');
     MonteCarloFig(4,3) = text(0.5,0.0, ...
        ['K Anisotropy: ' num2str(abs(1-kAnisotropy)*100,'%1.0f') ' %'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','w');
    set(MonteCarloFig(5,2),'visible','off')
end

    % Plot InitialBullard Plot
    % ------------------------
    
if all(Mode == [2 0]) | all(Mode == [3 5]) | all(Mode == [3 6])
    
    axes(MonteCarloFig(2,2))
    hold on
    for i = 1:length(SensorsUsedForBullardFit)
        plot(T0(SensorsUsedForBullardFit(i)),ShiftedBullardDepths0(GoodkIndex(i)),'o', ...
            'color',CMap(SensorsUsedForBullardFit(i),:), ...
            'markerfacecolor',CMap(SensorsUsedForBullardFit(i),:))
    end
    
    plot([0 max(ShiftedBullardDepths0)+0.5]/Slope0(2), ...
        [0 max(ShiftedBullardDepths0)+0.5],'g-','linewidth',1)
    
    set(gca, ...
        'xcolor','y', ...
        'ycolor','y', ...
        'color','k', ...
        'ydir','reverse', ...
        'xaxislocation','top', ...
        'ylim',[0 max(ShiftedBullardDepths0)+0.5]);
    xlabel('\bfTemperature ( ^oC)', ...
        'fontsize',12, ...
        'verticalalignment','bottom')
    ylabel('\bfCumulative Thermal Resistance (m^2 ^oC W^{-1})', ...
        'fontsize',12, ...
        'verticalalignment','bottom')
    
    axes(MonteCarloFig(6,2))
    hold on
    MonteCarloFig(1,4) = text(0.5,0.9, ...
        ['Heat Flow'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','w', ...
        'fontweight','bold');
    MonteCarloFig(2,4) = text(0.5,0.6, ...
        ['With initial depth profile:  ' num2str(1/Slope0(2),'%1.3f') ' W m^{-2}'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','w');
    MonteCarloFig(3,4) = text(0.5,0.3, ...
        ['At current iteration:  NaN W m^{-2}'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','w');
    MonteCarloFig(4,4) = text(0.5,0, ...
        ['Range:  [' num2str(QMin,'%1.3f') ...
            '  ' num2str(QMax,'%1.3f') '] W m^{-2}'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','w');
    
    set(MonteCarloFig(6,2),'visible','off')
    
    
    % Initialize Iterations plot
    % --------------------------
    
    axes(MonteCarloFig(3,2))
    hold on
    set(gca, ...
        'xcolor','y', ...
        'ycolor','y', ...
        'color','k', ...
        'ydir','reverse', ...
        'xaxislocation','top', ...
        'ylim',[0 MaxMCIterations]);
    xlabel('\bfHeat Flow Standard deviation (W m^{-2})', ...
        'fontsize',12, ...
        'verticalalignment','bottom')
    ylabel('\bfIteration', ...
        'fontsize',12, ...
        'verticalalignment','bottom')
    
    axes(MonteCarloFig(7,2))
    hold on
    MonteCarloFig(1,5) = text(0.5,0.9, ...
        ['Monte-Carlo Analysis'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','w', ...
        'fontweight','bold');
    MonteCarloFig(2,5) = text(0.5,0.6, ...
        ['Current iteration:  NaN/' int2str(MaxMCIterations)], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','w');
    MonteCarloFig(3,5) = text(0.5,0.3, ...
        ['Mean Heat Flow:  NaN W m^{-2}'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','w');
    MonteCarloFig(4,5) = text(0.5,0, ...
        ['Standard deviation:  NaN W m^{-2}'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','w');
    set(MonteCarloFig(7,2),'visible','off')
    
    % Plot Sensors colorbar
    % ---------------------
    
    axes(MonteCarloFig(4,2))
    hold on
   
    AlteredCMap = CMap;
    AlteredCMap(setxor(1:NumberOfSensors,SensorsToUse),:) = ...
        repmat([0.15 0.15 0.15],length(setxor(1:NumberOfSensors,SensorsToUse)),1);
    colormap(AlteredCMap)
    %colorbar(MonteCarloFig(4,2))
    % MH SlugHeat15 Colorbar
        h_colorbar=colorbar;
        h_colorbar.Position(3)=0.020;
        h_colorbar.Color='y';
        h_colorbar.FontWeight='bold';
        h_colorbar.FontSize=12;
        h_colorbar.Box='off';
        h_colorbar.AxisLocation='in';
        h_colorbar.Label.String='Sensor Number';
        caxis([0 NumberOfSensors])        
        h_colorbar.Ticks=0.5:1:NumberOfSensors;
        h_colorbar.TickLabels={[1:1:NumberOfSensors]};
    
    %caxis([1 NumberOfSensors])
    
    %set(MonteCarloFig(4,2), ...
    %    'xcolor','y', ...
    %    'ycolor','y', ...
    %    'ytick',[1.5:NumberOfSensors+0.5], ...
    %    'yticklabel',[1:NumberOfSensors], ...
    %    'ticklength',[0 0])
    %ylabel('\bfSensor Number', ...
    %    'verticalalignment','top', ...
    %    'fontsize',12)
    
end

% Initialize Counters and begin analysis
% --------------------------------------

% MH -- Waitbar
% initialize waitbar
H_wait=waitbar(0,'Iterating...');
set(H_wait,'units','normalized');
set(H_wait,'position',[0.45 0.85 0.25 0.1]);

% TESTING THERMAL CONDUCTIVITY ANISOTROPY
% ----------------------------------------------- 
% 17 March 2016
%
% SAVE INITIAL THERMAL CONDUCTIVITY (k0) as k0_Saved
k0_Saved = k0;

for n = 1:MaxMCIterations
    
    Iterations(n) = n;
    
    % MH -- Watibar update
    waitbar(n/MaxMCIterations);
    
    % TESTING THERMAL CONDUCTIVITY ANISOTROPY
    % ----------------------------------------------- 
    % 17 March 2016
    %    
    % Assign k0 values with random Anisotropy ones
    k0 = k0_Anisotropy(n,:);
    
    % Plot Current profile
    % --------------------
    
    if all(Mode == [2 0]) | all(Mode == [3 5]) | all(Mode == [3 6])
        
        axes(MonteCarloFig(1,2));
        if n>1
            delete(PreviousProfile)
            delete(PreviousPoints)
        end
        PreviousProfile = stairs(x(n,:),y(n,:),'w','linewidth',1);
        PreviousPoints  = plot(x(n,:),y(n,:),'o','markersize',4, ...
            'color',[0.95 0.95 0.95]);
    end
    
    
    % Now compute Bullard Depths and Associated Error
    % ----------------------------------------------- 
    BullardDepths(length(kToUse)) = zToUse(end)/k0(kToUse(end));
    
    for i = length(kToUse)-1:-1:1
        BullardDepths(i) = BullardDepths(i+1) + (zBD(n,i)-zToUse(i+1))/k0(kToUse(i+1)) ...
            + (zToUse(i)-zBD(n,i))/k0(kToUse(i));
    end
    
    [p,s] = polyfit(T0(SensorsUsedForBullardFit)',BullardDepths(GoodkIndex),1);
    Shift = -p(2);
    Slope = p(1);
    
    ShiftedBullardDepths = BullardDepths + Shift;
    
    % Now do the Monte-Carlo !
    % ------------------------
    
    AllT(:,n) = T0(SensorsUsedForBullardFit);
    AllBullardDepths(:,n) = ShiftedBullardDepths(GoodkIndex)';
    AllHeatFlows(n) = 1/Slope;
    T(n,:) = mean(AllT,2)';
    SigmaTD = std(AllT,0,2);
    Rz(n,:) = mean(AllBullardDepths,2)';
    SigmaR = std(AllBullardDepths,0,2);
    Q(n) = mean(AllHeatFlows);
    SigmaTI = Q(n)*SigmaR;
    SigmaT = sqrt(SigmaTI.^2 + SigmaTD.^2);
    if any(SigmaT == 0)
        Delta = 0;
        SigmaHF(n) = NaN;
    else
        Delta = sum(1./SigmaT.^2)*sum(Rz(n,:)'.^2./SigmaT.^2) ...
            -(sum(Rz(n,:)'./SigmaT.^2)).^2;
        SigmaHF(n) = sqrt(sum(1./SigmaT.^2)/Delta);
    end
    
    if 1/Slope>QMax; QMax = 1/Slope; end
    if 1/Slope<QMin; QMin = 1/Slope; end
    
    if all(Mode == [2 0]) | all(Mode == [3 5]) | all(Mode == [3 6])
        
        axes(MonteCarloFig(2,2))
        hold on
        for i = 1:length(SensorsUsedForBullardFit)
            plot(AllT(i,n),AllBullardDepths(i,n),'+', ...
                'markersize',5, ...
                'color',CMap(SensorsUsedForBullardFit(i),:))
        end
        plot([0 max(ShiftedBullardDepths)+0.5]/Slope, ...
            [0 max(ShiftedBullardDepths)+0.5],'w:')
        
        axes(MonteCarloFig(3,2))
        hold on
        plot(SigmaHF,Iterations,'w-o', ...
            'markersize',4)
        
        set(MonteCarloFig(3,4),'string', ...
            ['At Current Iteration:  ' num2str(1/Slope,'%1.3f') ' W m^{-2}']); 
        set(MonteCarloFig(4,4),'string', ...
            ['Range:  [' num2str(QMin,'%1.3f') ...
                '  ' num2str(QMax,'%1.3f') '] W m^{-2}']);
        set(MonteCarloFig(2,5),'string' ,...
            ['Iteration:  ' int2str(n) '/' int2str(MaxMCIterations)]);
        set(MonteCarloFig(3,5),'string', ...
            ['Mean Heat Flow:  ' num2str(Q(n),'%1.5f') ' W m^{-2}']);
        set(MonteCarloFig(4,5),'string', ...
            ['Standard deviation:  ' num2str(SigmaHF(n),'%1.5f') ' W m^{-2}']);
        
        drawnow
        
    end
end

% MH -- Close Waitbar
close(H_wait);

if all(Mode == [2 0]) | all(Mode == [3 5]) | all(Mode == [3 6])
    
    axes(MonteCarloFig(2,2))
    hold on
    for i = 1:length(SensorsUsedForBullardFit)
        plot(T0(SensorsUsedForBullardFit(i)),ShiftedBullardDepths0(GoodkIndex(i)),'o', ...
            'color',CMap(SensorsUsedForBullardFit(i),:), ...
            'markerfacecolor',CMap(SensorsUsedForBullardFit(i),:))
        hold on
    end
    
    plot([0 max(ShiftedBullardDepths0)+0.5]/Slope0(2), ...
        [0 max(ShiftedBullardDepths0)+0.5],'g-','linewidth',1)
    
    % Print and Save buttons
    % ----------------------
    
    axes(MonteCarloFig(8,2))
    MonteCarloFig(1,6) = text(0.5,1,['\bf' ResName], ...
        'verticalalignment','top', ...
        'horizontalalignment','center', ...
        'fontsize',16);
    MonteCarloFig(2,6) = text(0,0.3,['Results: ' pwd '/' ResName '.res'], ...
        'verticalalignment','bottom', ...
        'horizontalalignment','left', ...
        'fontsize',9);
    MonteCarloFig(3,6) = text(0,0,['Penetration: ' PenFile], ...
        'verticalalignment','bottom', ...
        'horizontalalignment','left', ...
        'fontsize',9);
    MonteCarloFig(4,6) = text(1,0,['Processed: ' FORMATTIME], ...
        'verticalalignment','bottom', ...
        'horizontalalignment','right', ...
        'fontsize',9);
    set(MonteCarloFig(1:4,6),'visible','off');
    
    CallBackPrintString = ['global MonteCarloFig; ' ...
            'set(MonteCarloFig(1:4,6),''visible'',''on''); ' ...
            'print -dps -noui -f' num2str(MonteCarloFig(1,1)) '; ' ...
            'set(MonteCarloFig(1:4,6),''visible'',''off''); ' ...
            'refresh'];
    MonteCarloFig(1,7) = uicontrol('Style','pushbutton', ...
        'units','normalized', ...
        'position',[0.02 0.02 0.08 0.035], ...
        'string','Print', ...
        'tooltipstring','Click to send this figure to your default printer (B&W)', ...
        'fontsize',12, ...
        'backgroundcolor',[0.15 0.15 0.15], ...
        'foregroundcolor','y', ...
        'callback',CallBackPrintString);
    
    CallBackSaveString = ['global MonteCarloFig ResName; ' ...  
        'set(MonteCarloFig(1:4,6),''visible'',''off''); ' ...
        'PrintName = char(inputdlg(' ...
        '{''Enter file name:''},' ...
        '''Tiff file name'',' ...
        '[1 48],{[''04_'' ResName ''_MonteCarloAnalysis.tiff'']})); ' ...
        'ScreenSize = get(0,''screensize''); ' ...
        'ScreenSize(4) = ScreenSize(4)*0.95; ' ...
        'pause(1); ' ...
        'eval([''screencapture(0,''''position'''', ScreenSize ,'''''',PrintName,'''''');'']);' ...
            'set(MonteCarloFig(1:4,6),''visible'',''off''); ' ...       
            'refresh'];

    MonteCarloFig(2,7) = uicontrol('Style','pushbutton', ...
        'units','normalized', ...
        'position',[0.1 0.02 0.08 0.035], ...
        'string','Screengrab', ...
        'fontsize',12, ...
        'backgroundcolor',[0.15 0.15 0.15], ...
        'foregroundcolor','y', ...
        'callback',CallBackSaveString);
    
end

if  all(Mode == [3 5]) | all(Mode == [3 6])
    
    set(MonteCarloFig(1:4,6),'visible','on');
    set(MonteCarloFig(3:4,2),'xcolor','k','ycolor','k')
    set(MonteCarloFig(1:4,5),'color','k')
    PrintName = [ResName '_Monte-Carlo.ps'];
    eval(['print -dpsc -noui -f' num2str(MonteCarloFig(1,1)) ' ' PrintName]);
    set(MonteCarloFig(1:4,6),'visible','off');
    set(MonteCarloFig(3:4,2),'xcolor','y','ycolor','y')
    set(MonteCarloFig(1:4,5),'color','y')
    refresh;
    
end
    
PRINTOUTMCRESULTS( ...
    MaxMCIterations, ...
    T(end,:), ...
    Rz(end,:), ...
    Q(end), ...
    SigmaHF(end), ...
    QMin, ...
    QMax, ...
    ShiftedRelativeDepths, ...
    RelativeDepths, ...
    k0, ...
    MinThickness, ...
    T0, ...
    SensorsUsedForBullardFit);

eval([' save ' ResName '_MonteCarlo ' ...
        'MaxMCIterations T Rz Q SigmaHF QMin QMax SensorsUsedForBullardFit ' ...
        'RelativeDepths ShiftedRelativeDepths k0 T0 MinThickness']);

STATUS(LogFileId,['Saved mat file: ' ResName ...
            '_MonteCarlo.mat with Monte-Carlo analysis results ...'],2);

% ==========================================================================
%
% -----   MONTECARLONOHP  -----
%
% ==========================================================================

function MONTECARLONOHP(ShiftedRelativeDepths, ...
    T0, ...
    k0, ...
    RelativeDepths, ...
    SensorDistance, ...
    MaxMCIterations, ...
    Sigmak0, ...
    SigmakFactors, ...
    kMin, ...
    kMax, ...
    MinThickness, ...
    Mode, ...
    UseFrictional, ...
    FricTime, ...
    FricTemp, ...
    FrictionalDelays, ...
    FricMaxStep, ...
    TimeInc, ...
    HyndmanCoeffs, ...
    SensorRadius, ...
    FricTauMin, ...
    FricTauMax, ...
    VarDist)

global MonteCarloFig PulseData
global FigSpace CMap
global NumberOfSensors BadT Badk SensorsToUse
global PenFile ResName
global LogFileId ResFileId

% MH Debug PC Verbose
disp('running MonteCarlo NO HP')

%
% Define figure
% -------------

if all(Mode == [2 0]) | all(Mode == [3 5]) | all(Mode == [3 6])
    
    MonteCarloFig(1,1) = figure( ...
        'position',[FigSpace], ...
        'color',[0.25 0.25 0.25], ...
        'MenuBar','none', ...
        'numbertitle','off', ...
        'Name',['H - Monte-Carlo Analysis - No Heat Pulse Data']);
    orient landscape;
    
    POINTER(1);
    
    MonteCarloFig(1,2) = axes('position',[0.07 0.18 0.22 0.72]);
    MonteCarloFig(2,2) = axes('position',[0.36 0.18 0.22 0.72]);
    MonteCarloFig(3,2) = axes('position',[0.65 0.18 0.22 0.72]);
    MonteCarloFig(4,2) = axes('position',[0.92 0.18 0.02 0.72]);
    MonteCarloFig(5,2) = axes('position',[0.07 0.09 0.22 0.07]);   
    MonteCarloFig(6,2) = axes('position',[0.36 0.09 0.22 0.07]);
    MonteCarloFig(7,2) = axes('position',[0.65 0.09 0.22 0.07]);
    MonteCarloFig(8,2) = axes('position',[0.02 0.01 0.96 0.06]);
    
    set(gca,'visible','off')
    
end

% Define what sensors to use
% --------------------------

GoodT = setxor([1:NumberOfSensors],BadT);
Goodk = setxor([1:NumberOfSensors],Badk);

TToUse = intersect(GoodT,SensorsToUse);    % SensorsToUse for T.
kToUse = intersect(Goodk,SensorsToUse);    % SensorsToUse for k.

% Initial Bullard calculation
% ---------------------------

[ ...
        SensorsUsedForBullardFit, ...
        GoodkIndex, ...
        ShiftedBullardDepths0, ...
        ShiftedRelativeDepths0, ...
        SigmaR, ...
        PenetrationLag, ...
        Slope0, ...
        Shift ...
] = BULLARDANALYSIS(RelativeDepths, ...
    k0, ...
    T0', ...
    Mode);

QMin = 1/Slope0(2);
QMax = 1/Slope0(2);

% Initialize arrays for iterative process
% ---------------------------------------

Iterations = NaN*ones(MaxMCIterations,1);
T = NaN*ones(MaxMCIterations,length(SensorsUsedForBullardFit));
Rz = NaN*ones(MaxMCIterations,length(SensorsUsedForBullardFit));
Q = NaN*ones(MaxMCIterations,1);
SigmaHF = NaN*ones(MaxMCIterations,1);

% Generate Random conductivities given ShiftedRelativeDepths !
% ------------------------------------------------------------

Bins = 25;
K0 = repmat(k0(kToUse),MaxMCIterations,1);
k = K0 + repmat(Sigmak0(kToUse),MaxMCIterations,1) ...
    .* randn(MaxMCIterations,length(kToUse));

idx = nan;
while ~isempty(idx)
    [idx,dummy] = find(k<kMin | k>kMax);
    k(idx,:) = K0(idx,:) + repmat(Sigmak0(kToUse),length(idx),1) ...
        .* randn(length(idx),length(kToUse));
end

% Generate Random boundaries given ShiftedRelativeDepths0 !
% ---------------------------------------------------------

zToUse = ShiftedRelativeDepths(kToUse);

zLims = [zToUse(1:length(zToUse)-1) - MinThickness/2; ...
        zToUse(2:length(zToUse)) + MinThickness/2];

zBD = repmat(zLims(1,:),MaxMCIterations,1) ...
    + rand(MaxMCIterations,length(zToUse)-1) ...
    .* repmat(diff(zLims),MaxMCIterations,1);

% Plot Conductivity distribution
% ------------------------------

if all(Mode == [2 0]) | all(Mode == [3 5]) | all(Mode == [3 6])

    axes(MonteCarloFig(1,2));

    x0 = repmat([k0(kToUse(1)) k0(kToUse)],MaxMCIterations,1);
    y0 = [zToUse(1)*ones(MaxMCIterations,1) zBD zeros(MaxMCIterations,1)];
    Hdl = stairs(x0',y0');
    set(Hdl,'color',[0.35 0.35 0.35])
    hold on
    
    x = [k0(kToUse(1)) k0(kToUse)];
    y = [ShiftedRelativeDepths(kToUse(1)) ShiftedRelativeDepths(kToUse(1:end-1)) ...
            + diff(ShiftedRelativeDepths(kToUse))/2 0];
   
    [N,X] = hist(k,Bins);
    dummy = diff(X);
    X = [X(1)-dummy(1)/2 X'-dummy(1)/2 X(end)+dummy(1)/2 X(end)+dummy(1)/2];
%
    dummy = diff(ShiftedRelativeDepths(kToUse));
    MaxN = max(max(N));
    
    stairs(x,y,'r');
%
% AF 9/02 max height of histograms - for variable spacing
%
           PlotSpace=min(abs(diff(SensorDistance)))
%
    for i = 1:length(kToUse)
        plot(k(:,i),ShiftedRelativeDepths(kToUse(i)),'.', ...
            'color',CMap(kToUse(i),:), ...
            'markersize',4)
% 
% AF 9/02 Scale histograms differently for constant or variable spacing
%
%        Y = ShiftedRelativeDepths(kToUse(i)) ...
%            - SensorDistance*[0 N(:,i)' N(end,i) 0]/MaxN;
%
        if VarDist == 1
           Y = ShiftedRelativeDepths(kToUse(i)) ...
             - PlotSpace*[0 N(:,i)' N(end,i) 0]/MaxN;
        else
           Y = ShiftedRelativeDepths(kToUse(i)) ...
             - SensorDistance*[0 N(:,i)' N(end,i) 0]/MaxN;
        end
%
        Hdl = stairs(X,Y);
        set(Hdl,'color',CMap(kToUse(i),:))
    end
%  
%
    line([kMin kMin],[0 max(ShiftedRelativeDepths(kToUse))+0.5], ...
        'color','r', ...
        'linestyle','--')
    line([kMax kMax],[0 max(ShiftedRelativeDepths(kToUse))+0.5], ...
        'color','r', ...
        'linestyle','--')
%
    set(gca, ...
        'xcolor','r', ...
        'ycolor','r', ...
        'color','k', ...
        'ydir','reverse', ...
        'box','on', ...
        'xaxislocation','top', ...
        'ylim',[0 max(ShiftedRelativeDepths(kToUse))+0.5], ...
        'xlim',[kMin-0.05*kMin kMax+0.05*kMax]);
    xlabel('\bfThermal Conductivity (W m^{-1} ^oC^{-1})', ...
        'fontsize',12, ...
        'verticalalignment','bottom')
%
% AF 9/02 Different label - we don't need to have spacing printed here, caused problems
%         with variable spacing
%
%    ylabel(['\bfRelative Depths (m)  -  Conductivity distributions: ' ...
%            num2str(SensorDistance,'%1.2f') ' m  <=>  N = ' int2str(MaxN) ...
%            ' (' int2str(Bins) ' bins)'], ...
%        'fontsize',12, ...
%        'verticalalignment','bottom')
    ylabel(['\bfRelative Depths (m)  -  Conductivity distributions: '  ...
            ' <=>  N = ' int2str(MaxN) ...
            ' (' int2str(Bins) ' bins)'], ...
        'fontsize',12, ...
        'verticalalignment','bottom')
    
    axes(MonteCarloFig(5,2));
    MonteCarloFig(1,3) = text(0.5,0.9, ...
        ['Conductivity and Thickness distribution'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','r', ...
        'fontweight','bold');
    MonteCarloFig(2,3) = text(0.5,0.6, ...
        ['Gaussian (k)  & Uniform (z) - ' int2str(MaxMCIterations) ' picks at each depth.'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','r');
    MonteCarloFig(3,3) = text(0.5,0.3, ...
        ['Mean Standard deviation: ' num2str(mean(Sigmak0),'%1.2f') ' W m^{-1} ^oC^{-1}'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','r');
    MonteCarloFig(4,3) = text(0.5,0, ...
        ['Minimum thickness: ' num2str(MinThickness) ' m'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','r');
    
    set(MonteCarloFig(5,2),'visible','off')
    
end

% Plot InitialBullard Plot
% ------------------------

if all(Mode == [2 0]) | all(Mode == [3 5]) | all(Mode == [3 6])

    axes(MonteCarloFig(2,2))    
    
    for i = 1:length(SensorsUsedForBullardFit)
        plot(T0(SensorsUsedForBullardFit(i)),ShiftedBullardDepths0(GoodkIndex(i)),'o', ...
            'color',CMap(SensorsUsedForBullardFit(i),:), ...
            'markerfacecolor',CMap(SensorsUsedForBullardFit(i),:))
        hold on
    end
    
    plot([0 max(ShiftedBullardDepths0)+0.5]/Slope0(2), ...
        [0 max(ShiftedBullardDepths0)+0.5],'g-','linewidth',1)
    
    set(gca, ...
        'xcolor','g', ...
        'ycolor','g', ...
        'color','k', ...
        'ydir','reverse', ...
        'box','on', ...
        'xaxislocation','top', ...
        'ylim',[0 max(ShiftedBullardDepths0)+0.5]);
    xlabel('\bfTemperature ( ^oC)', ...
        'fontsize',12, ...
        'verticalalignment','bottom')
    ylabel('\bfCumulative Thermal Resistance (m^2 ^oC W^{-1})', ...
        'fontsize',12, ...
        'verticalalignment','bottom')
    
    axes(MonteCarloFig(6,2))
    MonteCarloFig(1,4) = text(0.5,0.9, ...
        ['Heat Flow'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','g', ...
        'fontweight','bold');
    MonteCarloFig(2,4) = text(0.5,0.6, ...
        ['With initial conductivity:  ' num2str(1/Slope0(2),'%1.3f') ' W m^{-2}'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','g');
    MonteCarloFig(3,4) = text(0.5,0.3, ...
        ['At current iteration:  NaN W m^{-2}'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','g');
    MonteCarloFig(4,4) = text(0.5,0, ...
        ['Range:  [' num2str(QMin,'%1.3f') ...
            '  ' num2str(QMax,'%1.3f') '] W m^{-2}'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','g');
    
    set(MonteCarloFig(6,2),'visible','off')
    
    
    % Initialize Iterations plot
    % --------------------------
    
    axes(MonteCarloFig(3,2))
    set(gca, ...
        'xcolor','y', ...
        'ycolor','y', ...
        'color','k', ...
        'ydir','reverse', ...
        'box','on', ...
        'xaxislocation','top', ...
        'ylim',[0 MaxMCIterations]);
    xlabel('\bfHeat Flow Standard deviation (W m^{-2})', ...
        'fontsize',12, ...
        'verticalalignment','bottom')
    ylabel('\bfIteration', ...
        'fontsize',12, ...
        'verticalalignment','bottom')
    hold on
    
    axes(MonteCarloFig(7,2))
    MonteCarloFig(1,5) = text(0.5,0.9, ...
        ['Monte-Carlo Analysis'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','y', ...
        'fontweight','bold');
    MonteCarloFig(2,5) = text(0.5,0.6, ...
        ['Current iteration:  NaN/' int2str(MaxMCIterations)], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','y');
    MonteCarloFig(3,5) = text(0.5,0.3, ...
        ['Mean Heat Flow:  NaN W m^{-2}'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','y');
    MonteCarloFig(4,5) = text(0.5,0, ...
        ['Standard deviation:  NaN W m^{-2}'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','y');
    set(MonteCarloFig(7,2),'visible','off')
    
    % Plot Sensors colorbar
    % ---------------------
    
    axes(MonteCarloFig(4,2))
    
    AlteredCMap = CMap;
    AlteredCMap(setxor(1:NumberOfSensors,SensorsToUse),:) = ...
        repmat([0.15 0.15 0.15],length(setxor(1:NumberOfSensors,SensorsToUse)),1);
    colormap(AlteredCMap)
    colorbar(MonteCarloFig(4,2))
    caxis([1 NumberOfSensors])
    
    set(MonteCarloFig(4,2), ...
        'xcolor','y', ...
        'ycolor','y', ...
        'ytick',[1.5:NumberOfSensors+0.5], ...
        'yticklabel',[1:NumberOfSensors], ...
        'ticklength',[0 0])
    ylabel('\bfSensor Number', ...
        'verticalalignment','top', ...
        'fontsize',12)
    
end

% Initialize Counters and begin analysis
% --------------------------------------
% MH -- Waitbar
% initialize waitbar
H_wait=waitbar(0,'Iterating...');
set(H_wait,'units','normalized');
set(H_wait,'position',[0.45 0.85 0.25 0.1]);

for n = 1:MaxMCIterations 
    
    Iterations(n) = n;
    
    % MH -- Waitbar
    waitbar(n/MaxMCIterations);
    
    % Plot Current profile
    % --------------------
    
    if all(Mode == [2 0]) | all(Mode == [3 5]) | all(Mode == [3 6])
        
        axes(MonteCarloFig(1,2));
        if n>1
            delete(PreviousProfile)
            delete(PreviousPoints)
        end
        PreviousProfile = stairs([k(n,1) k(n,:)],[ShiftedRelativeDepths(kToUse(1)) zBD(n,:) 0]);
        set(PreviousProfile','color',[0.8 0.8 0.8])
        PreviousPoints = plot(k(n,:),ShiftedRelativeDepths(kToUse),'.', ...
            'markersize',8, ...
            'color',[0.95 0.95 0.95]);
    end

    % Frictional Decay processing
    % ---------------------------
    
    if UseFrictional 
        
        kFric = k0;
        kFric(kToUse) = k(n,:);
        
        [	FricUsedPoints, ...
                T0, ...
                FricError, ...
                FricDelays, ...
                FricSlope ...
        ] = FRICTIONAL( ...
            FricTime, ...
            FricTemp, ...
            NumberOfSensors, ...
            FrictionalDelays, ...
            FricMaxStep, ...
            TimeInc, ...
            kFric, ...
            HyndmanCoeffs, ...
            SensorRadius, ...
            FricTauMin, ...
            FricTauMax, ...
            Mode, ...
            UseFrictional);
    end
        
    % Now compute Bullard Depths and Associated Error
    % ----------------------------------------------- 
    
    BullardDepths(length(kToUse)) = zToUse(end)/k(n,end);
    
    for i = length(kToUse)-1:-1:1
        BullardDepths(i) = BullardDepths(i+1) + (zBD(n,i)-zToUse(i+1))/k(n,i+1) ...
            + (zToUse(i)-zBD(n,i))/k(i);
    end
    
    [p,s] = polyfit(T0(SensorsUsedForBullardFit)',BullardDepths(GoodkIndex),1);
    Shift = -p(2);
    Slope = p(1);
    
    ShiftedBullardDepths = BullardDepths + Shift;

    % Now do the Monte-Carlo !
    % ------------------------
    
    AllT(:,n) = T0(SensorsUsedForBullardFit);
    AllBullardDepths(:,n) = ShiftedBullardDepths(GoodkIndex)';
    AllHeatFlows(n) = 1/Slope;
    T(n,:) = mean(AllT,2)';
    SigmaTD = std(AllT,0,2);
    Rz(n,:) = mean(AllBullardDepths,2)';
    SigmaR = std(AllBullardDepths,0,2);
    Q(n) = mean(AllHeatFlows);
    SigmaTI = Q(n)*SigmaR;
    SigmaT = sqrt(SigmaTI.^2 + SigmaTD.^2);
    
    if any(SigmaT == 0)
        Delta = NaN;
        SigmaHF(n) = NaN;
    else
        Delta = sum(1./SigmaT.^2)*sum(Rz(n,:)'.^2./SigmaT.^2) ...
            -(sum(Rz(n,:)'./SigmaT.^2)).^2;
        SigmaHF(n) = sqrt(sum(1./SigmaT.^2)/Delta);
    end

    if 1/Slope>QMax; QMax = 1/Slope; end
    if 1/Slope<QMin; QMin = 1/Slope; end
    
    if all(Mode == [2 0]) | all(Mode == [3 5]) | all(Mode == [3 6])
        
        axes(MonteCarloFig(2,2))
        
        for i = 1:length(SensorsUsedForBullardFit)
            plot(AllT(i,n),AllBullardDepths(i,n),'+', ...
                'markersize',5, ...
                'color',CMap(SensorsUsedForBullardFit(i),:))
        end
        plot([0 max(ShiftedBullardDepths)+0.5]/Slope, ...
            [0 max(ShiftedBullardDepths)+0.5],'w:')
        
        axes(MonteCarloFig(3,2))
        plot(SigmaHF,Iterations,'w-o', ...
            'markersize',4)
        
        set(MonteCarloFig(3,4),'string', ...
            ['At Current Iteration:  ' num2str(1/Slope,'%1.3f') ' W m^{-2}']); 
        set(MonteCarloFig(4,4),'string', ...
            ['Range:  [' num2str(QMin,'%1.3f') ...
                '  ' num2str(QMax,'%1.3f') '] W m^{-2}']);
        set(MonteCarloFig(2,5),'string' ,...
            ['Iteration:  ' int2str(n) '/' int2str(MaxMCIterations)]);
        set(MonteCarloFig(3,5),'string', ...
            ['Mean Heat Flow:  ' num2str(Q(n),'%1.5f') ' W m^{-2}']);
        set(MonteCarloFig(4,5),'string', ...
            ['Standard deviation:  ' num2str(SigmaHF(n),'%1.5f') ' W m^{-2}']);
        
        drawnow
        
    end
end

% MH -- Close waitbar

close(H_wait);

if all(Mode == [2 0]) | all(Mode == [3 5]) | all(Mode == [3 6])
    
    axes(MonteCarloFig(2,2))
    
    for i = 1:length(SensorsUsedForBullardFit)
        plot(T0(SensorsUsedForBullardFit(i)),ShiftedBullardDepths0(GoodkIndex(i)),'o', ...
            'color',CMap(SensorsUsedForBullardFit(i),:), ...
            'markerfacecolor',CMap(SensorsUsedForBullardFit(i),:))
        hold on
    end
    
    plot([0 max(ShiftedBullardDepths0)+0.5]/Slope0(2), ...
        [0 max(ShiftedBullardDepths0)+0.5],'g-','linewidth',1)
    
    % Print and Save buttons
    % ----------------------
    
    axes(MonteCarloFig(8,2))
    MonteCarloFig(1,6) = text(0.5,1,['\bf' ResName], ...
        'verticalalignment','top', ...
        'horizontalalignment','center', ...
        'fontsize',16);
    MonteCarloFig(2,6) = text(0,0.3,['Results: ' pwd '/' ResName '.res'], ...
        'verticalalignment','bottom', ...
        'horizontalalignment','left', ...
        'fontsize',9);
    MonteCarloFig(3,6) = text(0,0,['Penetration: ' PenFile], ...
        'verticalalignment','bottom', ...
        'horizontalalignment','left', ...
        'fontsize',9);
    MonteCarloFig(4,6) = text(1,0,['Processed: ' FORMATTIME], ...
        'verticalalignment','bottom', ...
        'horizontalalignment','right', ...
        'fontsize',9);
    set(MonteCarloFig(1:4,6),'visible','off');
    
    CallBackPrintString = ['global MonteCarloFig; ' ...
            'set(MonteCarloFig(1:4,6),''visible'',''on''); ' ...
            'print -dps -noui -f' num2str(MonteCarloFig(1,1)) '; ' ...
            'set(MonteCarloFig(1:4,6),''visible'',''off''); ' ...
            'refresh'];
    MonteCarloFig(1,7) = uicontrol('Style','pushbutton', ...
        'units','normalized', ...
        'position',[0.02 0.02 0.08 0.035], ...
        'string','Print', ...
        'tooltipstring','Click to send this figure to your default printer (B&W)', ...
        'fontsize',12, ...
        'backgroundcolor',[0.15 0.15 0.15], ...
        'foregroundcolor','y', ...
        'callback',CallBackPrintString);
   CallBackSaveString = ['global MonteCarloFig ResName; ' ...
            'set(MonteCarloFig(1:4,6),''visible'',''off''); ' ...
            'set(MonteCarloFig(3:4,2),''xcolor'',''y'',''ycolor'',''y''); ' ...
            'set(MonteCarloFig(1:4,5),''color'',''y''); ' ...
            'PrintName = char(inputdlg(' ...
            '{''Enter file name:''},' ...
            '''Tiff file name'',' ...
            '[1 48],{[''05_'' ResName ''_MonteCarlo.tiff'']})); ' ...
            'ScreenSize = get(0,''screensize''); ' ...
            'ScreenSize(4) = ScreenSize(4)*0.95; ' ...
            'pause(1); ' ...
            'eval([''screencapture(0,''''position'''', ScreenSize ,'''''',PrintName,'''''');'']);' ...
            'set(MonteCarloFig(1:4,6),''visible'',''off''); ' ...
            'set(MonteCarloFig(3:4,2),''xcolor'',''y'',''ycolor'',''y''); ' ...
            'set(MonteCarloFig(1:4,5),''color'',''y''); ' ...         
            'refresh'];
    MonteCarloFig(2,7) = uicontrol('Style','pushbutton', ...
        'units','normalized', ...
        'position',[0.1 0.02 0.08 0.035], ...
        'string','Screengrab', ...
        'fontsize',12, ...
        'backgroundcolor',[0.15 0.15 0.15], ...
        'foregroundcolor','y', ...
        'callback',CallBackSaveString);
    
end

if  all(Mode == [3 5]) | all(Mode == [3 6])
    
    set(MonteCarloFig(1:4,6),'visible','on');
    set(MonteCarloFig(3:4,2),'xcolor','k','ycolor','k')
    set(MonteCarloFig(1:4,5),'color','k')
    PrintName = [ResName '_Monte-Carlo.ps'];
    eval(['print -dpsc -noui -f' num2str(MonteCarloFig(1,1)) ' ' PrintName]);
    set(MonteCarloFig(1:4,6),'visible','off');
    set(MonteCarloFig(3:4,2),'xcolor','y','ycolor','y')
    set(MonteCarloFig(1:4,5),'color','y')
    refresh;
    
end

PRINTOUTMCRESULTS( ...
    MaxMCIterations, ...
    T(end,:), ...
    Rz(end,:), ...
    Q(end), ...
    SigmaHF(end), ...
    QMin, ...
    QMax, ...
    ShiftedRelativeDepths, ...
    RelativeDepths, ...
    k0, ...
    MinThickness, ...
    T0, ...
    SensorsUsedForBullardFit, ...
    kToUse, ...
    k, ...
    kMin, ...
    kMax, ...
    Sigmak0, ...
    SigmakFactors, ...
    UseFrictional);

eval([' save ' ResName '_MonteCarlo ' ...
        'MaxMCIterations T Rz Q SigmaHF QMin QMax SensorsUsedForBullardFit ' ...
        'RelativeDepths ShiftedRelativeDepths k0 T0 MinThickness kMin kMax ' ...
        'Sigmak0 UseFrictional']);

STATUS(LogFileId,['Saved mat file: ' ResName ...
        '_MonteCarlo.mat with Monte-Carlo analysis results ...'],2); 


% ==========================================================================
% 
% -----   PRINTOUTMCRESULTS  -----
%
% ==========================================================================

function  PRINTOUTMCRESULTS( ...
    MaxMCIterations, ...
    T, ...
    Rz, ...
    Q, ...
    SigmaHF, ...
    QMin, ...
    QMax, ...
    ShiftedRelativeDepths, ...
    RelativeDepths, ...
    k0, ...
    MinThickness, ...
    T0, ...
    SensorsUsedForBullardFit, ...
    kToUse, ...
    k, ...
    kMin, ...
    kMax, ...
    Sigmak0, ...
    SigmakFactors, ...
    UseFrictional)

global ResFileId LogFileId NumberOfColumns PulseData

NC = NumberOfColumns;

for Id = [LogFileId ResFileId]
    
    String = ['SUMMARY OF MONTE-CARLO ANALYSIS'];
    fprintf(Id,'%s\n',[repmat(' ',1,fix((NC-length(String))/2)) ...
            repmat('-',1,length(String))]);
    fprintf(Id,'%s\n',[repmat(' ',1,fix((NC-length(String))/2)) String]);
    fprintf(Id,'%s\n\n\n',[repmat(' ',1,fix((NC-length(String))/2)) ...
            repmat('-',1,length(String))]);
    
    [nrows,ncols] = size(SensorsUsedForBullardFit);
    if nrows == 1
        fprintf(Id,'%s\n\n',['Sensors used: ' int2str(SensorsUsedForBullardFit)]);  
    else
        fprintf(Id,'%s\n\n',['Sensors used: ' int2str(SensorsUsedForBullardFit')]);
    end
    
    fprintf(Id,'%s\n', ...
        'Sensor  Relative    Shifted      k0      T0     Mean T.   Mean Rz');
    fprintf(Id,'%s\n', ...
        '  Id.   Depth (m)  Depth (m)  (W/m/K)  (deg C)  (deg c)  (m2 deg/W)');
    fprintf(Id,'%s\n\n', ...
        '------  ---------  ---------  -------  -------  -------  ----------');
    if nrows == 1
        fprintf(Id, ...
            '%4d %10.2f %10.3f %9.3f %8.3f %8.3f %9.3f\n', ...
            [SensorsUsedForBullardFit; ...
                RelativeDepths(SensorsUsedForBullardFit); ...
                ShiftedRelativeDepths(SensorsUsedForBullardFit); ...
                k0(SensorsUsedForBullardFit); ...
                T0(SensorsUsedForBullardFit)'; ...
                T; ... 
                Rz]);
    else
         fprintf(Id, ...
            '%4d %10.2f %10.3f %9.3f %8.3f %8.3f %9.3f\n', ...
            [SensorsUsedForBullardFit'; ...
                RelativeDepths(SensorsUsedForBullardFit); ...
                ShiftedRelativeDepths(SensorsUsedForBullardFit); ...
                k0(SensorsUsedForBullardFit); ...
                T0(SensorsUsedForBullardFit)'; ...
                T; ... 
                Rz]);
    end
     
    fprintf(Id,'\n\n%s\t %1d\n','Total number of iterations:  ',MaxMCIterations);
    fprintf(Id,'%s\t %1.3f\n\n','Minimum layer thickness (m):  ',MinThickness);
    
    if ~PulseData
        [foor,fooc]=size(kToUse);
        if fooc==1
            kToUse=kToUse';
        end
        
        fprintf(Id,'%s\n\n','Conductivity distribution (W/m/degC):');
        
        fprintf(Id,'%s\n','Sensor     Minimum         Mean       Median       Standard Deviation         Maximum');
        fprintf(Id,'%s\n','  Id.     (1) / (2)      (1) / (3)     (1)      (1) / (2)   ((4) x (5))      (1) / (2)');        
        fprintf(Id,'%s\n\n','------  -------------  -------------  ------  ---------------------------  -------------');
        fprintf(Id,'%4d %8.2f / %1.2f %7.2f / %1.2f %7.2f  %6.2f / %1.2f (%1.2f x %1.2f)  %6.2f / %1.2f\n', ...
            [kToUse; ...
                min(k); ...
                repmat(kMin,1,length(kToUse)); ...
                mean(k); ...
                k0(kToUse); ...
                median(k); ...
                std(k); ...
                Sigmak0(kToUse); ...
                Sigmak0(kToUse)./SigmakFactors(kToUse); ...
                SigmakFactors(kToUse); ...
                max(k); ...
                repmat(kMax,1,length(kToUse))]) ;
        
        fprintf(Id,'\n%s\n',' (1) Effectively calculated from the conductivity distribution');
        fprintf(Id,'%s\n',' (2) User-specified initial parameter ');
        fprintf(Id,'%s\n',' (3) Initial conductivity assumed');
        fprintf(Id,'%s\n',' (4) User-specified scalar');
        fprintf(Id,'%s\n\n',' (5) User-specified multipliers');          
        
        if UseFrictional
            fprintf(Id,'\n%s\n\n','Sediment temperatures were recomputed for all conductivities used.');
        else
            fprintf(Id,'\n%s\n\n','Sediment temperatures were NOT recomputed for all conductivities used.');
        end
    end
    
    fprintf(Id,'%s\t %1.4f\n','Mean Heat Flow (W/m2):  ',Q);
    fprintf(Id,'%s\t %1.4f\n','Standard deviation (W/m2):  ',SigmaHF);
    fprintf(Id,'%s\t[%1.4f  %1.4f]\n\n\n','Heat flow range (W/m2):  ',[QMin QMax]);

end


% ==========================================================================
%
% -----   GETFALTAU   -----
%
% ==========================================================================
% This function is not used by this version of the program anymore.

function FAT = GETFALTAU(Alpha,Tau);

% Note: The vector u defines the integration resolution.
% I have tested it against the fat20.tab table used by HFRED.
% 1000 points from 1e-6 to 1e6 work fine.  More points require
% more time but do not increase the accuracy.
% A. Cherkaoui - 01.26.2001

u = logspace(-6,6,1e3);

Deltau = (u.*bessely(0,u)-Alpha*bessely(1,u)).^2 + ...
    (u.*besselj(0,u)-Alpha*besselj(1,u)).^2;

dummy = repmat(u.*Deltau,length(Tau),1);
FAT = (4*Alpha/pi/pi)*trapz(u',exp(-Tau'*u.^2)'./dummy');


% ==========================================================================
%
% -----   GETAFALTAU2   -----
%
% ==========================================================================
% This function is not used by this version of the program anymore.

function [ ...
        Alpha, ...
        Tau, ...
        FAT ...
] = GETFALTAU2;

fid=fopen('fat20.tab');
dummy=fscanf(fid,'%g',inf);
Alpha = dummy(1);
Tau0 = dummy(2);
dTau = dummy(3);

FAT = dummy(4:end);
Tau = [Tau0:dTau:Tau0+(length(FAT)-1)*dTau];


% ==========================================================================
% 
% -----   SlugHeat15DLG   -----
%
% ==========================================================================

function ButtonName = SlugHeat15DLG(Question,Title,Btn1,Btn2,Btn3,Default)

% Based on Matlab's QUESTDLG

%QUESTDLG Question dialog box.
%  ButtonName=QUESTDLG(Question) creates a modal dialog box that 
%  automatically wraps the cell array or string (vector or matrix) 
%  Question to fit an appropriately sized window.  The name of the 
%  button that is pressed is returned in ButtonName.  The Title of 
%  the figure may be specified by adding a second string argument.  
%  Question will be interpreted as a normal string.  
%
%  QUESTDLG uses WAITFOR to suspend execution until the user responds.
%
%  The default set of buttons names for QUESTDLG are 'Yes','No' and 
%  'Cancel'.  The default answer for the above calling syntax is 'Yes'.  
%  This can be changed by adding a third argument which specifies the 
%  default Button.  i.e. ButtonName=questdlg(Question,Title,'No').
%
%  Up to 3 custom button names may be specified by entering
%  the button string name(s) as additional arguments to the function 
%  call.  If custom ButtonName's are entered, the default ButtonName
%  must be specified by adding an extra argument DEFAULT, i.e.
%
%    ButtonName=questdlg(Question,Title,Btn1,Btn2,DEFAULT);
%
%  where DEFAULT=Btn1.  This makes Btn1 the default answer.
%
%  To use TeX interpretation for the Question string, a data
%  structure must be used for the last argument, i.e.
%
%    ButtonName=questdlg(Question,Title,Btn1,Btn2,OPTIONS);
%
%  The OPTIONS structure must include the fields Default and Interpreter.  
%  Interpreter may be 'none' or 'tex' and Default is the default button
%  name to be used.
%
%  Example:
%
%  ButtonName=questdlg('What is your wish?', ...
%                      'Genie Question', ...
%                      'Food','Clothing','Money','Money');
%
%  
%  switch ButtonName,
%    case 'Food', 
%     disp('Food is delivered');
%    case 'Clothing',
%     disp('The Emperor''s  new clothes have arrived.')
%     case 'Money',
%      disp('A ton of money falls out the sky.');
%  end % switch
%
%  See also TEXTWRAP, INPUTDLG.

%  Author: L. Dean
%  Copyright 1984-2000 The MathWorks, Inc.
%  $Revision: 5.46 $

if nargin<1,error('Too few arguments for QUESTDLG');end

Interpreter='none';
if ~iscell(Question),Question=cellstr(Question);end

if strcmp(Question{1},'#FigKeyPressFcn'),
    QuestFig=get(0,'CurrentFigure');
    AsciiVal= abs(get(QuestFig,'CurrentCharacter'));
    if ~isempty(AsciiVal),
        if AsciiVal==32 | AsciiVal==13,
            set(QuestFig,'UserData',1);
            uiresume(QuestFig);
        end %if AsciiVal
    end %if ~isempty
    return
end
%%%%%%%%%%%%%%%%%%%%%
%%% General Info. %%%
%%%%%%%%%%%%%%%%%%%%%
Black      =[0       0        0      ]/255;
LightGray  =[192     192      192    ]/255;
LightGray2 =[160     160      164    ]/255;
MediumGray =[128     128      128    ]/255;
White      =[255     255      255    ]/255;

%%%%%%%%%%%%%%%%%%%%
%%% Nargin Check %%%
%%%%%%%%%%%%%%%%%%%%
if nargout>1,error('Wrong number of output arguments for QUESTDLG');end
if nargin==1,Title=' ';end
if nargin<=2, Default='Yes';end
if nargin==3, Default=Btn1;end
if nargin<=3, Btn1='Yes'; Btn2='No'; Btn3='Cancel';NumButtons=3;end
if nargin==4, Default=Btn2;Btn2=[];Btn3=[];NumButtons=1;end
if nargin==5, Default=Btn3;Btn3=[];NumButtons=2;end
if nargin==6, NumButtons=3;end
if nargin>6, error('Too many input arguments');NumButtons=3;end

if isstruct(Default),
    Interpreter=Default.Interpreter;
    Default=Default.Default;
end


%%%%%%%%%%%%%%%%%%%%%%%
%%% Create QuestFig %%%
%%%%%%%%%%%%%%%%%%%%%%%
FigPos=get(0,'DefaultFigurePosition');
FigWidth=75;FigHeight=45;
FigPos(3:4)=[FigWidth FigHeight];
QuestFig=dialog(                                               ...
    'Visible'         ,'off'                      , ...
    'Name'            ,Title                      , ...
    'Pointer'         ,'arrow'                    , ...
    'Units'           ,'points'                   , ...
    'Position'        ,FigPos                     , ...
    'KeyPressFcn'     ,'questdlg #FigKeyPressFcn;', ...
    'UserData'        ,0                          , ...
    'IntegerHandle'   ,'off'                      , ...
    'WindowStyle'     ,'normal'                   , ... 
    'HandleVisibility','callback'                 , ...
    'Tag'             ,Title                        ...
);

%%%%%%%%%%%%%%%%%%%%%
%%% Set Positions %%%
%%%%%%%%%%%%%%%%%%%%%
DefOffset=3;

IconWidth=32;
IconHeight=32;
IconXOffset=DefOffset;
IconYOffset=FigHeight-DefOffset-IconHeight;
IconCMap=[Black;get(QuestFig,'Color')];

DefBtnWidth=40;
BtnHeight=20;
BtnYOffset=DefOffset;
BtnFontSize=get(0,'FactoryUIControlFontSize');
BtnFontName=get(0,'FactoryUIControlFontName');

BtnWidth=DefBtnWidth;

ExtControl=uicontrol(QuestFig   , ...
    'Style'    ,'pushbutton', ...
    'String'   ,' '         , ...
    'FontUnits','points'    , ...                     
    'FontSize' ,BtnFontSize , ...
    'FontName' ,BtnFontName   ...
);

set(ExtControl,'String',Btn1);
BtnExtent=get(ExtControl,'Extent');
BtnWidth=max(BtnWidth,BtnExtent(3)+8);
if NumButtons > 1
    set(ExtControl,'String',Btn2);
    BtnExtent=get(ExtControl,'Extent');
    BtnWidth=max(BtnWidth,BtnExtent(3)+8);
    if NumButtons > 2
        set(ExtControl,'String',Btn3);
        BtnExtent=get(ExtControl,'Extent');
        BtnWidth=max(BtnWidth,BtnExtent(3)+8);
    end 
end

delete(ExtControl);

MsgTxtXOffset=IconXOffset+IconWidth;

FigWidth=max(FigWidth,MsgTxtXOffset+NumButtons*(BtnWidth+2*DefOffset));
FigPos(3)=FigWidth;
set(QuestFig,'Position',FigPos);

BtnXOffset=zeros(NumButtons,1);

if NumButtons==1,
    BtnXOffset=(FigWidth-BtnWidth)/2;
elseif NumButtons==2,
    BtnXOffset=[MsgTxtXOffset
        FigWidth-DefOffset-BtnWidth];
elseif NumButtons==3,
    BtnXOffset=[MsgTxtXOffset
        0
        FigWidth-DefOffset-BtnWidth];
    BtnXOffset(2)=(BtnXOffset(1)+BtnXOffset(3))/2;
end

MsgTxtYOffset=DefOffset+BtnYOffset+BtnHeight;
MsgTxtWidth=FigWidth-DefOffset-MsgTxtXOffset-IconWidth;
MsgTxtHeight=FigHeight-DefOffset-MsgTxtYOffset;
MsgTxtForeClr=Black;
MsgTxtBackClr=get(QuestFig,'Color');

CBString='uiresume(gcf)';
ButtonString=Btn1;
ButtonTag='Btn1';
BtnHandle(1)=uicontrol(QuestFig            , ...
    'Style'              ,'pushbutton', ...
    'Units'              ,'points'    , ...
    'Position'           ,[ BtnXOffset(1) BtnYOffset  ...
        BtnWidth       BtnHeight   ...
]           , ...
    'CallBack'           ,CBString    , ...
    'String'             ,ButtonString, ...
    'HorizontalAlignment','center'    , ...
    'FontUnits'          ,'points'    , ...
    'FontSize'           ,BtnFontSize , ...
    'FontName'           ,BtnFontName , ...
    'Tag'                ,ButtonTag     ...
);
if strcmp(ButtonString, Default)
    set(BtnHandle(1),'FontWeight','bold')
end

if NumButtons > 1
    ButtonString=Btn2;
    ButtonTag='Btn2';
    BtnHandle(2)=uicontrol(QuestFig            , ...
        'Style'              ,'pushbutton', ...
        'Units'              ,'points'    , ...
        'Position'           ,[ BtnXOffset(2) BtnYOffset  ...
            BtnWidth       BtnHeight   ...
    ]           , ...
        'CallBack'           ,CBString    , ...
        'String'             ,ButtonString, ...
        'HorizontalAlignment','center'    , ...
        'FontUnits'          ,'points'    , ...
        'FontSize'           ,BtnFontSize , ...
        'FontName'           ,BtnFontName , ...
        'Tag'                ,ButtonTag     ...
    );
    if strcmp(ButtonString, Default)
        set(BtnHandle(2),'FontWeight','bold')
    end
    
    if NumButtons > 2
        ButtonString=Btn3;
        ButtonTag='Btn3';
        BtnHandle(3)=uicontrol(QuestFig            , ...
            'Style'              ,'pushbutton', ...
            'Units'              ,'points'    , ...
            'Position'           ,[ BtnXOffset(3) BtnYOffset  ...
                BtnWidth       BtnHeight   ...
        ]           , ...
            'CallBack'           ,CBString    , ...
            'String'             ,ButtonString, ...
            'HorizontalAlignment','center'    , ...
            'FontUnits'          ,'points'    , ...
            'FontSize'           ,BtnFontSize , ...
            'FontName'           ,BtnFontName , ...
            'Tag'                ,ButtonTag     ...
        );
        if strcmp(ButtonString, Default)
            set(BtnHandle(3),'FontWeight','bold')
        end
    end
end
MsgHandle=uicontrol(QuestFig            , ...
    'Style'              ,'text'         , ...
    'Units'              ,'points'       , ...
    'Position'           ,[MsgTxtXOffset      ...
        MsgTxtYOffset      ...
    0.95*MsgTxtWidth   ...
        MsgTxtHeight       ...
]              , ...
    'String'             ,{' '}          , ...
    'Tag'                ,'Question'     , ...
    'HorizontalAlignment','left'         , ...    
    'FontUnits'          ,'points'       , ...
    'FontWeight'         ,'bold'         , ...
    'FontSize'           ,BtnFontSize    , ...
    'FontName'           ,BtnFontName    , ...
    'BackgroundColor'    ,MsgTxtBackClr  , ...
    'ForegroundColor'    ,MsgTxtForeClr    ...
);

[WrapString,NewMsgTxtPos]=textwrap(MsgHandle,Question,75);

NumLines=size(WrapString,1);

% The +2 is to add some slop for the border of the control.
MsgTxtWidth=max(MsgTxtWidth,NewMsgTxtPos(3)+2);
MsgTxtHeight=NewMsgTxtPos(4)+2;

MsgTxtXOffset=IconXOffset+IconWidth+DefOffset;
FigWidth=max(NumButtons*(BtnWidth+DefOffset)+DefOffset, ...
    MsgTxtXOffset+MsgTxtWidth+DefOffset);


% Center Vertically around icon  
if IconHeight>MsgTxtHeight,
    IconYOffset=BtnYOffset+BtnHeight+DefOffset;
    MsgTxtYOffset=IconYOffset+(IconHeight-MsgTxtHeight)/2;
    FigHeight=IconYOffset+IconHeight+DefOffset;    
    % center around text    
else,
    MsgTxtYOffset=BtnYOffset+BtnHeight+DefOffset;
    IconYOffset=MsgTxtYOffset+(MsgTxtHeight-IconHeight)/2;
    FigHeight=MsgTxtYOffset+MsgTxtHeight+DefOffset;    
end    

if NumButtons==1,
    BtnXOffset=(FigWidth-BtnWidth)/2;
elseif NumButtons==2,
    BtnXOffset=[(FigWidth-DefOffset)/2-BtnWidth
        (FigWidth+DefOffset)/2      
    ];
    
elseif NumButtons==3,
    BtnXOffset(2)=(FigWidth-BtnWidth)/2;
    BtnXOffset=[BtnXOffset(2)-DefOffset-BtnWidth
        BtnXOffset(2)
        BtnXOffset(2)+BtnWidth+DefOffset
    ];              
end

ScreenUnits=get(0,'Units');
set(0,'Units','points');
ScreenSize=get(0,'ScreenSize');
set(0,'Units',ScreenUnits);

FigPos(1)=(ScreenSize(3)-FigWidth)/2;
FigPos(2)=(ScreenSize(4)-FigHeight)/2;
FigPos(3:4)=[FigWidth FigHeight];

set(QuestFig ,'Position',FigPos);

BtnPos=get(BtnHandle,{'Position'});BtnPos=cat(1,BtnPos{:});
BtnPos(:,1)=BtnXOffset;
BtnPos=num2cell(BtnPos,2);  
set(BtnHandle,{'Position'},BtnPos);  

delete(MsgHandle);
AxesHandle=axes('Parent',QuestFig,'Position',[0 0 1 1],'Visible','off');

MsgHandle=text( ...
    'Parent'              ,AxesHandle                      , ...
    'Units'               ,'points'                        , ...
    'FontUnits'           ,'points'                        , ...
    'FontSize'            ,BtnFontSize                     , ...
    'FontName'            ,BtnFontName                     , ...
    'HorizontalAlignment' ,'left'                          , ...
    'VerticalAlignment'   ,'bottom'                        , ...
    'HandleVisibility'    ,'callback'                      , ...
    'Position'            ,[MsgTxtXOffset MsgTxtYOffset 0] , ...
    'String'              ,WrapString                      , ...
    'Interpreter'         ,Interpreter                     , ...
    'Tag'                 ,'Question'                        ...
    );

IconAxes=axes(                                      ...
    'Units'       ,'points'              , ...
    'Parent'      ,QuestFig              , ...  
    'Position'    ,[IconXOffset IconYOffset  ...
        IconWidth IconHeight], ...
    'NextPlot'    ,'replace'             , ...
        'Tag'         ,'IconAxes'              ...
        );         
    
    set(QuestFig ,'NextPlot','add');
    
    IconData= ...
        [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2;
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2;
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2;
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2;
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 2 2 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 0 0 0 2 2 2 2 0 0 0 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 0 0 0 2 2 2 2 0 0 0 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2; 
        2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2];
    
    Img=image('CData',IconData,'Parent',IconAxes);
    set(QuestFig, 'Colormap', IconCMap);
    set(IconAxes, ...
        'Visible','off'           , ...
        'YDir'   ,'reverse'       , ...
        'XLim'   ,get(Img,'XData'), ...
        'YLim'   ,get(Img,'YData')  ...
        );
    set(findobj(QuestFig),'HandleVisibility','callback');
    set(QuestFig ,'WindowStyle','modal','Visible','on');
    drawnow;
    
    uiwait(QuestFig);
    
    TempHide=get(0,'ShowHiddenHandles');
    set(0,'ShowHiddenHandles','on');
    
    if any(get(0,'Children')==QuestFig),
        if get(QuestFig,'UserData'),
            ButtonName=Default;
        else,
            ButtonName=get(get(QuestFig,'CurrentObject'),'String');
        end
        delete(QuestFig);
    else
        ButtonName=Default;
    end
    
    set(0,'ShowHiddenHandles',TempHide);
    
